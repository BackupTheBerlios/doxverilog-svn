
/* A Bison parser, made by GNU Bison 2.4.1.  */

/* Skeleton implementation for Bison GLR parsers in C
   
      Copyright (C) 2002, 2003, 2004, 2005, 2006 Free Software Foundation, Inc.
   
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.
   
   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C GLR parser skeleton written by Paul Hilfinger.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.4.1"

/* Skeleton name.  */
#define YYSKELETON_NAME "glr.c"

/* Pure parsers.  */
#define YYPURE 0

/* Using locations.  */
#define YYLSP_NEEDED 1


/* Substitute the variable and function names.  */
#define yyparse c_parse
#define yylex   c_lex
#define yyerror c_error
#define yylval  c_lval
#define yychar  c_char
#define yydebug c_debug
#define yynerrs c_nerrs
#define yylloc  c_lloc

/* Copy the first part of user declarations.  */

/* Line 172 of glr.c  */
#line 33 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"


#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "verilogdocgen.h"
#include "membergroup.h"
//#include "verilogparser.hpp"
#include "vhdldocgen.h"
#include "doxygen.h"
#include "searchindex.h"
#include "verilogscanner.h"
#include "commentscan.h"

#define YYMAXDEPTH 15000

static MyParserConv* myconv=0;

static int CurrState;
static bool generateItem=false;
static int          currVerilogType;
static Entry*       current=0;
static Entry*		current_rootVerilog  ;
static Entry*		currentVerilog=0  ;
static Entry*       currentFunctionVerilog=0;
static Entry*       lastModule=0;

static Entry        prevDocEntryVerilog;

static bool         parseCode=FALSE; 

static QCString     currVerilogClass;
static QCString     identVerilog; // last written word
static QCString     currVerilogInst;
static QCString     prevName; // stores the last parsed word
static QCString     moduleParamName; // stores name of  module xxx#(paramList) xxx ();
static int          moduleLine=0;

static int briefLine;
static QCString briefString;

int c_lex (void);
void c_error (char const *);


// functions for  verilog parser ---------------------

static void parseString();
static void writeDigit();
static void initVerilogParser();
static void parseModule();
static void parseFunction(Entry* e);
static void parseReg(Entry* e);
static void parsePortDir(Entry* e,int type);
static void parseParam(Entry* e);
static void parseListOfPorts();
static void parseAlways(bool b=false);
static void parseModuleInst(QCString& first,QCString& sec);


bool findExtendsComponent(QList<BaseInfo> *extend,QCString& compName);
void addSubEntry(Entry* root, Entry* e);


/* Line 172 of glr.c  */
#line 132 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.cpp"



#include "verilogparser.hpp"

/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 1
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* Enabling the token table.  */
#ifndef YYTOKEN_TABLE
# define YYTOKEN_TABLE 0
#endif

/* Default (constant) value used for initialization for null
   right-hand sides.  Unlike the standard yacc.c template,
   here we set the default value of $$ to a zeroed-out value.
   Since the default value is undefined, this behavior is
   technically correct.  */
static YYSTYPE yyval_default;

/* Copy the second part of user declarations.  */


/* Line 243 of glr.c  */
#line 167 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.cpp"

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#ifndef YY_
# if YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(e) ((void) (e))
#else
# define YYUSE(e) /* empty */
#endif

/* Identity function, used to suppress warnings about constant conditions.  */
#ifndef lint
# define YYID(n) (n)
#else
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static int
YYID (int i)
#else
static int
YYID (i)
    int i;
#endif
{
  return i;
}
#endif

#ifndef YYFREE
# define YYFREE free
#endif
#ifndef YYMALLOC
# define YYMALLOC malloc
#endif
#ifndef YYREALLOC
# define YYREALLOC realloc
#endif

#define YYSIZEMAX ((size_t) -1)

#ifdef __cplusplus
   typedef bool yybool;
#else
   typedef unsigned char yybool;
#endif
#define yytrue 1
#define yyfalse 0

#ifndef YYSETJMP
# include <setjmp.h>
# define YYJMP_BUF jmp_buf
# define YYSETJMP(env) setjmp (env)
# define YYLONGJMP(env, val) longjmp (env, val)
#endif

/*-----------------.
| GCC extensions.  |
`-----------------*/

#ifndef __attribute__
/* This feature is available in gcc versions 2.5 and later.  */
# if (! defined __GNUC__ || __GNUC__ < 2 \
      || (__GNUC__ == 2 && __GNUC_MINOR__ < 5) || __STRICT_ANSI__)
#  define __attribute__(Spec) /* empty */
# endif
#endif

#define YYOPTIONAL_LOC(Name) Name

#ifndef YYASSERT
# define YYASSERT(condition) ((void) ((condition) || (abort (), 0)))
#endif

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  14
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   5095

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  136
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  320
/* YYNRULES -- Number of rules.  */
#define YYNRULES  801
/* YYNRULES -- Number of states.  */
#define YYNSTATES  1752
/* YYMAXRHS -- Maximum number of symbols on right-hand side of rule.  */
#define YYMAXRHS 25
/* YYMAXLEFT -- Maximum number of symbols to the left of a handle
   accessed by $0, $-1, etc., in any rule.  */
#define YYMAXLEFT 0

/* YYTRANSLATE(X) -- Bison symbol number corresponding to X.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   390

#define YYTRANSLATE(YYX)						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const unsigned char yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const unsigned short int yyprhs[] =
{
       0,     0,     3,     5,     6,     9,    12,    14,    16,    18,
      20,    22,    25,    27,    29,    35,    39,    46,    52,    58,
      60,    64,    68,    70,    73,    77,    81,    85,    89,    93,
      95,    98,   101,   104,   106,   109,   113,   114,   117,   119,
     121,   123,   129,   134,   141,   148,   155,   162,   169,   177,
     185,   193,   195,   197,   199,   202,   203,   206,   208,   211,
     212,   218,   222,   223,   227,   228,   234,   235,   240,   241,
     246,   250,   254,   256,   260,   262,   267,   273,   275,   279,
     283,   285,   287,   289,   294,   299,   302,   305,   308,   311,
     313,   316,   320,   323,   326,   329,   332,   335,   338,   341,
     344,   347,   350,   353,   356,   359,   361,   363,   365,   367,
     369,   371,   373,   375,   377,   379,   380,   385,   389,   390,
     396,   397,   403,   404,   409,   410,   416,   417,   424,   428,
     429,   434,   435,   441,   442,   449,   450,   456,   457,   463,
     467,   472,   476,   480,   481,   487,   488,   495,   501,   508,
     509,   515,   516,   523,   529,   536,   537,   542,   543,   547,
     548,   551,   556,   560,   566,   571,   573,   575,   577,   579,
     581,   583,   586,   589,   592,   594,   598,   602,   606,   610,
     614,   618,   625,   632,   640,   648,   657,   665,   673,   681,
     690,   698,   702,   703,   705,   707,   709,   713,   717,   718,
     723,   727,   733,   738,   742,   743,   748,   752,   754,   757,
     763,   769,   773,   777,   781,   785,   790,   793,   795,   799,
     801,   803,   805,   807,   809,   813,   816,   821,   823,   827,
     829,   833,   835,   837,   841,   843,   847,   850,   852,   854,
     858,   860,   864,   868,   872,   876,   882,   888,   898,   911,
     923,   927,   929,   930,   932,   934,   936,   938,   940,   941,
     943,   944,   946,   948,   951,   953,   956,   959,   963,   971,
     978,   989,   999,  1003,  1005,  1008,  1010,  1013,  1015,  1017,
    1020,  1022,  1026,  1028,  1034,  1038,  1043,  1050,  1058,  1059,
    1061,  1062,  1064,  1065,  1067,  1071,  1075,  1079,  1083,  1085,
    1089,  1094,  1100,  1104,  1108,  1115,  1123,  1129,  1133,  1135,
    1137,  1139,  1141,  1144,  1147,  1150,  1153,  1156,  1159,  1162,
    1165,  1170,  1176,  1180,  1182,  1186,  1188,  1191,  1196,  1200,
    1205,  1211,  1215,  1219,  1221,  1225,  1227,  1231,  1238,  1244,
    1249,  1253,  1256,  1258,  1260,  1262,  1263,  1264,  1271,  1272,
    1277,  1279,  1283,  1288,  1294,  1296,  1298,  1300,  1304,  1306,
    1308,  1312,  1318,  1323,  1328,  1333,  1337,  1340,  1342,  1344,
    1346,  1350,  1353,  1355,  1359,  1362,  1363,  1368,  1372,  1374,
    1377,  1379,  1381,  1383,  1385,  1387,  1389,  1391,  1397,  1405,
    1412,  1414,  1417,  1421,  1425,  1428,  1442,  1446,  1452,  1456,
    1460,  1466,  1477,  1488,  1490,  1492,  1496,  1500,  1502,  1506,
    1510,  1512,  1515,  1518,  1521,  1524,  1527,  1531,  1536,  1543,
    1547,  1551,  1555,  1559,  1563,  1565,  1569,  1573,  1578,  1583,
    1585,  1588,  1593,  1600,  1606,  1610,  1612,  1614,  1616,  1619,
    1622,  1626,  1631,  1636,  1638,  1640,  1642,  1644,  1646,  1648,
    1650,  1652,  1658,  1663,  1667,  1669,  1673,  1680,  1686,  1688,
    1694,  1699,  1703,  1708,  1710,  1714,  1718,  1721,  1725,  1726,
    1730,  1734,  1739,  1743,  1747,  1750,  1756,  1761,  1766,  1769,
    1772,  1775,  1778,  1781,  1785,  1787,  1790,  1794,  1801,  1807,
    1812,  1815,  1817,  1820,  1824,  1828,  1835,  1841,  1844,  1849,
    1853,  1854,  1859,  1865,  1870,  1873,  1877,  1881,  1884,  1886,
    1889,  1893,  1896,  1899,  1902,  1905,  1908,  1912,  1915,  1919,
    1922,  1925,  1928,  1931,  1933,  1935,  1939,  1942,  1945,  1948,
    1951,  1954,  1957,  1959,  1962,  1965,  1970,  1972,  1974,  1975,
    1982,  1986,  1989,  1994,  1997,  2002,  2006,  2011,  2013,  2016,
    2019,  2021,  2025,  2029,  2032,  2038,  2044,  2052,  2060,  2065,
    2071,  2079,  2084,  2091,  2098,  2105,  2109,  2116,  2120,  2122,
    2125,  2129,  2133,  2136,  2139,  2145,  2151,  2161,  2164,  2170,
    2176,  2186,  2192,  2198,  2201,  2203,  2207,  2210,  2212,  2216,
    2219,  2223,  2225,  2228,  2230,  2232,  2234,  2236,  2238,  2242,
    2246,  2250,  2254,  2258,  2262,  2265,  2268,  2271,  2275,  2282,
    2288,  2295,  2297,  2301,  2303,  2307,  2311,  2313,  2318,  2323,
    2325,  2329,  2331,  2337,  2345,  2359,  2385,  2387,  2391,  2395,
    2402,  2408,  2419,  2429,  2435,  2443,  2445,  2447,  2449,  2455,
    2461,  2464,  2466,  2468,  2470,  2472,  2474,  2476,  2478,  2480,
    2482,  2484,  2486,  2488,  2490,  2502,  2512,  2524,  2534,  2548,
    2560,  2572,  2582,  2587,  2599,  2609,  2613,  2627,  2639,  2651,
    2661,  2673,  2683,  2695,  2705,  2717,  2731,  2743,  2751,  2759,
    2769,  2771,  2775,  2777,  2779,  2781,  2783,  2788,  2791,  2795,
    2797,  2799,  2801,  2803,  2805,  2810,  2813,  2816,  2819,  2822,
    2824,  2828,  2830,  2832,  2836,  2843,  2847,  2849,  2853,  2858,
    2863,  2867,  2869,  2871,  2875,  2880,  2884,  2889,  2891,  2895,
    2900,  2905,  2907,  2911,  2914,  2919,  2925,  2927,  2930,  2934,
    2936,  2938,  2940,  2942,  2945,  2949,  2951,  2955,  2960,  2966,
    2968,  2974,  2976,  2978,  2980,  2982,  2984,  2986,  2988,  2991,
    2993,  2995,  2998,  3000,  3002,  3004,  3006,  3009,  3013,  3016,
    3020,  3022,  3024,  3026,  3028,  3031,  3034,  3037,  3040,  3042,
    3044,  3046,  3048,  3050,  3052,  3054,  3056,  3059,  3063,  3067,
    3072,  3075,  3077,  3079,  3081,  3083,  3085,  3087,  3090,  3094,
    3098,  3099,  3103,  3107,  3109,  3113,  3117,  3119,  3121,  3125,
    3127,  3129
};

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
static const short int yyrhs[] =
{
     137,     0,    -1,   138,    -1,    -1,   139,   156,    -1,   138,
     156,    -1,   180,    -1,   141,    -1,   144,    -1,   142,    -1,
     145,    -1,   109,    10,    -1,   453,    -1,     7,    -1,   112,
      23,   143,    24,    10,    -1,   112,     1,    10,    -1,   110,
     146,    10,   147,   148,   111,    -1,   110,   146,    10,   147,
     111,    -1,   110,   146,    10,     1,   111,    -1,   454,    -1,
     127,   150,    10,    -1,   127,     1,    10,    -1,   149,    -1,
     148,   149,    -1,    82,   153,    10,    -1,   151,   153,    10,
      -1,   151,   154,    10,    -1,   152,   153,    10,    -1,   152,
     154,    10,    -1,   453,    -1,   150,   453,    -1,   117,   453,
      -1,   118,   453,    -1,   116,    -1,   116,   150,    -1,   115,
     453,   155,    -1,    -1,    15,   110,    -1,   157,    -1,   310,
      -1,   140,    -1,   450,   160,    10,   163,   161,    -1,   450,
     160,    10,   161,    -1,   450,   160,   164,    10,   163,   161,
      -1,   450,   160,   170,    10,   163,   161,    -1,   450,   160,
     172,    10,   163,   161,    -1,   450,   160,   172,    10,     1,
     161,    -1,   450,   160,   170,    10,     1,   161,    -1,   450,
     160,    16,    17,    10,   163,   161,    -1,   450,   160,   164,
     170,    10,   163,   161,    -1,   450,   160,   164,   172,    10,
     163,   161,    -1,   454,    -1,    52,    -1,    54,    -1,   159,
     158,    -1,    -1,   162,    53,    -1,   179,    -1,   163,   179,
      -1,    -1,    29,    16,   165,   166,    17,    -1,    29,     1,
      17,    -1,    -1,    38,   167,   241,    -1,    -1,   166,    98,
      38,   168,   241,    -1,    -1,   166,    98,   169,   241,    -1,
      -1,    16,   171,   173,    17,    -1,    16,     1,    17,    -1,
      16,   258,    17,    -1,   174,    -1,   173,    98,   174,    -1,
     175,    -1,    11,   175,    16,    17,    -1,    11,   175,    16,
     175,    17,    -1,   177,    -1,    37,   176,    36,    -1,   176,
      98,   177,    -1,   177,    -1,   454,    -1,     8,    -1,   454,
      18,   438,    19,    -1,   454,    18,   434,    19,    -1,   450,
     197,    -1,   450,   200,    -1,   450,   203,    -1,     1,    10,
      -1,   180,    -1,   178,    10,    -1,   178,     1,    10,    -1,
     450,   298,    -1,   450,   184,    -1,   450,   190,    -1,   450,
     378,    -1,   450,   196,    -1,   450,   181,    -1,   450,   182,
      -1,   450,   336,    -1,   450,   272,    -1,   450,   332,    -1,
     450,   279,    -1,   450,   339,    -1,   450,   340,    -1,   213,
      -1,   219,    -1,   212,    -1,   216,    -1,   220,    -1,   217,
      -1,   210,    -1,   211,    -1,   253,    -1,   245,    -1,    -1,
      51,   183,   235,    10,    -1,    51,     1,    10,    -1,    -1,
     103,   244,   185,   235,    10,    -1,    -1,   103,   267,   186,
     235,    10,    -1,    -1,   103,   187,   235,    10,    -1,    -1,
     103,   446,   188,   235,    10,    -1,    -1,   103,   446,   244,
     189,   235,    10,    -1,   103,     1,    10,    -1,    -1,    38,
     191,   235,    10,    -1,    -1,    38,   267,   192,   235,    10,
      -1,    -1,    38,   446,   244,   193,   235,    10,    -1,    -1,
      38,   244,   194,   235,    10,    -1,    -1,    38,   446,   195,
     235,    10,    -1,    38,     1,    10,    -1,    87,   244,   238,
      10,    -1,    87,   238,    10,    -1,    87,     1,    10,    -1,
      -1,    40,   249,   262,   198,   454,    -1,    -1,    40,   209,
     249,   262,   199,   454,    -1,   197,    98,   249,   262,   454,
      -1,   197,    98,   209,   249,   262,   454,    -1,    -1,   101,
     249,   262,   201,   454,    -1,    -1,   101,   209,   249,   262,
     202,   454,    -1,   200,    98,   249,   262,   454,    -1,   200,
      98,   209,   249,   262,   454,    -1,    -1,    39,   208,   204,
     454,    -1,    -1,    39,   205,   454,    -1,    -1,    39,   206,
      -1,   203,    98,    39,   338,    -1,   203,    98,   454,    -1,
     203,    98,    39,   208,   454,    -1,   203,    98,    39,   454,
      -1,    47,    -1,   104,    -1,   209,    -1,   244,    -1,   446,
      -1,    46,    -1,   208,   102,    -1,   208,   244,    -1,   208,
     207,    -1,     3,    -1,    49,   229,    10,    -1,    49,     1,
      10,    -1,   108,   232,    10,    -1,   108,     1,    10,    -1,
     104,   239,    10,    -1,   104,     1,    10,    -1,     3,   214,
     249,   262,   234,    10,    -1,     3,   214,   249,   262,   233,
      10,    -1,     3,   214,   249,   262,   225,   233,    10,    -1,
       3,   214,   249,   262,   225,   234,    10,    -1,     3,   223,
     214,   249,   262,   225,   233,    10,    -1,     3,   223,   214,
     249,   262,   233,    10,    -1,     3,   223,   214,   249,   262,
     234,    10,    -1,     3,   224,   214,   249,   262,   234,    10,
      -1,     3,   224,   214,   249,   262,   225,   234,    10,    -1,
       3,   224,   214,   249,   262,   233,    10,    -1,     3,     1,
      10,    -1,    -1,   215,    -1,    44,    -1,    45,    -1,    48,
     239,    10,    -1,    48,     1,    10,    -1,    -1,   126,   218,
     239,    10,    -1,   126,     1,    10,    -1,    46,   249,   244,
     239,    10,    -1,    46,   249,   239,    10,    -1,    46,     1,
      10,    -1,    -1,    47,   221,   239,    10,    -1,    47,     1,
      10,    -1,   243,    -1,   222,   243,    -1,    16,     4,    98,
       5,    17,    -1,    16,     5,    98,     4,    17,    -1,    16,
       1,    17,    -1,    16,    41,    17,    -1,    16,    42,    17,
      -1,    16,    43,    17,    -1,    29,    16,   226,    17,    -1,
      29,   228,    -1,   228,    -1,   226,    98,   228,    -1,   225,
      -1,   439,    -1,   230,    -1,   231,    -1,   454,    -1,   230,
      98,   454,    -1,   454,   222,    -1,   231,    98,   454,   222,
      -1,   454,    -1,   232,    98,   454,    -1,   240,    -1,   233,
      98,   240,    -1,   229,    -1,   241,    -1,   235,    98,   241,
      -1,   454,    -1,   454,    22,   438,    -1,   454,   222,    -1,
     236,    -1,   242,    -1,   238,    98,   242,    -1,   237,    -1,
     239,    98,   237,    -1,   454,    22,   438,    -1,   453,    22,
     438,    -1,   454,    22,   439,    -1,    18,   433,    15,   433,
      19,    -1,    18,   441,    15,   440,    19,    -1,    63,   248,
     249,   247,   246,    10,   250,   357,    64,    -1,    63,   248,
     249,   247,   246,    16,   252,    17,    10,   255,   357,    64,
      -1,    63,   248,   249,   247,   246,    16,   252,    17,    10,
     357,    64,    -1,    63,     1,    64,    -1,   454,    -1,    -1,
     244,    -1,   104,    -1,    48,    -1,    47,    -1,   126,    -1,
      -1,   100,    -1,    -1,   102,    -1,   251,    -1,   250,   251,
      -1,   268,    -1,   265,    10,    -1,   450,   266,    -1,   252,
      98,   266,    -1,    61,   248,   254,    10,   256,   354,    62,
      -1,    61,   248,   254,    10,   354,    62,    -1,    61,   248,
     254,    16,   258,    17,    10,   255,   354,    62,    -1,    61,
     248,   254,    16,   258,    17,    10,   354,    62,    -1,    61,
       1,    62,    -1,   454,    -1,   255,   268,    -1,   268,    -1,
     256,   257,    -1,   257,    -1,   268,    -1,   259,    10,    -1,
     259,    -1,   258,    98,   259,    -1,   260,    -1,   264,   249,
     261,   262,   454,    -1,   264,   267,   454,    -1,   260,    98,
     267,   454,    -1,   260,    98,   249,   261,   262,   454,    -1,
     260,    98,   264,   249,   261,   262,   454,    -1,    -1,    46,
      -1,    -1,   244,    -1,    -1,     3,    -1,   450,    40,   263,
      -1,   450,    39,   263,    -1,   450,   101,   263,    -1,   264,
      98,   454,    -1,   266,    -1,   265,    98,   266,    -1,   101,
     249,   262,   454,    -1,   101,    46,   249,   262,   454,    -1,
     101,   267,   454,    -1,   266,    98,   454,    -1,   266,    98,
     101,   249,   262,   454,    -1,   266,    98,   101,    46,   249,
     262,   454,    -1,   266,    98,   101,   267,   454,    -1,   101,
       1,    10,    -1,    47,    -1,    48,    -1,   126,    -1,   104,
      -1,   450,   269,    -1,   450,   210,    -1,   450,   212,    -1,
     450,   184,    -1,   450,   190,    -1,   450,   216,    -1,   450,
     217,    -1,   450,   220,    -1,    46,   244,   270,    10,    -1,
      46,   446,   244,   270,    10,    -1,    46,   270,    10,    -1,
     271,    -1,   270,    98,   271,    -1,   454,    -1,   454,   222,
      -1,     6,   225,   274,    10,    -1,     6,   274,    10,    -1,
       6,   223,   274,    10,    -1,     6,   223,   225,   274,    10,
      -1,     6,   273,    10,    -1,     6,     1,    10,    -1,   276,
      -1,   273,    98,   276,    -1,   275,    -1,   274,    98,   275,
      -1,   277,    16,   278,    98,   435,    17,    -1,    16,   278,
      98,   435,    17,    -1,   277,    16,   278,    17,    -1,    16,
     278,    17,    -1,   454,   244,    -1,   454,    -1,   445,    -1,
     280,    -1,    -1,    -1,   454,   281,   285,   284,   282,    10,
      -1,    -1,   454,   284,   283,    10,    -1,   291,    -1,   284,
      98,   291,    -1,    29,    16,   286,    17,    -1,    29,    16,
       1,    17,    10,    -1,   287,    -1,   289,    -1,   288,    -1,
     287,    98,   288,    -1,   438,    -1,   290,    -1,   289,    98,
     290,    -1,    11,   454,    16,   438,    17,    -1,    11,   454,
      16,    17,    -1,   292,    16,   293,    17,    -1,   292,    16,
       1,    17,    -1,   292,    16,    17,    -1,   454,   262,    -1,
     294,    -1,   296,    -1,   295,    -1,   294,    98,   295,    -1,
     450,   438,    -1,   297,    -1,   296,    98,   297,    -1,   450,
     290,    -1,    -1,   106,   299,   300,   107,    -1,   106,     1,
     107,    -1,   302,    -1,   300,   302,    -1,   302,    -1,    10,
      -1,   303,    -1,   304,    -1,   307,    -1,   309,    -1,   180,
      -1,    65,    16,   438,    17,   301,    -1,    65,    16,   438,
      17,   301,    79,   301,    -1,    66,    16,   438,    17,   305,
      80,    -1,   306,    -1,   305,   306,    -1,   435,    15,   301,
      -1,    82,    15,   301,    -1,    82,   301,    -1,    71,    16,
     308,    10,   438,    10,   308,    17,    81,    15,   454,   300,
      84,    -1,   454,    22,   438,    -1,    81,    15,   454,   300,
      84,    -1,    81,   300,    84,    -1,    81,     1,    84,    -1,
      81,    15,   454,     1,    84,    -1,   450,    56,   311,    16,
     312,    17,    10,   315,   320,    55,    -1,   450,    56,   311,
      16,   313,    17,    10,   315,   320,    55,    -1,   454,    -1,
     454,    -1,   312,    98,   454,    -1,   317,    98,   314,    -1,
     318,    -1,   314,    98,   318,    -1,   314,    98,   454,    -1,
     316,    -1,   315,   316,    -1,   317,    10,    -1,   318,    10,
      -1,   319,    10,    -1,   316,    10,    -1,   450,    39,   454,
      -1,   450,    39,    46,   454,    -1,   450,    39,    46,   454,
      22,   438,    -1,   317,    98,   454,    -1,   450,   101,   454,
      -1,   318,    98,   454,    -1,   450,    46,   454,    -1,   319,
      98,   454,    -1,   321,    -1,    58,   322,    59,    -1,    58,
       1,    59,    -1,   324,    58,   322,    59,    -1,   324,    58,
       1,    59,    -1,   323,    -1,   322,   323,    -1,   326,    15,
     330,    10,    -1,   326,    15,   328,    15,   329,    10,    -1,
      57,   454,    22,   325,    10,    -1,    57,     1,    10,    -1,
       8,    -1,   327,    -1,   331,    -1,   326,   327,    -1,   326,
     331,    -1,    16,   331,    17,    -1,    16,   331,   331,    17,
      -1,   327,    16,   331,    17,    -1,   331,    -1,   330,    -1,
      14,    -1,   331,    -1,     8,    -1,    99,    -1,    26,    -1,
      12,    -1,   454,   223,   227,   333,    10,    -1,   454,   223,
     333,    10,    -1,   454,   333,    10,    -1,   334,    -1,   333,
      98,   334,    -1,   335,    16,   278,    98,   435,    17,    -1,
      16,   278,    98,   435,    17,    -1,   292,    -1,    50,   223,
     225,   337,    10,    -1,    50,   225,   337,    10,    -1,    50,
     337,    10,    -1,    50,   223,   337,    10,    -1,   338,    -1,
     337,    98,   338,    -1,   445,    22,   438,    -1,    57,   355,
      -1,    57,     1,    84,    -1,    -1,    60,   341,   355,    -1,
     340,     1,    84,    -1,   445,    22,   360,   438,    -1,   445,
      22,   438,    -1,   445,    22,   360,    -1,   342,     1,    -1,
     445,    23,    22,   360,   438,    -1,   445,    23,    22,   438,
      -1,   445,    23,    22,   360,    -1,   343,     1,    -1,    50,
     349,    -1,    76,   445,    -1,    74,   338,    -1,    75,   445,
      -1,   445,    22,   438,    -1,   357,    -1,   450,    10,    -1,
      81,   354,    84,    -1,    81,    15,   454,   255,   354,    84,
      -1,    81,    15,   454,   348,    84,    -1,    81,   255,   354,
      84,    -1,    81,    84,    -1,   357,    -1,   348,   357,    -1,
     445,    22,   438,    -1,    83,   354,    72,    -1,    83,    15,
     454,   255,   354,    72,    -1,    83,    15,   454,   354,    72,
      -1,    83,    72,    -1,    83,    15,     1,    72,    -1,    83,
       1,    72,    -1,    -1,    81,   352,   354,    84,    -1,    81,
     353,   255,   354,    84,    -1,    81,   353,   354,    84,    -1,
      81,    84,    -1,    81,   353,    84,    -1,    81,     1,    84,
      -1,    15,   454,    -1,   355,    -1,   354,   355,    -1,   450,
     342,    10,    -1,   450,   371,    -1,   450,   369,    -1,   450,
     362,    -1,   450,   364,    -1,   450,   375,    -1,   450,   343,
      10,    -1,   450,   350,    -1,   450,   344,    10,    -1,   450,
     367,    -1,   450,   351,    -1,   450,   376,    -1,   450,   368,
      -1,   355,    -1,    10,    -1,   450,   345,    10,    -1,   450,
     358,    -1,   450,   370,    -1,   450,   374,    -1,   450,   347,
      -1,   450,   362,    -1,   450,   376,    -1,   371,    -1,    29,
       8,    -1,    29,    12,    -1,    29,    16,   439,    17,    -1,
     359,    -1,   363,    -1,    -1,    70,    16,   438,   361,    17,
     363,    -1,    77,   454,    10,    -1,    31,   454,    -1,    31,
      16,   366,    17,    -1,    31,    26,    -1,    31,    16,    26,
      17,    -1,    31,   128,    17,    -1,    14,    24,   454,    10,
      -1,   438,    -1,    95,   438,    -1,    96,   438,    -1,   365,
      -1,   366,    98,   365,    -1,   366,     6,   365,    -1,   360,
     356,    -1,    73,    16,   438,    17,   356,    -1,    65,    16,
     438,    17,   356,    -1,    65,    16,   438,    17,   356,    79,
     356,    -1,    65,    16,   438,    17,     1,    79,   356,    -1,
      65,    16,     1,    17,    -1,    65,    16,   438,    17,   346,
      -1,    65,    16,   438,    17,   346,    79,   346,    -1,    65,
      16,     1,    17,    -1,    66,    16,   438,    17,   372,    80,
      -1,    66,    16,   438,    17,     1,    80,    -1,    68,    16,
     438,    17,   372,    80,    -1,    68,     1,    80,    -1,    67,
      16,   438,    17,   372,    80,    -1,    67,     1,    80,    -1,
     373,    -1,   372,   373,    -1,   435,    15,   356,    -1,    82,
      15,   356,    -1,    82,   356,    -1,    69,   357,    -1,    70,
      16,   438,    17,   357,    -1,    78,    16,   438,    17,   357,
      -1,    71,    16,   349,    10,   438,    10,   349,    17,   357,
      -1,    69,   355,    -1,    70,    16,   438,    17,   355,    -1,
      78,    16,   438,    17,   355,    -1,    71,    16,   349,    10,
     438,    10,   349,    17,   355,    -1,   453,    16,   377,    17,
      10,    -1,   453,    16,     1,    17,    10,    -1,   453,    10,
      -1,   438,    -1,   377,    98,   438,    -1,   377,    98,    -1,
      98,    -1,    85,   379,    86,    -1,    85,    86,    -1,    85,
       1,    86,    -1,   380,    -1,   379,   380,    -1,   196,    -1,
     383,    -1,   401,    -1,   381,    -1,   382,    -1,   113,   387,
      10,    -1,   114,   387,    10,    -1,   114,     1,    10,    -1,
     119,   387,    10,    -1,   120,   387,    10,    -1,   120,     1,
      10,    -1,   384,    10,    -1,   393,    10,    -1,   399,    10,
      -1,   385,    22,   390,    -1,    16,   389,    22,    24,   389,
      17,    -1,    16,   386,   388,   387,    17,    -1,    16,   386,
      26,    24,   387,    17,    -1,   389,    -1,   386,    98,   389,
      -1,   386,    -1,   400,    22,    24,    -1,   400,    26,    24,
      -1,   454,    -1,   454,    18,   434,    19,    -1,   454,    18,
     438,    19,    -1,   391,    -1,    16,   391,    17,    -1,   392,
      -1,    16,   392,    98,   392,    17,    -1,    16,   392,    98,
     392,    98,   392,    17,    -1,    16,   392,    98,   392,    98,
     392,    98,   392,    98,   392,    98,   392,    17,    -1,    16,
     392,    98,   392,    98,   392,    98,   392,    98,   392,    98,
     392,    98,   392,    98,   392,    98,   392,    98,   392,    98,
     392,    98,   392,    17,    -1,   439,    -1,   394,    22,   390,
      -1,   395,    22,   390,    -1,    16,   398,   389,    22,    24,
     396,    -1,    16,   389,    22,    24,   396,    -1,    16,   398,
     386,    26,    24,   387,   447,    15,   397,    17,    -1,    16,
     386,    26,    24,   387,   447,    15,   397,    17,    -1,   389,
     447,    15,   397,    17,    -1,    16,   389,   447,    15,   397,
      17,    17,    -1,   438,    -1,    95,    -1,    96,    -1,    65,
      16,   438,    17,   384,    -1,    65,    16,   438,    17,   393,
      -1,   125,   384,    -1,   447,    -1,   405,    -1,   406,    -1,
     407,    -1,   408,    -1,   409,    -1,   410,    -1,   413,    -1,
     412,    -1,   411,    -1,   404,    -1,   402,    -1,   403,    -1,
     122,    16,   417,    98,   418,    98,   416,    98,   414,    17,
      10,    -1,   122,    16,   417,    98,   418,    98,   416,    17,
      10,    -1,   123,    16,   417,    98,   418,    98,   416,    98,
     414,    17,    10,    -1,   123,    16,   417,    98,   418,    98,
     416,    17,    10,    -1,   124,    16,   419,    98,   419,    98,
     416,    98,   416,    98,   414,    17,    10,    -1,   124,    16,
     419,    98,   419,    98,   416,    98,   416,    17,    10,    -1,
      88,    16,   417,    98,   418,    98,   416,    98,   414,    17,
      10,    -1,    88,    16,   417,    98,   418,    98,   416,    17,
      10,    -1,    88,    16,     1,    17,    -1,    89,    16,   417,
      98,   418,    98,   416,    98,   414,    17,    10,    -1,    89,
      16,   417,    98,   418,    98,   416,    17,    10,    -1,    89,
       1,    10,    -1,    94,    16,   419,    98,   419,    98,   416,
      98,   416,    98,   414,    17,    10,    -1,    94,    16,   419,
      98,   419,    98,   416,    98,   416,    17,    10,    -1,    93,
      16,   417,    98,   418,    98,   416,    98,   414,    17,    10,
      -1,    93,    16,   417,    98,   418,    98,   416,    17,    10,
      -1,   121,    16,   417,    98,   418,    98,   416,    98,   414,
      17,    10,    -1,   121,    16,   417,    98,   418,    98,   416,
      17,    10,    -1,    92,    16,   417,    98,   418,    98,   416,
      98,   414,    17,    10,    -1,    92,    16,   417,    98,   418,
      98,   416,    17,    10,    -1,   105,    16,   419,    98,   419,
      98,   439,    98,   439,    17,    10,    -1,   105,    16,   419,
      98,   419,    98,   439,    98,   439,    98,   414,    17,    10,
      -1,    90,    16,   420,    98,   416,    98,   438,    98,   414,
      17,    10,    -1,    90,    16,   420,    98,   416,    17,    10,
      -1,    91,    16,   420,    98,   416,    17,    10,    -1,    91,
      16,   420,    98,   416,    98,   414,    17,    10,    -1,   415,
      -1,   414,    98,   415,    -1,   438,    -1,   438,    -1,   419,
      -1,   419,    -1,   421,   425,   134,   426,    -1,   421,   425,
      -1,   425,   134,   426,    -1,   425,    -1,   419,    -1,    95,
      -1,    96,    -1,   422,    -1,    97,    18,   424,    19,    -1,
       1,    19,    -1,     8,     8,    -1,     8,    12,    -1,    12,
       8,    -1,   423,    -1,   424,    98,   423,    -1,   389,    -1,
     439,    -1,    37,   435,    36,    -1,    37,   438,    37,   435,
      36,    36,    -1,    37,   429,    36,    -1,   430,    -1,   429,
      98,   430,    -1,   454,    18,   434,    19,    -1,   454,    18,
     438,    19,    -1,   454,   432,   434,    -1,   428,    -1,   454,
      -1,    16,   435,    17,    -1,   449,    16,   435,    17,    -1,
      18,   438,    19,    -1,   432,    18,   438,    19,    -1,   438,
      -1,   438,    15,   440,    -1,   438,    13,    15,   442,    -1,
     438,    14,    15,   442,    -1,   438,    -1,   435,    98,   438,
      -1,   453,   432,    -1,   453,    18,   434,    19,    -1,   453,
     432,    18,   434,    19,    -1,   453,    -1,   453,   431,    -1,
      16,   439,    17,    -1,   427,    -1,   448,    -1,   436,    -1,
       7,    -1,   443,   436,    -1,   443,   449,   436,    -1,   437,
      -1,   438,   444,   437,    -1,   438,   444,   449,   437,    -1,
     438,    99,   438,    15,   437,    -1,   438,    -1,   438,    15,
     438,    15,   439,    -1,   438,    -1,   438,    -1,   438,    -1,
      35,    -1,    20,    -1,    25,    -1,    34,    -1,    34,    20,
      -1,   132,    -1,    21,    -1,    34,    21,    -1,   447,    -1,
     133,    -1,    27,    -1,   447,    -1,    22,    22,    -1,    22,
      22,    22,    -1,    35,    22,    -1,    35,    22,    22,    -1,
     131,    -1,   130,    -1,    24,    -1,    23,    -1,    23,    23,
      -1,    23,    22,    -1,    24,    22,    -1,    24,    24,    -1,
      26,    -1,    28,    -1,    25,    -1,    20,    -1,    21,    -1,
      34,    -1,   132,    -1,   133,    -1,    26,    26,    -1,    23,
      23,    23,    -1,    24,    24,    24,    -1,   454,    18,   434,
      19,    -1,   454,   432,    -1,   428,    -1,   453,    -1,   102,
      -1,    14,    -1,    13,    -1,     8,    -1,   447,     8,    -1,
     128,   451,   129,    -1,   128,     1,   129,    -1,    -1,   128,
     451,   129,    -1,   128,     1,   129,    -1,   452,    -1,   451,
      98,   452,    -1,   454,    22,   438,    -1,   454,    -1,   454,
      -1,   453,    11,   454,    -1,   455,    -1,    12,    -1,    32,
     455,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const unsigned short int yyrline[] =
{
       0,   134,   134,   136,   136,   137,   138,   146,   148,   149,
     150,   153,   166,   167,   170,   171,   177,   178,   179,   182,
     192,   193,   198,   199,   203,   204,   205,   206,   207,   211,
     212,   216,   219,   223,   224,   227,   230,   231,   238,   239,
     242,   246,   247,   248,   250,   251,   252,   253,   254,   255,
     256,   261,   264,   265,   267,   286,   286,   294,   295,   302,
     302,   303,   306,   306,   307,   307,   308,   308,   314,   314,
     315,   319,   323,   324,   327,   328,   329,   332,   333,   336,
     337,   340,   341,   342,   343,   346,   347,   348,   349,   356,
     357,   358,   359,   360,   361,   362,   363,   367,   368,   369,
     370,   371,   372,   373,   374,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   390,   390,   391,   399,   399,
     400,   400,   401,   401,   402,   402,   403,   403,   404,   407,
     407,   408,   408,   409,   409,   410,   410,   411,   411,   412,
     415,   416,   417,   424,   424,   425,   425,   426,   427,   430,
     430,   431,   431,   432,   433,   438,   438,   439,   439,   441,
     441,   443,   444,   445,   446,   454,   455,   459,   460,   461,
     462,   463,   464,   465,   470,   474,   475,   478,   479,   482,
     483,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   501,   502,   506,   507,   510,   511,   513,   513,
     514,   517,   518,   519,   522,   522,   523,   526,   527,   534,
     535,   536,   541,   542,   543,   552,   553,   556,   557,   560,
     563,   570,   571,   574,   575,   579,   580,   584,   585,   588,
     589,   592,   595,   596,   601,   602,   603,   606,   610,   611,
     614,   617,   625,   627,   634,   642,   645,   653,   661,   665,
     668,   672,   685,   686,   687,   688,   689,   690,   694,   695,
     698,   699,   702,   703,   707,   708,   712,   713,   721,   723,
     725,   727,   729,   732,   744,   745,   748,   749,   753,   754,
     758,   759,   764,   768,   773,   777,   782,   787,   795,   796,
     798,   799,   801,   802,   805,   806,   807,   808,   812,   813,
     816,   817,   818,   819,   820,   821,   822,   823,   827,   828,
     829,   830,   837,   838,   839,   840,   841,   842,   843,   844,
     847,   848,   849,   853,   854,   857,   858,   865,   866,   867,
     868,   869,   870,   873,   874,   877,   878,   883,   884,   889,
     890,   893,   894,   902,   909,   912,   915,   912,   916,   916,
     920,   921,   924,   925,   927,   928,   931,   932,   935,   938,
     939,   943,   944,   948,   949,   950,   953,   973,   974,   977,
     978,   981,   985,   986,   989,   999,   999,  1000,  1003,  1004,
    1008,  1009,  1013,  1014,  1015,  1016,  1017,  1020,  1021,  1024,
    1027,  1028,  1031,  1032,  1033,  1037,  1040,  1043,  1044,  1045,
    1046,  1054,  1056,  1061,  1083,  1084,  1086,  1089,  1090,  1091,
    1094,  1095,  1098,  1099,  1100,  1102,  1105,  1106,  1107,  1108,
    1111,  1112,  1114,  1115,  1121,  1125,  1126,  1127,  1128,  1132,
    1133,  1136,  1137,  1142,  1143,  1146,  1150,  1151,  1152,  1153,
    1156,  1157,  1158,  1162,  1164,  1165,  1168,  1171,  1172,  1173,
    1174,  1182,  1183,  1184,  1187,  1188,  1191,  1192,  1195,  1203,
    1204,  1205,  1206,  1209,  1210,  1213,  1216,  1217,  1220,  1220,
    1232,  1236,  1237,  1238,  1239,  1242,  1243,  1244,  1245,  1252,
    1253,  1254,  1255,  1258,  1262,  1263,  1271,  1272,  1273,  1274,
    1275,  1280,  1281,  1284,  1287,  1288,  1289,  1290,  1291,  1292,
    1297,  1296,  1299,  1300,  1301,  1302,  1303,  1306,  1315,  1316,
    1324,  1325,  1326,  1327,  1328,  1329,  1330,  1331,  1332,  1333,
    1334,  1335,  1336,  1339,  1340,  1344,  1345,  1346,  1347,  1348,
    1349,  1350,  1353,  1359,  1360,  1361,  1364,  1365,  1366,  1366,
    1369,  1372,  1373,  1374,  1375,  1376,  1379,  1382,  1383,  1384,
    1387,  1388,  1389,  1392,  1394,  1400,  1401,  1402,  1403,  1406,
    1407,  1408,  1414,  1415,  1416,  1417,  1418,  1419,  1423,  1424,
    1428,  1429,  1430,  1437,  1438,  1439,  1440,  1444,  1445,  1446,
    1447,  1455,  1456,  1457,  1460,  1461,  1462,  1463,  1470,  1471,
    1472,  1476,  1477,  1481,  1482,  1483,  1484,  1485,  1489,  1490,
    1491,  1495,  1496,  1497,  1504,  1505,  1506,  1510,  1515,  1516,
    1517,  1520,  1521,  1524,  1527,  1528,  1538,  1539,  1540,  1544,
    1545,  1549,  1550,  1551,  1552,  1553,  1561,  1564,  1565,  1569,
    1570,  1574,  1576,  1582,  1583,  1587,  1589,  1590,  1594,  1595,
    1596,  1600,  1609,  1610,  1611,  1612,  1613,  1614,  1615,  1616,
    1617,  1618,  1619,  1620,  1624,  1625,  1628,  1629,  1633,  1634,
    1638,  1639,  1640,  1643,  1644,  1645,  1649,  1650,  1653,  1654,
    1656,  1657,  1661,  1662,  1665,  1666,  1669,  1670,  1674,  1675,
    1678,  1679,  1682,  1690,  1692,  1695,  1698,  1699,  1700,  1701,
    1704,  1708,  1709,  1710,  1713,  1714,  1717,  1718,  1719,  1722,
    1723,  1726,  1730,  1738,  1739,  1744,  1746,  1747,  1750,  1751,
    1752,  1753,  1754,  1763,  1764,  1772,  1773,  1778,  1782,  1783,
    1784,  1787,  1788,  1796,  1797,  1798,  1799,  1800,  1801,  1802,
    1804,  1808,  1809,  1810,  1811,  1814,  1815,  1816,  1817,  1820,
    1821,  1824,  1826,  1828,  1835,  1836,  1837,  1838,  1839,  1840,
    1841,  1842,  1843,  1844,  1848,  1849,  1851,  1852,  1853,  1854,
    1855,  1856,  1857,  1858,  1859,  1860,  1861,  1862,  1863,  1864,
    1865,  1866,  1867,  1868,  1869,  1870,  1871,  1872,  1873,  1881,
    1882,  1883,  1884,  1890,  1893,  1894,  1898,  1899,  1910,  1911,
    1914,  1915,  1916,  1919,  1920,  1923,  1924,  1927,  1928,  1932,
    1935,  1940
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "NET_TOK", "STR0_TOK", "STR1_TOK",
  "GATE_TOK", "STRING_TOK", "DIGIT_TOK", "UNDERSCORE_TOK", "SEM_TOK",
  "DOT_TOK", "LETTER_TOK", "PLUS_TOK", "MINUS_TOK", "COLON_TOK",
  "LBRACE_TOK", "RBRACE_TOK", "LBRACKET_TOK", "RBRACKET_TOK", "AND_TOK",
  "OR_TOK", "EQU_TOK", "GT_TOK", "LT_TOK", "NOT_TOK", "MULT_TOK",
  "PERCENTAL_TOK", "ENV_TOK", "PARA_TOK", "CHAR_TOK", "AT_TOK",
  "DOLLAR_TOK", "BASE_TOK", "SN_TOK", "EXCLAMATION_TOK", "RRAM_TOK",
  "LRAM_TOK", "PARAMETER_TOK", "OUTPUT_TOK", "INOUT_TOK", "SMALL_TOK",
  "MEDIUM_TOK", "LARGE_TOK", "VEC_TOK", "SCALAR_TOK", "REG_TOK",
  "TIME_TOK", "REAL_TOK", "EVENT_TOK", "ASSIGN_TOK", "DEFPARAM_TOK",
  "MODUL_TOK", "ENDMODUL_TOK", "MACRO_MODUL_TOK", "ENDPRIMITIVE_TOK",
  "PRIMITIVE_TOK", "INITIAL_TOK", "TABLE_TOK", "ENDTABLE_TOK",
  "ALWAYS_TOK", "TASK_TOK", "ENDTASK_TOK", "FUNC_TOK", "ENDFUNC_TOK",
  "IF_TOK", "CASE_TOK", "CASEX_TOK", "CASEZ_TOK", "FOREVER_TOK",
  "REPEAT_TOK", "FOR_TOK", "JOIN_TOK", "WAIT_TOK", "FORCE_TOK",
  "RELEASE_TOK", "DEASSIGN_TOK", "DISABLE_TOK", "WHILE_TOK", "ELSE_TOK",
  "ENDCASE_TOK", "BEGIN_TOK", "DEFAULT_TOK", "FORK_TOK", "END_TOK",
  "SPECIFY_TOK", "ENDSPECIFY_TOK", "SPECPARAM_TOK", "DSETUP_TOK",
  "DHOLD_TOK", "DWIDTH_TOK", "DPERIOD_TOK", "DSKEW_TOK", "DRECOVERY_TOK",
  "DSETUPHOLD_TOK", "POSEDGE_TOK", "NEGEDGE_TOK", "EDGE_TOK", "COMMA_TOK",
  "QUESTION_TOK", "AUTO_TOK", "INPUT_TOK", "SIGNED_TOK", "LOCALPARAM_TOK",
  "INTEGER_TOK", "NOCHANGE_TOK", "GENERATE_TOK", "ENDGENERATE_TOK",
  "GENVAR_TOK", "LIBRARY_TOK", "CONFIG_TOK", "ENDCONFIG_TOK",
  "INCLUDE_TOK", "PULSEON_DETECT_TOK", "PULSEONE_EVENT_TOK", "USE_TOK",
  "LIBLIST_TOK", "INSTANCE_TOK", "CELL_TOK", "SHOWCANCEL_TOK",
  "NOSHOWCANCEL_TOK", "REMOVAL_TOK", "FULLSKEW_TOK", "TIMESKEW_TOK",
  "RECREM_TOK", "IFNONE_TOK", "REALTIME_TOK", "DESIGN_TOK", "ATL_TOK",
  "ATR_TOK", "OOR_TOK", "AAND_TOK", "SNNOT_TOK", "NOTSN_TOK", "AAAND_TOK",
  "DEFINE_TOK", "$accept", "file", "lines", "$@1", "library_text",
  "library_descriptions", "library_declaration", "file_path_spec",
  "include_statement", "config_declaration", "identifier_conf",
  "design_statement", "config_rule_statement_list",
  "config_rule_statement", "aidentifier_list", "inst_clause",
  "cell_clause", "liblist_clause", "use_clause", "config", "description",
  "module_declaration", "name_of_module", "module_type", "module_keyword",
  "end_mod", "$@2", "module_option", "module_parameter_port_list", "$@3",
  "parameter_declaration_list", "$@4", "$@5", "$@6", "list_of_ports",
  "$@7", "list_of_port_declarations", "port_list", "port",
  "port_expression", "port_reference_list", "port_reference",
  "port_declaration", "module_item", "module_or_generate_item",
  "module_or_generate_item_declaration", "parameter_override", "$@8",
  "local_parameter_declaration", "$@9", "$@10", "$@11", "$@12", "$@13",
  "parameter_declaration", "$@14", "$@15", "$@16", "$@17", "$@18",
  "specparam_declaration", "inout_declaration", "$@19", "$@20",
  "input_declaration", "$@21", "$@22", "output_declaration", "$@23",
  "$@24", "$@25", "output_var_type", "s_type", "net_type",
  "event_declaration", "genvar_declaration", "integer_declaration",
  "net_declaration", "xscalared", "scalared", "real_declaration",
  "realtime_declaration", "$@26", "reg_declaration", "time_declaration",
  "$@27", "dimension_list", "drive_strength", "charge_strength", "delay3",
  "delay_value_list", "delay2", "delay_value", "list_of_event_identifiers",
  "list_of_event_lists", "dim_list", "list_of_genvar_identifiers",
  "list_of_net_decl_assignments", "list_of_net_identifiers",
  "list_of_param_assignments", "real_type", "variable_type",
  "list_of_specparam_assignments", "list_of_variable_identifiers",
  "net_decl_assignment", "param_assignment", "specparam_assignment",
  "dimension", "range", "function_declaration", "name_of_function",
  "range_or_type", "automatic", "xsigned",
  "function_item_declaration_list", "function_item_declaration",
  "function_port_list", "task_declaration", "name_of_task",
  "block_item_declaration_list", "task_item_declaration_list",
  "task_item_declaration", "task_port_list", "task_port_item",
  "tf_port_declaration", "xreg", "xrange", "xnettype", "tf_port_dir",
  "tf_input_declaration_list", "tf_input_declaration", "task_port_type",
  "block_item_declaration", "block_reg_declaration",
  "list_of_block_variable_identifiers", "block_variable_type",
  "gate_instantiation", "pull_gate_instance_list",
  "cmos_switch_instance_list", "cmos_switch_instance",
  "pull_gate_instance", "name_of_gate_instance", "output_terminal",
  "module_instantiation", "module_identifier", "$@28", "$@29", "$@30",
  "module_instance_list", "parameter_value_assignment",
  "list_of_parameter_assignments", "ordered_parameter_assignment_list",
  "ordered_parameter_assignment", "named_parameter_assignment_list",
  "named_parameter_assignment", "module_instance", "identifier11",
  "list_of_port_connections", "ordered_port_connection_list",
  "ordered_port_connection", "named_port_connection_list",
  "named_port_connection", "generated_instantiation", "$@31",
  "generate_item_list", "generate_item_or_null", "generate_item",
  "generate_conditional_statement", "generate_case_statement",
  "genvar_module_case_item_list", "genvar_case_item",
  "generate_loop_statement", "genvar_assignment", "generate_block",
  "udp_declaration", "name_of_udp", "udp_port_list",
  "udp_declaration_port_list", "udp_input_declaration_list",
  "udp_port_declaration_list", "udp_port_declaration",
  "udp_output_declaration", "udp_input_declaration", "udp_reg_declaration",
  "udp_body", "combinational_body", "combinational_entry_list",
  "combinational_entry", "udp_initial_statement", "init_val",
  "edge_input_list", "edge_indicator", "current_state", "next_state",
  "output_symbol", "level_symbol", "udp_instantiation",
  "udp_instance_list", "udp_instance", "name_of_instance",
  "continuous_assign", "list_of_net_assignments", "net_assignment",
  "initial_construct", "always_construct", "$@32", "blocking_assignment",
  "nonblocking_assignment", "procedural_continuous_assignments",
  "function_blocking_assignment", "function_statement_or_null",
  "function_seq_block", "function_statement_list", "variable_assignment",
  "par_block", "seq_block", "$@33", "always_label", "statement_list",
  "statement", "statement_or_null", "function_statement",
  "function_case_statement", "delay_control", "delay_or_event_control",
  "$@34", "disable_statement", "event_control", "event_trigger",
  "event_expression", "event_expression_list",
  "procedural_timing_control_statement", "wait_statement",
  "conditional_statement", "function_conditional_statement",
  "case_statement", "case_item_list", "case_item",
  "function_loop_statement", "loop_statement", "system_task_enable",
  "expression_list_null", "specify_block", "specify_item_list",
  "specify_item", "pulsestyle_declaration", "showcancelled_declaration",
  "path_declaration", "simple_path_declaration",
  "parallel_path_description", "list_of_path_inputs",
  "list_of_path_outputs", "connection",
  "specify_input_terminal_descriptor", "path_delay_value",
  "list_of_path_delay_expressions", "path_delay_expression",
  "edge_sensitive_path_declaration",
  "parallel_edge_sensitive_path_description",
  "full_edge_sensitive_path_description", "example",
  "data_source_expression", "edge_identifier",
  "state_dependent_path_declaration", "polarity_operator",
  "system_timing_check", "fullskew_timing_check",
  "timingskew_timing_check", "recrem_timing_check", "setup_timing_check",
  "hold_timing_check", "setuphold_timing_check", "recovery_timing_check",
  "removal_timing_check", "skew_timing_check", "nochange_timing_check",
  "width_timing_check", "period_timing_check", "notify_register_list",
  "notify_register", "timing_check_limit", "data_event", "reference_event",
  "timing_check_event", "controlled_timing_check_event",
  "timing_check_event_control", "edge_control_specifier",
  "edge_descriptor", "edge_descriptor_list", "specify_terminal_descriptor",
  "timing_check_condition", "concatenation", "net_concatenation",
  "net_concatenation_value_list", "net_concatenation_value",
  "function_call", "expression_bracket_list",
  "dimension_constant_expression", "range_expression", "expression_list",
  "primary", "unprim", "expression", "mintypemax_expression",
  "lsb_constant_expression", "msb_constant_expression",
  "width_constant_expression", "unary_operator", "binary_operator",
  "net_lvalue", "signed", "pol_op", "number", "attribute_instance11",
  "attribute_instance", "attr_spec_list", "attr_spec", "simple_identifier",
  "identifier", "ident", 0
};
#endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const unsigned short int yyr1[] =
{
       0,   136,   137,   139,   138,   138,   138,   140,   141,   141,
     141,   142,   143,   143,   144,   144,   145,   145,   145,   146,
     147,   147,   148,   148,   149,   149,   149,   149,   149,   150,
     150,   151,   152,   153,   153,   154,   155,   155,   156,   156,
     156,   157,   157,   157,   157,   157,   157,   157,   157,   157,
     157,   158,   159,   159,   160,   162,   161,   163,   163,   165,
     164,   164,   167,   166,   168,   166,   169,   166,   171,   170,
     170,   172,   173,   173,   174,   174,   174,   175,   175,   176,
     176,   177,   177,   177,   177,   178,   178,   178,   178,   179,
     179,   179,   179,   179,   179,   179,   179,   180,   180,   180,
     180,   180,   180,   180,   180,   181,   181,   181,   181,   181,
     181,   181,   181,   181,   181,   183,   182,   182,   185,   184,
     186,   184,   187,   184,   188,   184,   189,   184,   184,   191,
     190,   192,   190,   193,   190,   194,   190,   195,   190,   190,
     196,   196,   196,   198,   197,   199,   197,   197,   197,   201,
     200,   202,   200,   200,   200,   204,   203,   205,   203,   206,
     203,   203,   203,   203,   203,   207,   207,   208,   208,   208,
     208,   208,   208,   208,   209,   210,   210,   211,   211,   212,
     212,   213,   213,   213,   213,   213,   213,   213,   213,   213,
     213,   213,   214,   214,   215,   215,   216,   216,   218,   217,
     217,   219,   219,   219,   221,   220,   220,   222,   222,   223,
     223,   223,   224,   224,   224,   225,   225,   226,   226,   227,
     228,   229,   229,   230,   230,   231,   231,   232,   232,   233,
     233,   234,   235,   235,   236,   236,   236,   237,   238,   238,
     239,   239,   240,   241,   242,   243,   244,   245,   245,   245,
     245,   246,   247,   247,   247,   247,   247,   247,   248,   248,
     249,   249,   250,   250,   251,   251,   252,   252,   253,   253,
     253,   253,   253,   254,   255,   255,   256,   256,   257,   257,
     258,   258,   259,   260,   260,   260,   260,   260,   261,   261,
     262,   262,   263,   263,   264,   264,   264,   264,   265,   265,
     266,   266,   266,   266,   266,   266,   266,   266,   267,   267,
     267,   267,   268,   268,   268,   268,   268,   268,   268,   268,
     269,   269,   269,   270,   270,   271,   271,   272,   272,   272,
     272,   272,   272,   273,   273,   274,   274,   275,   275,   276,
     276,   277,   277,   278,   279,   281,   282,   280,   283,   280,
     284,   284,   285,   285,   286,   286,   287,   287,   288,   289,
     289,   290,   290,   291,   291,   291,   292,   293,   293,   294,
     294,   295,   296,   296,   297,   299,   298,   298,   300,   300,
     301,   301,   302,   302,   302,   302,   302,   303,   303,   304,
     305,   305,   306,   306,   306,   307,   308,   309,   309,   309,
     309,   310,   310,   311,   312,   312,   313,   314,   314,   314,
     315,   315,   316,   316,   316,   316,   317,   317,   317,   317,
     318,   318,   319,   319,   320,   321,   321,   321,   321,   322,
     322,   323,   323,   324,   324,   325,   326,   326,   326,   326,
     327,   327,   327,   328,   329,   329,   330,   331,   331,   331,
     331,   332,   332,   332,   333,   333,   334,   334,   335,   336,
     336,   336,   336,   337,   337,   338,   339,   339,   341,   340,
     340,   342,   342,   342,   342,   343,   343,   343,   343,   344,
     344,   344,   344,   345,   346,   346,   347,   347,   347,   347,
     347,   348,   348,   349,   350,   350,   350,   350,   350,   350,
     352,   351,   351,   351,   351,   351,   351,   353,   354,   354,
     355,   355,   355,   355,   355,   355,   355,   355,   355,   355,
     355,   355,   355,   356,   356,   357,   357,   357,   357,   357,
     357,   357,   358,   359,   359,   359,   360,   360,   361,   360,
     362,   363,   363,   363,   363,   363,   364,   365,   365,   365,
     366,   366,   366,   367,   368,   369,   369,   369,   369,   370,
     370,   370,   371,   371,   371,   371,   371,   371,   372,   372,
     373,   373,   373,   374,   374,   374,   374,   375,   375,   375,
     375,   376,   376,   376,   377,   377,   377,   377,   378,   378,
     378,   379,   379,   380,   380,   380,   380,   380,   381,   381,
     381,   382,   382,   382,   383,   383,   383,   384,   385,   385,
     385,   386,   386,   387,   388,   388,   389,   389,   389,   390,
     390,   391,   391,   391,   391,   391,   392,   393,   393,   394,
     394,   395,   395,   396,   396,   397,   398,   398,   399,   399,
     399,   400,   401,   401,   401,   401,   401,   401,   401,   401,
     401,   401,   401,   401,   402,   402,   403,   403,   404,   404,
     405,   405,   405,   406,   406,   406,   407,   407,   408,   408,
     409,   409,   410,   410,   411,   411,   412,   412,   413,   413,
     414,   414,   415,   416,   417,   418,   419,   419,   419,   419,
     420,   421,   421,   421,   422,   422,   423,   423,   423,   424,
     424,   425,   426,   427,   427,   428,   429,   429,   430,   430,
     430,   430,   430,   431,   431,   432,   432,   433,   434,   434,
     434,   435,   435,   436,   436,   436,   436,   436,   436,   436,
     436,   437,   437,   437,   437,   438,   438,   438,   438,   439,
     439,   440,   441,   442,   443,   443,   443,   443,   443,   443,
     443,   443,   443,   443,   444,   444,   444,   444,   444,   444,
     444,   444,   444,   444,   444,   444,   444,   444,   444,   444,
     444,   444,   444,   444,   444,   444,   444,   444,   444,   445,
     445,   445,   445,   446,   447,   447,   448,   448,   449,   449,
     450,   450,   450,   451,   451,   452,   452,   453,   453,   454,
     455,   455
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const unsigned char yyr2[] =
{
       0,     2,     1,     0,     2,     2,     1,     1,     1,     1,
       1,     2,     1,     1,     5,     3,     6,     5,     5,     1,
       3,     3,     1,     2,     3,     3,     3,     3,     3,     1,
       2,     2,     2,     1,     2,     3,     0,     2,     1,     1,
       1,     5,     4,     6,     6,     6,     6,     6,     7,     7,
       7,     1,     1,     1,     2,     0,     2,     1,     2,     0,
       5,     3,     0,     3,     0,     5,     0,     4,     0,     4,
       3,     3,     1,     3,     1,     4,     5,     1,     3,     3,
       1,     1,     1,     4,     4,     2,     2,     2,     2,     1,
       2,     3,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     0,     4,     3,     0,     5,
       0,     5,     0,     4,     0,     5,     0,     6,     3,     0,
       4,     0,     5,     0,     6,     0,     5,     0,     5,     3,
       4,     3,     3,     0,     5,     0,     6,     5,     6,     0,
       5,     0,     6,     5,     6,     0,     4,     0,     3,     0,
       2,     4,     3,     5,     4,     1,     1,     1,     1,     1,
       1,     2,     2,     2,     1,     3,     3,     3,     3,     3,
       3,     6,     6,     7,     7,     8,     7,     7,     7,     8,
       7,     3,     0,     1,     1,     1,     3,     3,     0,     4,
       3,     5,     4,     3,     0,     4,     3,     1,     2,     5,
       5,     3,     3,     3,     3,     4,     2,     1,     3,     1,
       1,     1,     1,     1,     3,     2,     4,     1,     3,     1,
       3,     1,     1,     3,     1,     3,     2,     1,     1,     3,
       1,     3,     3,     3,     3,     5,     5,     9,    12,    11,
       3,     1,     0,     1,     1,     1,     1,     1,     0,     1,
       0,     1,     1,     2,     1,     2,     2,     3,     7,     6,
      10,     9,     3,     1,     2,     1,     2,     1,     1,     2,
       1,     3,     1,     5,     3,     4,     6,     7,     0,     1,
       0,     1,     0,     1,     3,     3,     3,     3,     1,     3,
       4,     5,     3,     3,     6,     7,     5,     3,     1,     1,
       1,     1,     2,     2,     2,     2,     2,     2,     2,     2,
       4,     5,     3,     1,     3,     1,     2,     4,     3,     4,
       5,     3,     3,     1,     3,     1,     3,     6,     5,     4,
       3,     2,     1,     1,     1,     0,     0,     6,     0,     4,
       1,     3,     4,     5,     1,     1,     1,     3,     1,     1,
       3,     5,     4,     4,     4,     3,     2,     1,     1,     1,
       3,     2,     1,     3,     2,     0,     4,     3,     1,     2,
       1,     1,     1,     1,     1,     1,     1,     5,     7,     6,
       1,     2,     3,     3,     2,    13,     3,     5,     3,     3,
       5,    10,    10,     1,     1,     3,     3,     1,     3,     3,
       1,     2,     2,     2,     2,     2,     3,     4,     6,     3,
       3,     3,     3,     3,     1,     3,     3,     4,     4,     1,
       2,     4,     6,     5,     3,     1,     1,     1,     2,     2,
       3,     4,     4,     1,     1,     1,     1,     1,     1,     1,
       1,     5,     4,     3,     1,     3,     6,     5,     1,     5,
       4,     3,     4,     1,     3,     3,     2,     3,     0,     3,
       3,     4,     3,     3,     2,     5,     4,     4,     2,     2,
       2,     2,     2,     3,     1,     2,     3,     6,     5,     4,
       2,     1,     2,     3,     3,     6,     5,     2,     4,     3,
       0,     4,     5,     4,     2,     3,     3,     2,     1,     2,
       3,     2,     2,     2,     2,     2,     3,     2,     3,     2,
       2,     2,     2,     1,     1,     3,     2,     2,     2,     2,
       2,     2,     1,     2,     2,     4,     1,     1,     0,     6,
       3,     2,     4,     2,     4,     3,     4,     1,     2,     2,
       1,     3,     3,     2,     5,     5,     7,     7,     4,     5,
       7,     4,     6,     6,     6,     3,     6,     3,     1,     2,
       3,     3,     2,     2,     5,     5,     9,     2,     5,     5,
       9,     5,     5,     2,     1,     3,     2,     1,     3,     2,
       3,     1,     2,     1,     1,     1,     1,     1,     3,     3,
       3,     3,     3,     3,     2,     2,     2,     3,     6,     5,
       6,     1,     3,     1,     3,     3,     1,     4,     4,     1,
       3,     1,     5,     7,    13,    25,     1,     3,     3,     6,
       5,    10,     9,     5,     7,     1,     1,     1,     5,     5,
       2,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,    11,     9,    11,     9,    13,    11,
      11,     9,     4,    11,     9,     3,    13,    11,    11,     9,
      11,     9,    11,     9,    11,    13,    11,     7,     7,     9,
       1,     3,     1,     1,     1,     1,     4,     2,     3,     1,
       1,     1,     1,     1,     4,     2,     2,     2,     2,     1,
       3,     1,     1,     3,     6,     3,     1,     3,     4,     4,
       3,     1,     1,     3,     4,     3,     4,     1,     3,     4,
       4,     1,     3,     2,     4,     5,     1,     2,     3,     1,
       1,     1,     1,     2,     3,     1,     3,     4,     5,     1,
       5,     1,     1,     1,     1,     1,     1,     1,     2,     1,
       1,     2,     1,     1,     1,     1,     2,     3,     2,     3,
       1,     1,     1,     1,     2,     2,     2,     2,     1,     1,
       1,     1,     1,     1,     1,     1,     2,     3,     3,     4,
       2,     1,     1,     1,     1,     1,     1,     2,     3,     3,
       0,     3,     3,     1,     3,     3,     1,     1,     3,     1,
       1,     2
};

/* YYDPREC[RULE-NUM] -- Dynamic precedence of rule #RULE-NUM (0 if none).  */
static const unsigned char yydprec[] =
{
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0
};

/* YYMERGER[RULE-NUM] -- Index of merging function for rule #RULE-NUM.  */
static const unsigned char yymerger[] =
{
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0
};

/* YYDEFACT[S] -- default rule to reduce with in state S when YYTABLE
   doesn't specify something else to do.  Zero means the default is an
   error.  */
static const unsigned short int yydefact[] =
{
     790,     0,     0,   790,   790,     6,     0,     0,   800,     0,
       0,   793,   796,   799,     1,     0,     0,     0,    40,     7,
       9,     8,    10,     5,    38,    39,     0,     4,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   468,     0,     0,
       0,     0,     0,    97,    98,   111,   112,   107,   105,   108,
     110,   106,   109,   114,   113,   100,   102,   344,   101,    99,
     103,     0,   345,   792,   801,     0,   791,     0,    11,     0,
      19,     0,     0,    52,    53,     0,     0,     0,     0,     0,
     194,   195,   260,   193,   192,   192,     0,     0,     0,     0,
       0,     0,     0,   335,   333,     0,   342,     0,   261,     0,
       0,     0,     0,   237,   240,     0,   234,     0,     0,   221,
     222,   223,     0,     0,     0,     0,     0,   463,   781,     0,
     782,   797,     0,     0,     0,   466,     0,   790,     0,   259,
       0,     0,   260,     0,     0,     0,     0,   227,     0,     0,
       0,     0,     0,     0,   348,   350,     0,     0,   454,     0,
     290,   794,   732,   786,   785,   784,     0,   745,   750,   746,
     747,   744,     0,   749,   753,   729,   731,   735,   795,     0,
     752,   730,   726,   797,     0,    15,    13,     0,    12,     0,
     403,    54,    51,     0,     0,     0,     0,     0,     0,   191,
       0,     0,     0,     0,     0,     0,   290,   260,   260,   332,
       0,   343,     0,   216,   739,   220,     0,     0,     0,     0,
       0,   331,     0,   328,     0,     0,     0,   341,   203,     0,
       0,   206,     0,   197,   196,     0,     0,     0,   236,   207,
     176,   175,     0,     0,   225,   711,     0,   706,   712,     0,
       0,     0,   461,     0,     0,     0,     0,   780,   117,     0,
     232,     0,   467,     0,     0,     0,     0,     0,     0,     0,
       0,   790,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   517,   520,   536,   790,   513,
     537,   514,   519,   522,   512,   511,   515,   521,     0,   782,
     469,   272,     0,   273,   250,   252,   180,   179,   178,   177,
       0,   200,     0,   470,     0,     0,   219,     0,   458,     0,
       0,     0,     0,     0,     0,   453,     0,     0,   291,   366,
       0,   748,   751,     0,   721,   771,   772,     0,   763,   762,
     770,   768,   754,   769,   773,     0,     0,   761,   760,   774,
     775,     0,   755,     0,   733,     0,     0,   787,     0,     0,
     727,   723,     0,     0,     0,     0,     0,   790,     0,    42,
       0,     0,     0,    57,    89,     0,     0,     0,     0,     0,
     280,   282,   260,     0,     0,    59,     0,     0,     0,     0,
       0,     0,   211,     0,     0,   212,   213,   214,     0,   290,
     290,   340,     0,     0,   217,   220,     0,     0,     0,   329,
       0,   327,     0,   334,     0,   336,     0,   742,     0,   202,
       0,   205,   241,     0,   717,   235,   208,   224,     0,   705,
       0,     0,     0,     0,   462,   460,   464,   465,   798,     0,
       0,     0,   116,     0,     0,     0,   533,   534,     0,     0,
     543,     0,   541,   479,     0,     0,     0,     0,     0,     0,
       0,   577,     0,     0,     0,   481,   482,   480,     0,     0,
       0,     0,   504,   790,   790,     0,     0,   497,   790,   508,
     474,   510,   478,   516,   518,   524,   523,   553,     0,     0,
     583,     0,   790,   790,   256,   255,   254,   257,   253,     0,
     228,   199,     0,     0,   452,     0,   346,     0,   351,   349,
       0,   365,     0,   367,   369,   368,   372,     0,   455,     0,
     728,   703,     0,     0,   756,   765,   764,   766,   767,   776,
     758,     0,   736,     0,     0,     0,   734,     0,   721,     0,
       0,     0,    18,     0,     0,    29,     0,    17,     0,     0,
       0,    22,     0,     0,    14,     0,     0,     0,     0,   404,
      88,    56,    41,    58,     0,    90,     0,   159,   260,     0,
       0,   260,     0,     0,    93,    94,    96,    85,    86,    87,
      92,    95,    70,     0,    82,     0,     0,     0,    72,    74,
      77,    81,    71,   790,   260,   308,   309,     0,   311,   310,
     288,     0,   292,   292,   292,    61,     0,     0,     0,     0,
      55,     0,    55,     0,     0,     0,     0,   231,     0,     0,
     229,   223,     0,     0,     0,   215,     0,     0,   330,     0,
       0,     0,   339,     0,     0,   201,     0,   226,   707,     0,
       0,   710,     0,   459,   779,   785,   784,     0,   715,     0,
     233,   243,     0,     0,     0,     0,     0,   550,     0,   547,
     545,     0,     0,     0,     0,   567,     0,   565,     0,     0,
       0,     0,   540,     0,   506,   507,   790,   505,   790,   275,
     790,     0,   499,     0,   790,   494,   509,     0,   473,   472,
       0,     0,   587,     0,   584,   790,   277,     0,   278,   790,
       0,     0,     0,   251,     0,   451,     0,     0,     0,   354,
     356,   355,   359,   358,     0,   364,   363,   790,   790,   374,
     371,     0,   722,     0,   757,   777,   778,   759,     0,   737,
     789,   788,   713,   724,     0,     0,     0,    21,    20,    30,
      33,     0,    31,    32,    16,    23,     0,     0,     0,     0,
       0,     0,     0,     0,   790,     0,    91,     0,   783,     0,
     135,   131,   137,   174,   170,     0,   160,   155,   167,   168,
     169,   260,   290,     0,     0,     0,   589,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   593,     0,   591,   596,   597,   594,
       0,     0,     0,     0,     0,     0,   595,   652,   653,   651,
     642,   643,   644,   645,   646,   647,   650,   649,   648,     0,
       0,   238,     0,     0,   260,   290,     0,     0,   118,   120,
     124,     0,   790,   260,   260,     0,     0,     0,     0,    80,
      69,     0,     0,   281,   288,   260,     0,   297,   289,   290,
     284,   293,   295,   294,   296,    62,     0,    43,     0,     0,
      47,    44,    46,    45,   209,   210,     0,     0,   182,     0,
     181,     0,     0,     0,     0,     0,     0,     0,   338,   218,
       0,     0,     0,   741,     0,     0,   708,   715,     0,     0,
     718,   716,   546,   535,   544,   548,   549,     0,   542,     0,
     493,   558,     0,     0,     0,     0,   790,     0,     0,   790,
     790,   501,   274,   790,   503,     0,   315,   316,   313,   314,
     317,   318,   319,   312,   498,   790,   790,     0,   471,   477,
     476,     0,     0,   586,   276,   790,   279,   269,     0,   790,
     790,   457,     0,     0,   352,     0,     0,   347,   370,     0,
     373,     0,     0,     0,   738,   725,   714,    34,    24,    36,
      25,    26,    27,    28,   790,   405,   790,   406,   407,     0,
     419,     0,   416,   139,     0,     0,     0,     0,   133,   158,
     165,   171,   166,     0,   173,   172,   290,   143,   590,   636,
     637,     0,   611,     0,   616,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   613,     0,   611,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   640,   588,
     592,   604,     0,   605,     0,     0,   606,   142,   141,     0,
       0,     0,   290,   149,   128,     0,     0,     0,     0,   126,
     377,     0,     0,     0,     0,   386,   790,   378,   382,   383,
     384,   385,   260,   290,   260,   290,     0,   162,    48,     0,
      78,     0,    73,     0,     0,   290,   288,   285,     0,     0,
      60,    66,    49,    50,   183,   184,   230,     0,   242,     0,
     186,   187,     0,   190,   188,   740,   337,   246,   245,   743,
     719,   720,   552,   551,     0,   555,     0,   790,     0,   568,
       0,     0,     0,   578,     0,     0,   554,   579,   502,     0,
       0,   323,     0,   325,   790,   496,   538,   475,   582,   581,
     585,   268,   790,     0,   790,   262,     0,   298,   264,     0,
       0,     0,   353,     0,   357,   360,   456,   704,     0,    35,
     790,   410,     0,     0,     0,     0,   790,   790,     0,     0,
     417,   130,     0,     0,     0,     0,   156,   145,     0,     0,
       0,     0,     0,   641,     0,     0,   611,     0,     0,     0,
     691,   692,     0,   701,     0,   684,     0,   693,   689,   665,
       0,     0,   690,     0,     0,     0,     0,     0,     0,   598,
     600,   599,   601,   603,   602,     0,     0,     0,     0,     0,
     611,     0,   607,   619,   621,   626,   627,   628,   239,   140,
     244,   151,     0,   123,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   790,   376,   379,   290,     0,   290,     0,
       0,   161,   164,    75,     0,    79,    84,    83,     0,   290,
     283,    63,    64,     0,   185,   189,   790,   790,   563,   790,
     572,   562,   569,   790,   566,   564,   539,     0,     0,   322,
       0,     0,   326,   495,   790,   790,     0,   260,   290,     0,
     263,     0,     0,   265,     0,     0,     0,     0,   266,   362,
       0,    37,     0,     0,   411,     0,   424,     0,   415,   412,
       0,   413,   414,     0,     0,     0,   408,   409,   421,   420,
       0,   136,   132,   138,     0,     0,   144,     0,   612,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   662,   695,
       0,     0,   687,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   621,
     626,     0,   150,   119,   121,   125,     0,     0,     0,     0,
       0,   399,     0,   398,     0,   147,     0,   153,   163,    76,
     286,     0,     0,    67,   557,   556,   571,   570,     0,   320,
     324,     0,   790,   271,   307,   290,     0,   302,   247,     0,
     790,     0,     0,     0,   790,     0,   529,   526,   530,   527,
     532,   528,   531,     0,   299,   260,   303,   790,   267,   361,
       0,     0,     0,   447,   450,     0,   449,   448,     0,   429,
       0,   436,   437,   401,     0,   423,   422,   402,   418,   134,
     146,     0,   609,   614,   615,     0,     0,   630,     0,     0,
     617,   618,   638,   639,     0,     0,   699,     0,     0,   685,
       0,   688,   702,     0,     0,   683,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   620,     0,
     152,   127,   790,     0,     0,     0,     0,   790,   148,   154,
     287,    65,   790,   321,   270,     0,   300,     0,   573,     0,
       0,     0,     0,     0,   490,   790,   790,   525,     0,   260,
     290,     0,   790,     0,   434,     0,   426,     0,   425,   430,
       0,   438,   439,     0,     0,     0,   610,     0,     0,   608,
       0,     0,     0,   629,   696,   697,   698,   694,     0,     0,
     686,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   381,   387,   380,
     790,     0,   390,     0,     0,   396,   400,   397,   580,   301,
       0,     0,     0,     0,     0,   790,   790,   486,   483,   290,
       0,   306,     0,   249,   435,     0,   440,     0,     0,     0,
     443,     0,   428,   427,     0,     0,     0,     0,   700,     0,
       0,   677,     0,   678,     0,   680,   682,     0,     0,     0,
       0,     0,     0,     0,     0,   622,     0,   790,   790,   394,
     389,   391,   790,     0,   561,   790,   790,     0,   790,   790,
     790,   491,   489,     0,   304,   248,   433,   441,     0,   431,
     442,     0,   635,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   388,   393,   392,
       0,   559,   484,     0,   574,     0,   575,   790,   488,   492,
     305,   445,     0,   444,   446,   632,     0,   633,     0,   661,
       0,   664,     0,     0,   679,   681,   673,     0,   669,     0,
       0,     0,   671,     0,   655,     0,   657,     0,     0,   623,
       0,     0,   790,   485,     0,   487,   432,     0,   631,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   560,     0,   634,   660,   663,
     676,   672,   668,   667,     0,   674,     0,   670,   654,   656,
     659,     0,     0,     0,   790,     0,     0,     0,     0,   790,
     576,   666,   675,   658,     0,   790,     0,   395,   624,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   625
};

/* YYPDEFGOTO[NTERM-NUM].  */
static const short int yydefgoto[] =
{
      -1,     2,     3,     4,    18,    19,    20,   177,    21,    22,
      69,   355,   540,   541,   534,   542,   543,   731,   738,  1129,
      23,    24,   181,    76,    77,   359,   360,   361,   186,   596,
     846,  1059,  1352,  1233,   187,   368,   188,   577,   578,   579,
     828,   580,   362,   363,   364,    43,    44,   123,   906,  1026,
    1027,   817,  1028,  1207,   907,   749,   966,  1145,   965,   967,
     784,   567,  1148,  1295,   568,  1202,  1331,   569,   973,   755,
     756,   974,   757,   758,   908,    46,   909,    48,    82,    83,
     910,   911,   139,    51,   912,   101,   234,    84,    85,    90,
     393,   307,   203,   607,   109,   110,   136,   608,   609,   249,
     103,   104,   810,   105,   610,   250,   811,   229,   318,    53,
     692,   489,   130,    99,  1114,  1115,  1120,    54,   292,   668,
     685,   686,   369,   370,   371,   839,   319,   842,   372,  1116,
    1117,   591,   669,   913,  1100,  1101,    55,    91,    92,    93,
      94,   209,   304,    56,    57,   143,   704,   313,   144,   311,
     698,   699,   700,   701,   709,   145,   308,   502,   503,   504,
     505,   506,   570,   822,  1036,  1528,  1529,  1038,  1039,  1531,
    1532,  1040,  1339,  1041,    25,   179,   545,   546,   957,  1130,
    1131,  1132,  1133,  1134,  1275,  1276,  1398,  1399,  1277,  1555,
    1400,  1401,  1558,  1652,  1559,  1402,    58,   147,   148,   149,
      59,   116,   117,    60,    61,   127,   272,   273,   274,  1375,
    1641,  1376,  1600,   443,   275,   276,   463,   464,   468,   469,
     477,  1642,  1377,   277,   278,   897,   279,   280,   281,   647,
     648,   282,   283,   284,  1379,   285,  1088,  1089,  1381,   286,
     287,   683,   571,   785,   786,   787,   788,   789,   790,   791,
     995,   996,  1151,  1163,  1192,  1193,  1194,   792,   793,   794,
    1417,  1611,   983,   795,  1152,   796,   797,   798,   799,   800,
     801,   802,   803,   804,   805,   806,   807,   808,  1574,  1575,
    1434,  1164,  1428,  1165,  1173,  1166,  1167,  1426,  1427,  1168,
    1431,   165,   118,   236,   237,   350,   247,   413,   429,  1090,
     166,   167,   204,  1195,   874,   408,  1080,   169,   341,   201,
     760,   170,   171,   346,   126,    10,    11,   172,   173,    13
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -1324
static const short int yypact[] =
{
     991,  1127,   111,    81,  1523, -1324,  1691,    36, -1324,   966,
     207, -1324,   220, -1324, -1324,   287,   966,   178, -1324, -1324,
   -1324, -1324, -1324, -1324, -1324, -1324,  1487, -1324,   752,  1304,
     351,  1130,  1190,  1291,  1526,  1343,  2980, -1324,   103,   654,
    1356,  1383,  1391, -1324, -1324, -1324, -1324, -1324, -1324, -1324,
   -1324, -1324, -1324, -1324, -1324, -1324, -1324, -1324, -1324, -1324,
   -1324,  1773,  1189, -1324, -1324,   966, -1324,  3411, -1324,   338,
   -1324,   474,  1077, -1324, -1324,   966,   966,  1222,   493,  1140,
   -1324, -1324,   536, -1324,   659,   659,   652,  1238,  3470,  1357,
    1517,   115,   143, -1324, -1324,   709,   678,   728, -1324,  1146,
     765,   966,   829, -1324, -1324,   182,   293,   859,   866,   759,
     794,   930,  1255,  1128,  1591,  1128,   202, -1324, -1324,   943,
     972,   982,  1015,   966,   951, -1324,  5012,   933,  1045, -1324,
     966,  1079,   536,  1158,   219,  1175,   273, -1324,  1182,   966,
    1111,  1238,  1581,  1218,  1113, -1324,  1229,   280, -1324,  1253,
     678, -1324, -1324, -1324, -1324, -1324,  3411, -1324, -1324, -1324,
    1104, -1324,  3411, -1324, -1324, -1324, -1324, -1324,  4804,   144,
    1287, -1324,   128, -1324,    83, -1324, -1324,  1250,   972,  1297,
   -1324, -1324, -1324,  1962,   605,   625,   159,  1309,  1315, -1324,
    1320,  1242,  1267,  1333,  1355,  1362,   678,   536,   536, -1324,
      79, -1324,  3411, -1324,  4033, -1324,  1128,  1517,   281,  1366,
     284, -1324,  1524, -1324,  1517,  1128,  3411, -1324, -1324,   289,
     966, -1324,   291, -1324, -1324,   966,  3411,  3411,   930, -1324,
   -1324, -1324,   966,   966,   930, -1324,    90, -1324,  1373,  1128,
     294,   312, -1324,  1128,  3411,   966,  3411,  1398, -1324,   321,
   -1324,   433, -1324,  1395,  1672,   117,  1128,  1412,  1417,  1058,
    1105,   933,  1420,  1444,  1449,  1128,  1128,  1128,   966,  1452,
    2071,  1593,  1098,  1202,  1460, -1324, -1324, -1324,    93, -1324,
   -1324, -1324, -1324, -1324, -1324, -1324, -1324, -1324,   989,  1252,
   -1324, -1324,   381, -1324, -1324,   354, -1324, -1324, -1324, -1324,
     966, -1324,   343, -1324,  1386,  1128, -1324,  1559, -1324,   345,
    1470,   966,   966,  1493,   877, -1324,  1559,  1128, -1324, -1324,
    1479, -1324, -1324,   130,  4052, -1324, -1324,  1483,  1266,  1038,
   -1324,  1482, -1324, -1324, -1324,  1488,  3411, -1324, -1324, -1324,
   -1324,  2772, -1324,  1410, -1324,  1287,  1552, -1324,  3411,  3411,
   -1324,  1495,  1511,  1446,  1413,  1052,  1557,    88,  1566, -1324,
    1527,  1962,  1227, -1324, -1324,  3716,  1573,  1594,  1477,   296,
   -1324,  1485,  1031,   912,  1592, -1324,  2463,   617,  1606,  1616,
    2599,  2814, -1324,  1622,  1625, -1324, -1324, -1324,  1389,   678,
     678, -1324,  3411,   347, -1324,  1479,  3411,  1536,   363, -1324,
    1128, -1324,  1128, -1324,  1623, -1324,   437,  4804,  1627, -1324,
     365, -1324, -1324,  1631,  4804,  4804, -1324, -1324,   930, -1324,
    1128,  3411,  3195,   380, -1324, -1324, -1324,  4804, -1324,  1621,
    3853,  3411, -1324,   966,  3411,   966, -1324, -1324,  3411,  1486,
   -1324,  1630, -1324, -1324,  1632,  1346,  3411,  1575,  3411,  1576,
    3411, -1324,  3411,  1128,  3411, -1324, -1324, -1324,  1643,  3411,
    1588,   966, -1324,   933,    52,  1585,  1419, -1324,    58, -1324,
   -1324, -1324, -1324, -1324, -1324, -1324, -1324, -1324,  1056,  1651,
   -1324,   714,   933,   933, -1324, -1324, -1324, -1324, -1324,   966,
   -1324, -1324,  3411,   397, -1324,  1265,  1113,  1229, -1324, -1324,
    1661, -1324,  1662,  1583, -1324,  1589, -1324,  3247, -1324,  1595,
   -1324, -1324,  3411,  3411,  1667, -1324,  1668, -1324,  1666, -1324,
    1670,  4077, -1324,  3411,  1572,   863, -1324,   443,  4804,  1685,
    3411,  3411, -1324,  1696,  1451,   972,  1597, -1324,   966,   966,
    1200, -1324,  1216,  1216, -1324,   456,  1692,  1609,  1669, -1324,
   -1324, -1324, -1324, -1324,  1704, -1324,   773,   507,   120,  3620,
    1292,   120,   990,  3020, -1324, -1324, -1324,  1617,  1628,  1633,
   -1324, -1324, -1324,  2463, -1324,  1540,  1212,   459, -1324, -1324,
   -1324,  1702, -1324,   933,  1433, -1324, -1324,   966, -1324, -1324,
    1679,   966,  1725,  1725,  1725, -1324,  1694,  1962,  2463,  2463,
    1566,  1962,  1566,  1962,  1713,  1716,   966, -1324,   420,  1724,
   -1324,   434,  1389,  1389,   506, -1324,  3411,  4166, -1324,  1638,
    1727,  1128, -1324,  3411,  3411, -1324,  3411,   930, -1324,  1726,
    3871, -1324,  4191, -1324, -1324,  1731,  1732,  3411, -1324,  4208,
   -1324,  4804,  1740,  1745,  1746,  3411,  3411, -1324,   189,  4804,
   -1324,  3411,  1747,  4227,  4246, -1324,  4367, -1324,  4383,  4402,
    1755,  4418, -1324,  4437, -1324, -1324,   223, -1324,   933, -1324,
     491,  4944, -1324,  1697,   933, -1324, -1324,  1754,  3411,  4804,
    1056,  1758, -1324,   517,  4804,   933, -1324,  1768, -1324,   110,
    4876,   529,   925, -1324,   538, -1324,  1765,   966,  1766,  1686,
   -1324,  1693, -1324,  4804,  1778, -1324, -1324,   933,   933, -1324,
    4804,  3411,  4804,   735, -1324, -1324, -1324, -1324,  3411, -1324,
   -1324, -1324, -1324, -1324,  1771,  3894,   618, -1324, -1324,   972,
     966,  1782,   972,   972, -1324, -1324,   966,  1786,  1787,  1791,
    1792,  1794,   966,  1799,    88,   136, -1324,  1804, -1324,   966,
   -1324, -1324,   678, -1324, -1324,   966, -1324,   761, -1324, -1324,
   -1324,   536,   678,  1729,   771,  1800, -1324,  1802,  1178,  1812,
    1815,  1816,  1819,  1821,  1824,   966,  1437,   966,  1442,  1825,
    1826,  1827,  1829,  1831, -1324,  4048, -1324, -1324, -1324, -1324,
    1838,  1828,  1839,  1834,  1837,  1841, -1324, -1324, -1324, -1324,
   -1324, -1324, -1324, -1324, -1324, -1324, -1324, -1324, -1324,  1851,
     423, -1324,   966,  1840,   536,   678,  1853,   966, -1324, -1324,
     678,  1757,   898,   120,   120,  1063,  1962,  1849,   874, -1324,
   -1324,  1477,  3411, -1324,  1679,   522,   966, -1324, -1324,   678,
   -1324, -1324, -1324, -1324, -1324, -1324,   634, -1324,  1962,  1962,
   -1324, -1324, -1324, -1324, -1324, -1324,   430,  1856, -1324,   966,
   -1324,  3411,   966,   465,  1857,   966,   488,  1858, -1324, -1324,
    3411,  1852,   680,  4804,  1854,  1859, -1324,   960,  3411,  3411,
   -1324, -1324, -1324, -1324, -1324,  4804,  4804,  2297, -1324,  2297,
    4804, -1324,  2882,  1314,  3278,  3278,   933,  1855,  3411,    93,
     933, -1324, -1324,   518, -1324,   399, -1324, -1324, -1324, -1324,
   -1324, -1324, -1324, -1324, -1324,   933,   477,  3411,  4804,  3411,
    4804,  1860,  1861,  3411, -1324,   234, -1324, -1324,  1865,   396,
     933, -1324,  1876,  1871, -1324,  3411,  1877, -1324, -1324,  3411,
   -1324,  1877,   720,  1862, -1324, -1324, -1324,   966, -1324,   975,
   -1324, -1324, -1324, -1324,   933, -1324,   933,  1793,  1795,  1788,
   -1324,   966, -1324, -1324,   502,   966,   966,   966, -1324, -1324,
   -1324, -1324, -1324,   966, -1324, -1324,   678, -1324, -1324, -1324,
   -1324,   781,  1868,   966,  1874,  3411,   308,  1884,   580,   580,
     580,   580,   580,   580,   580,  1797,  1886, -1324,  1887,  1890,
    1893,  1897,  1898,   580,   580,   580,   580,   966, -1324, -1324,
   -1324, -1324,  3521, -1324,  3521,  3521, -1324, -1324, -1324,   966,
     542,  3411,   678, -1324, -1324,   552,   966,   966,   966, -1324,
   -1324,  1895,  1896,  1899,  2169, -1324,  1039, -1324, -1324, -1324,
   -1324, -1324,   536,   678,   536,   678,   476, -1324, -1324,  1514,
   -1324,  1212, -1324,  1894,  3994,   678,  1679, -1324,   966,   966,
   -1324,  1878, -1324, -1324, -1324, -1324, -1324,  1900,  4804,   572,
   -1324, -1324,  1907, -1324, -1324, -1324, -1324, -1324, -1324,  4804,
   -1324, -1324, -1324, -1324,  1844,  1846,  1848,    95,  2341, -1324,
     102,  2658,  2723, -1324,  1905,  3654, -1324, -1324, -1324,   966,
     586, -1324,   678,   930,   913, -1324,  4804,  4804, -1324, -1324,
    4804, -1324,   933,   754,   396, -1324,   638,  1863, -1324,   813,
     743,  1850, -1324,  3309, -1324, -1324, -1324, -1324,  1842, -1324,
     865,  1916,   642,   643,   649,   520,   865,    88,   966,   966,
    1932, -1324,   661,   663,   671,   966, -1324, -1324,   966,  1931,
     966,   966,  1027, -1324,  1933,    80,  1934,  3411,  4558,  1132,
   -1324, -1324,  1940, -1324,  1864, -1324,   966, -1324,  1830, -1324,
    1947,  1869, -1324,  1873,  1875,  1879,  1880,  1881,  1882, -1324,
   -1324, -1324, -1324, -1324, -1324,  1883,  1885,  1888,  1891,   803,
    1937,  3598, -1324, -1324, -1324, -1324, -1324, -1324, -1324, -1324,
   -1324, -1324,   966, -1324,   689,   695,   700,   966,  3411,  3411,
     966,  1901,   966,  1106, -1324, -1324,   678,   966,   678,   966,
     576, -1324,  1269, -1324,  1952, -1324, -1324, -1324,   966,   678,
   -1324, -1324, -1324,   966, -1324, -1324,    93,    93, -1324,    93,
   -1324, -1324, -1324,    93, -1324, -1324, -1324,  1128,   721, -1324,
     966,   966,   930, -1324,   933,   292,  1960,   536,   678,   966,
   -1324,  1908,  1872, -1324,  1850,   162,  1972,  1850,  1863, -1324,
    4574, -1324,  1455,   358,  1916,  1929, -1324,  1930, -1324, -1324,
     966, -1324, -1324,   966,   966,  1936,  1795, -1324, -1324, -1324,
    3411, -1324, -1324, -1324,   733,   966, -1324,   966, -1324,  1976,
    1971,  1973,  1605,  1979,  1980,  1977,  4017,  1989, -1324, -1324,
    1436,   580,  1892,  3411,   580,  3411,  3411,   580,   580,   580,
     580,   580,   580,   580,   580,  1982,  1983,  3411,  1997,  1918,
    1479,   966, -1324, -1324, -1324, -1324,   747,  4593,  4609,  2008,
    1998, -1324,  3115, -1324,   966, -1324,   966, -1324, -1324, -1324,
   -1324,   966,   966, -1324, -1324, -1324, -1324, -1324,  2004, -1324,
   -1324,   755,   361, -1324, -1324,   678,   966, -1324, -1324,  2011,
     933,  2012,  2013,  2014,    77,  2021, -1324, -1324, -1324, -1324,
   -1324, -1324, -1324,  2002,  1863,  1050, -1324,   933,  1863, -1324,
    2022,  2015,  1974, -1324, -1324,   473, -1324, -1324,   548, -1324,
     535,  2018, -1324, -1324,   532, -1324, -1324, -1324,  4804, -1324,
   -1324,  1478, -1324, -1324, -1324,   966,  1556, -1324,   966,  1605,
   -1324, -1324, -1324, -1324,  1507,  2027, -1324,    99,  1938, -1324,
    3411, -1324, -1324,  1941,   745,  4804,   746,  1943,  1944,  1945,
    1946,  1948,  1953,  1954,  1955,   966,   966,  1918, -1324,  3411,
   -1324, -1324,   149,  3356,  3411,  3411,  1961,  1133, -1324, -1324,
   -1324, -1324,   933, -1324, -1324,   966, -1324,  1392, -1324,  2643,
    3411,  1128,  3411,   966, -1324,   933,   706, -1324,  3411,   536,
     678,   966,   933,  1984, -1324,  2030, -1324,   683, -1324, -1324,
     473,  2018, -1324,   473,  1991,   653, -1324,  2039,  1350, -1324,
    2040,  1350,  1350, -1324, -1324, -1324, -1324, -1324,  1436,  3411,
   -1324,  3411,  2046,  3411,  2047,  3411,  3411,  3411,  3411,  3411,
    3411,  3411,  3411,  3411,  2041,  2042,   772, -1324,  1981, -1324,
     237,  3118, -1324,   181,  3813,  4804, -1324, -1324, -1324, -1324,
    2044,  4628,  4749,  2052,  4765,   933,   744, -1324,  4804,   678,
     966, -1324,  2000, -1324, -1324,  2057, -1324,  2054,  2058,  2059,
    2064,  2060, -1324, -1324,  3411,  2061,  3411,  2066, -1324,   797,
     806, -1324,  4788, -1324,   807, -1324,  4804,   815,   820,  1986,
    1995,   821,   823,   835,  1996, -1324,  3411,   149,   149, -1324,
   -1324, -1324,   149,   966, -1324,   933,   933,  3411,   933,   933,
     896, -1324, -1324,   966, -1324, -1324, -1324, -1324,   801, -1324,
   -1324,  2065,  4804,  3411,  2070,  3411,  2085,  3411,  2086,  3411,
    3411,  2087,  3411,  2088,  3411,  2089,  3411,  3411,  3411,  2091,
    3411,  2094,  3411,  2095,  3411,  3411,   838, -1324, -1324, -1324,
    2092,  2031, -1324,  1690, -1324,  3836, -1324,   945, -1324, -1324,
   -1324, -1324,  2096, -1324, -1324, -1324,  2097, -1324,  2098, -1324,
     847, -1324,   851,   857, -1324, -1324, -1324,   864, -1324,   869,
     870,   879, -1324,   886, -1324,   889, -1324,   890,   891, -1324,
    3411,  1994,   933, -1324,  1128, -1324, -1324,  2099, -1324,  2101,
    2103,  2107,  2108,  2109,  2110,  3411,  2112,  3411,  2113,  2114,
    2116,  2117,  3411,  2032,  2118, -1324,  2111, -1324, -1324, -1324,
   -1324, -1324, -1324, -1324,   909, -1324,   917, -1324, -1324, -1324,
   -1324,   920,  3411,   966,   933,  2119,  2121,  2122,  2036,   898,
   -1324, -1324, -1324, -1324,  3411,  1369,   929, -1324, -1324,  3411,
    2037,  3411,  2067,  3411,  2069,  3411,  2073,  3411,  2075,  3411,
    2133, -1324
};

/* YYPGOTO[NTERM-NUM].  */
static const short int yypgoto[] =
{
   -1324, -1324, -1324, -1324, -1324, -1324, -1324, -1324, -1324, -1324,
   -1324, -1324, -1324,  1619,  1426, -1324, -1324,   867,  1582, -1324,
    2153, -1324, -1324, -1324, -1324,  -333, -1324,  -249, -1324, -1324,
   -1324, -1324, -1324, -1324,  1978, -1324,  1988, -1324,  1331,  -544,
   -1324,  -542, -1324,  -319,    14, -1324, -1324, -1324,  1798, -1324,
   -1324, -1324, -1324, -1324,  1803, -1324, -1324, -1324, -1324, -1324,
    1813, -1324, -1324, -1324, -1324, -1324, -1324, -1324, -1324, -1324,
   -1324, -1324,  1134,  -482,    47, -1324,    48, -1324,  1494, -1324,
      49,    50, -1324, -1324,    53, -1324,   -99,   937, -1324,    -2,
   -1324, -1324,  -166,  2146, -1324, -1324, -1324,  -546,  -538,  -628,
   -1324,  1957,  1371,    46,  1326,  -427,  1167,  -219,   -70, -1324,
   -1324, -1324,  2148,   -47, -1324,  1075, -1324, -1324, -1324,  -663,
   -1324,  1505,  1710,  -420, -1324,  -764,  -172,   883,  1611, -1324,
   -1024,  -543,  -481, -1324, -1000,   947, -1324, -1324,    24,  1990,
    1993,    59,   -44, -1324, -1324, -1324, -1324, -1324,  1903, -1324,
   -1324, -1324,  1263, -1324,  -462,  1910,    33, -1324, -1324,  1500,
   -1324,  1501, -1324, -1324, -1016,  -465,  -797, -1324, -1324, -1324,
     677, -1324,   609, -1324, -1324, -1324, -1324, -1324, -1324,  1254,
     -19,  1866,  -700, -1324,  1076, -1324,   824, -1276, -1324, -1324,
   -1324,   811, -1324, -1324,   619, -1323, -1324,   -33,  1915, -1324,
   -1324,   -13,  -235, -1324, -1324, -1324, -1324, -1324, -1324, -1324,
     551, -1324, -1324,  -448, -1324, -1324, -1324, -1324,  -424,    28,
    -801, -1094, -1324, -1324,  -405, -1324, -1216,  1143, -1324,   425,
   -1324, -1324, -1324, -1324, -1324, -1215,   691,   367, -1324, -1324,
   -1214, -1324, -1324, -1324,  1454, -1324, -1324, -1324,  -771, -1324,
    -695,  -755, -1324,  -726,   600,  1051, -1154,   934, -1324, -1324,
     825, -1046, -1324, -1324, -1324, -1324, -1324, -1324, -1324, -1324,
   -1324, -1324, -1324, -1324, -1324, -1324, -1324, -1324,  -401,   623,
   -1188,   707,   327,  -852,  1256, -1324, -1324,   739, -1324,  1082,
     819, -1324,   -52, -1324,  1833, -1324,   171,  1640,  -332,  -146,
     -98,  -296,  1950,   -78,  1614, -1324,  1375, -1324, -1324,   -32,
    -499,  2115, -1324,   -79,     0,  1913,  2192,    -7,   941,  2258
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If zero, do what YYDEFACT says.
   If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -798
static const short int yytable[] =
{
       6,   688,   119,    26,    26,   660,   640,   228,   426,   416,
     205,   915,  1008,   751,     5,   416,   323,   529,  1213,   819,
    1261,   999,  1000,  1002,   388,  1037,   217,   120,   552,   220,
     455,   827,   115,   702,   829,   196,   394,  1329,   982,   666,
     670,   836,   553,   200,   958,   522,  1378,  1380,  1382,   997,
     997,   997,   997,    45,    47,    49,    50,   752,   689,    52,
     856,   235,   687,   820,   125,   178,   863,   866,   857,   981,
    1055,   344,  1487,   678,   864,   867,   761,  1492,   320,   814,
     120,    -2,   119,   119,   353,   295,   134,   207,    95,   629,
     631,  1085,  1473,   352,   288,   146,   391,  1268,  1096,  1248,
       8,   240,   241,   475,   128,   475,  1303,   120,   120,   309,
    1239,    14,   239,   208,   210,  -258,   251,  1243,  1507,   289,
       9,   964,  1489,   753,   395,   211,   419,   597,  1436,     8,
     675,   601,   603,   439,   120,  -258,   667,  1172,  1172,   245,
     306,  1177,  1178,   440,   348,   219,   349,   222,     8,     9,
     389,   390,   153,   213,  1188,   290,     8,   154,   155,  1527,
     156,  1474,   397,   833,  1557,    63,   511,  1560,     9,   376,
    1561,   406,   927,  1447,     8,   377,     9,   392,  1150,    71,
       1,   162,   961,   365,   373,   302,     1,   902,   420,  1025,
      15,    16,   224,    17,     9,   887,  1592,  1508,   724,   120,
     512,    72,   527,   129,   688,     1,   888,   119,   120,     1,
     354,   119,   242,   212,  1031,  1032,     1,   612,   613,  1489,
    1033,     1,    98,     1,   444,   488,   423,   719,   512,   297,
    1034,   398,   120,   119,   456,   457,   120,  1037,     1,  1215,
    1384,   214,    67,  1388,   903,   441,   614,  1527,   526,   120,
     916,  1361,  1588,  1378,  1380,  1382,   343,  1156,   120,   120,
     120,   925,   523,  1385,   847,   687,   410,   850,   851,   852,
     853,   404,   343,   509,   493,   919,  1468,     1,   553,   512,
     225,  1190,   553,   299,   553,  1654,  1240,   889,  1155,   451,
     315,   399,  1229,  1483,   401,  1526,  1111,    68,   120,   409,
     243,   411,  1031,  1032,   424,    65,   476,   901,  1033,  1159,
     120,   226,  1189,   582,   507,   227,  1069,   225,  1034,   627,
       8,  1569,   425,  1570,   826,   590,  1457,  1072,  1577,  1578,
    1579,   432,  1581,  1582,  1583,  1584,    66,  1142,  1143,  1144,
       9,  1042,  1044,   351,   497,   497,   694,   535,   174,   848,
     849,     1,    97,   491,  1363,   494,   619,   548,   620,  1392,
     643,   365,     1,  -260,   615,     1,  1393,   713,   235,  -260,
    1394,   300,   216,   618,  1395,   625,   365,   373,   316,   214,
     365,   365,   214,  -260,  1396,   726,   606,   225,  1552,   225,
     633,   482,   243,   120,   583,   120,  1299,   483,  1204,  1205,
    1206,   484,   485,  1160,  1161,  1162,  1102,   695,   416,   422,
     243,     8,    45,    47,    49,    50,  1215,   216,    52,   433,
       1,   444,   944,  1464,  1298,   997,   251,  1378,  1380,  1382,
     858,     9,  1636,  1018,   902,  1354,  1355,  1286,  1356,  1670,
    1064,   225,  1357,   316,   245,   616,   120,  1678,  1118,  1254,
     869,  1601,   226,    98,   622,   434,   861,  1397,   486,  1429,
     722,   214,  1429,   225,   671,  1429,  1429,  1439,  1440,  1429,
    1429,  1429,  1444,   741,  1125,  1070,   830,   872,   243,   753,
     487,  1393,   690,   373,   175,  1394,   750,   759,     8,     1,
     812,  1104,   818,  1048,   216,   316,   676,  1113,  1073,  1396,
    1053,   748,  1644,   189,  1646,  1224,  1649,   553,     9,  1225,
     753,   762,  1141,   113,   815,  1062,  1063,  1294,   859,  -157,
    1614,  1019,   754,   868,     1,   216,  1703,   729,   859,   553,
     553,   732,   733,  1494,   922,   623,  1422,   834,   205,  -157,
    1393,   512,  1411,  1393,  1394,  1037,   928,  1394,  1395,  1105,
    1490,  1395,  1199,   754,   742,   931,  1393,   831,  1396,   745,
    1394,  1396,  1203,   859,  1395,   942,  1284,  1656,  1728,  1658,
    1259,   997,  1397,   365,  1396,   904,  1416,   871,   748,  1336,
    1736,  1170,  1234,   373,   373,  1740,   859,  1742,     8,  1744,
     977,  1746,     8,  1748,   216,  1750,  1249,   365,   365,   365,
     433,   365,  1098,   365,   512,     1,   366,  1488,     9,   748,
     862,   865,     9,   -68,   120,   923,   -68,   -68,   366,     1,
     587,  1139,   367,   970,    98,   -68,   374,   583,   -68,   -68,
    1730,  1397,  1231,  1118,  1397,   946,   512,   -68,    98,   288,
    1019,   375,   -68,  1023,  -790,  -790,     1,  1397,  1263,   -68,
     433,  1060,  1279,  1281,   -68,   131,  -790,  -790,   288,  1282,
    1215,  1393,   199,  1501,   289,  1394,  -258,  1058,   671,  1395,
     859,  1291,  -258,  1292,   671,  1160,  1161,  1162,   971,  1396,
     972,  1293,   968,   289,  1250,   690,  -258,   975,  1255,  1498,
    1524,  1393,   997,  1502,   676,  1394,   216,  1076,   676,  1333,
    1556,  -258,  -258,    80,    81,  1334,  -790,   939,   941,  1396,
    1335,  1475,  1563,  1735,   976,   681,   512,   676,  -790,   997,
    1525,   152,   153,   535,  1482,   215,     8,   154,   155,   949,
     156,  1359,  1061,     1,   157,   158,  1264,  1126,   218,   159,
    1280,  1138,   251,  1409,   959,     1,     9,  1283,   160,   161,
    1029,   162,  1397,    78,   129,  1256,  -258,  1451,  -258,   433,
    1266,   433,  1512,  1514,  -192,  1463,  -260,  1022,    79,   433,
    -192,   943,  -260,   902,   747,   221,  1043,  1045,   512,   216,
    -258,  -192,  1397,     8,  -192,  -129,  -260,   433,  1056,  1585,
    1547,   216,  1075,   433,   154,   155,    80,    81,   433,  1358,
    1257,   585,   586,     9,  1147,  -129,  1353,  1149,   970,  1393,
     251,  1221,   682,  1394,  1616,  1651,   154,   155,   512,  1250,
     585,   586,     6,  1618,  1621,  1305,   365,  1396,  1602,  1325,
    1362,   433,  1623,   512,     1,  1099,  1035,  1625,  1629,   223,
    1631,  1267,  1481,  1513,  1515,   433,   163,   164,   365,   365,
    1201,   556,  1633,  1250,  -192,  1679,    98,   232,   588,   905,
      31,    32,    33,   971,  1689,   972,   979,   980,  1690,   230,
    1586,  1217,     1,  1219,  1691,   748,   231,   588,   500,  1150,
     589,  1692,  1599,  1228,  -790,  -790,  1693,  1694,  -790,  -790,
    -790,  -790,   233,  -790,   501,  1617,  1696,  -790,  -790,   589,
    1397,  1150,  -790,  1698,  1619,  1622,  1699,  1700,  1701,  -790,
    1050,  -790,  -790,  1624,  -790,   671,   562,    40,  1626,  1630,
     476,  1632,  1272,  1273,  1093,  1461,  1725,   476,  1097,  1119,
    1121,   676,  1037,  1634,  1726,   929,  1680,  1727,  1215,    42,
     729,   930,    12,  1200,   676,  1622,  1738,    62,   226,  1622,
    1476,   592,   593,   676,  1135,  1622,  1135,    70,   251,   251,
     251,    65,  1622,  1031,  1032,   244,    89,  1622,  1695,  1033,
      96,   114,  1051,   106,   111,   121,   759,  1697,     8,  1034,
    1648,   106,   137,   245,  1622,  1253,   245,  1622,  1622,  1702,
    1128,   816,   721,     1,   902,  1216,  -709,  1218,     9,   142,
     246,   902,  -122,   150,  1252,     1,    12,  1622,   216,  -790,
    -790,   478,   479,   594,   119,  1622,   180,   182,  1622,   251,
     251,   251,  -122,  1543,     1,   248,     1,  1739,   121,  1685,
      96,    96,  1251,   416,     6,   252,     6,   585,   586,   120,
     106,     1,   106,    -3,  1344,    -3,  1346,    -3,  1035,  1300,
    1035,  1546,   251,  1301,   238,   121,   121,  1351,  -709,   447,
     517,     1,   518,   152,   153,  1589,  1258,   121,     8,   154,
     155,   293,   156,     1,   448,     8,   157,   158,   585,   586,
     106,   159,   121,   150,   176,   254,  1366,   255,     9,     8,
     160,   161,   748,   162,   588,     9,  1479,   585,   586,   470,
      -3,    -3,  1046,    -3,  1031,  1032,   449,   291,   471,     9,
    1033,  1274,   671,  1330,  1262,   476,   589,  1274,   902,     1,
    1034,   450,  1637,  1638,   321,   322,   677,  1639,     7,   587,
    1135,   100,   676,    98,   536,   588,  1135,   959,   251,     8,
       8,   190,  -204,   294,   191,   192,  1214,   121,    96,  1308,
     975,  1309,    98,    96,   588,    96,   121,   589,     8,     9,
       9,   106,  -204,   537,   216,   113,   106,     1,   296,   538,
     539,  1031,  1032,   417,   418,  1647,   589,  1033,     9,   987,
     121,   193,   194,   195,   121,   298,   428,  1034,   163,   164,
    1343,   102,   301,  1465,   988,   303,   442,   121,  1031,  1032,
     251,     8,     8,   472,  1033,   141,   121,   121,   121,   458,
    1365,   312,   473,     6,  1034,   444,  1660,  1537,  1662,  1663,
     574,     9,     9,  1667,     8,  1669,   251,  1035,   554,  1673,
    1383,  1675,   183,  1677,     1,  1432,  1706,   555,   184,   190,
     120,   490,   191,   192,     9,   314,   121,   310,   150,  1330,
       8,   185,   150,   150,   671,   289,   190,   150,   121,   191,
     192,     1,   480,   245,   476,   476,   696,   476,   481,   317,
       9,   476,   152,   153,   356,   113,   697,     8,   154,   155,
    -797,   156,   536,   676,    12,   157,   158,   246,   515,   516,
     159,  -797,   107,   809,  1714,   347,  1716,     9,   549,   160,
     161,  1721,   162,     8,     8,    86,    62,  1533,  1550,   581,
     216,   734,  1082,   357,  1083,  1086,     8,   538,   539,   380,
      87,   152,   153,     9,     9,   381,     8,   154,   155,   611,
     156,   736,   730,    88,   157,   158,     9,   382,  1480,   159,
     383,   121,     6,   121,   122,   251,     9,   652,   160,   161,
     385,   162,  1432,   152,   153,  -115,  1035,   133,     8,   154,
     155,   238,   156,   154,   155,   384,   157,   158,     8,     8,
    1469,   159,   386,   206,   671,  -115,   642,  1603,     9,   387,
     160,   161,   400,   162,   135,  1533,    88,  1262,     9,     9,
     676,   421,   138,  1540,   121,     8,  1087,   163,   164,   152,
     153,     8,   665,  -198,     8,   154,   155,   674,   156,   737,
     739,   524,   157,   158,   533,     9,   431,   159,    88,   435,
     673,     9,     8,  -198,     9,     8,   160,   161,   445,   162,
     693,     8,  1549,   446,  1031,  1032,   452,  1383,   998,   444,
    1033,  1580,     9,  1001,  1424,     9,   163,   164,  1425,     8,
    1034,     9,     6,  1737,     8,  1242,  1390,     6,  1242,  1242,
     453,   728,   289,     8,   120,   454,  1035,     8,   459,     9,
     474,  1035,  -790,  -790,     9,   671,   843,   844,   163,   164,
     585,   586,  1262,     9,   492,   574,   495,     9,   575,     8,
    1538,   154,   155,   152,   153,  1496,   510,     1,     8,   154,
     155,   813,   156,   499,   676,   514,   157,   158,   519,     9,
     520,   159,   644,   530,   576,  1504,   581,   581,     9,  1505,
     160,   161,   574,   162,   163,   164,     8,   531,   837,     8,
       6,  1223,   840,   206,  -790,    98,     8,   588,     8,    73,
     402,    74,   112,    75,  1035,  1262,     9,   611,   574,     9,
    1671,   576,     8,   611,   611,    88,     9,   532,     9,   589,
     153,     1,   121,   113,     8,   154,   155,   544,   156,   154,
     155,     8,     9,  1499,   676,   305,   550,   576,   197,   198,
     551,   645,   646,   584,     9,  1091,  1092,     6,     6,   162,
     572,     9,     6,     8,   465,  1643,  1469,   305,  1469,   671,
    1469,  1035,  1035,     8,   573,  -790,  1035,  -790,   466,   595,
      88,  1383,   121,     9,  1196,  1197,   598,     8,   163,   164,
      88,  1415,  -790,     9,  -790,  -790,   599,   604,   113,   605,
    -790,   121,    15,    16,   392,    17,   289,     9,   933,   621,
     634,  1433,   624,  -790,  1437,  1438,   626,   650,  1441,  1442,
    1443,     1,   444,   662,   651,   655,   657,   672,  -790,  -790,
    -790,  -790,  -790,  -790,  -790,   467,  -790,  -790,  -790,  -790,
    -790,  -790,   664,   680,  -790,   676,  -790,   120,   705,   706,
     436,   707,  1643,   955,   437,   960,   962,   708,   438,   714,
     716,   715,   717,   711,    28,  1171,   969,    29,  1175,  1176,
    1683,   720,     8,     8,   723,   984,   727,   744,   745,   743,
    1185,  1186,  1187,   730,   746,   823,   984,   984,   984,   984,
     832,     1,     9,     9,  1469,   838,   824,   113,   841,     6,
     854,   825,   845,   855,   860,     6,   623,    30,    31,    32,
      33,    34,    35,  1035,   391,   876,   878,   879,    36,  1035,
     882,    37,    38,   813,    39,  1369,   258,   259,   260,  1370,
    1371,  1372,   883,   884,   891,   898,  1047,   268,  1373,   914,
     917,  1374,   581,  -104,   140,   921,  -104,  1057,   926,  -104,
    -104,  -104,   932,   934,   935,  -104,  -104,  -104,   937,  -104,
     945,   936,   948,  -104,  -104,    40,   950,   951,  -104,    41,
    1067,   952,   953,  1067,   954,  -104,   111,  -104,  -104,   956,
    -104,  -104,  -104,  -104,   963,   978,   985,    42,   986,  -104,
    -104,  -104,  -104,  -104,  -104,  -104,  -104,  -104,   989,  -104,
    -104,   990,   991,  -104,  -104,   992,  -104,   993,  -104,  -104,
     994,  1003,  1004,  1005,  -104,  1006,  1103,  1007,  1011,  1013,
    1012,  1016,  -104,  -104,  -104,  -104,  1014,  -104,  -104,  1015,
    -104,  1017,  1021,  1024,  1030,  1049,  1065,  1071,  1074,   622,
    1108,  1109,  1094,  1077,  -104,  1112,  -104,  -104,  1078,  -104,
    -104,  -104,  -104,  -104,     8,  -104,  1122,  1123,   697,  1139,
    1154,  1137,  1157,  1138,  1169,  1150,  1179,  1180,  1127,  -104,
    1181,  -104,  1140,  1182,     9,  -104,  -104,  1183,  1184,   113,
     556,  1208,  1209,  1226,  1146,  1210,  1232,  1235,   905,    31,
      32,    33,   861,  1236,   984,  1237,  1278,   984,  1238,   984,
     984,   984,   984,   984,   984,   984,   255,  1369,   258,   259,
     260,  1370,  1371,  1372,   984,   984,   984,   984,   984,   268,
    1373,  1113,  1271,  1374,  1290,  1297,  1304,  1302,  1310,  1326,
     813,  1265,  1311,   358,  1313,  -790,  1309,  1314,  -790,  1349,
    1364,  1315,  1368,  1316,  -790,   562,    40,  1317,  1318,  1319,
    1320,  1321,  1387,  1322,  1403,  1341,  1323,  1222,  1404,  1324,
     581,  1407,   581,  1412,  -790,  1413,  1420,  1414,    42,  1230,
    -790,  -790,  -790,  1418,  1419,   764,  1445,  1446,  -790,  -790,
    -790,  -790,  -790,  -790,  1448,   -55,  1449,   168,  1454,  -790,
    1455,  1462,  -790,  -790,  1478,  -790,  1430,  1467,  1470,  1471,
    1472,  1477,  1484,  1486,  1493,  1506,  1509,  1485,  1554,  1511,
    1103,  1516,  1517,  1518,  1519,  1536,  1520,  -790,  1553,  -790,
    1562,  1521,  1522,  1523,  1564,  1566,  1571,  1573,  1496,  1499,
    1587,  1594,  1597,  -790,  1605,  -790,  -790,  1606,  -790,  1609,
    -790,  1607,   460,  1608,  -446,  1704,  1613,  1610,  1287,  1288,
    1289,  1615,  1655,  -500,  1627,  -500,   461,  1657,  -790,  1296,
       1,   984,   984,  1628,  1635,  1659,  1661,  1664,  1666,  1668,
    -500,  1672,  -500,  -500,  1674,  1676,  1686,   984,  -500,  1681,
    1682,  1708,   324,  1709,  1687,  1688,  1707,  1710,  1711,  1712,
    1713,  -500,  1715,  1717,  1718,   740,  1719,  1720,  1724,  1731,
    1722,  1732,  1733,  1723,  1734,  1741,  -500,  -500,  -500,  -500,
    -500,  -500,  -500,  1332,  -500,  -500,  -500,  -500,  -500,  -500,
    1751,  1340,  -500,  1342,  -500,   462,   947,    27,  1345,   735,
    1347,  1348,  1052,   564,   378,  1743,   407,  1745,   565,  1350,
    1211,  1747,  -790,  1749,   379,  -790,   414,   415,   566,   108,
    1220,  -790,   412,  1020,  1212,  1066,  1198,   132,   121,  1260,
     924,  1103,  1103,   691,   427,   835,   430,  1360,  1124,  -500,
    1367,  -790,  1640,   121,   405,   403,  1386,   938,  1591,   940,
    1136,  1491,  1285,  1391,   496,  -790,  -790,  -790,  -790,  -790,
    -790,   960,   498,   547,  1405,  1406,  -790,  1653,  1495,  -790,
    -790,   508,  -790,  1705,  1031,  1032,  1410,  1246,   984,  1010,
    1033,  1423,  1328,   984,  1503,  1665,  1174,  1568,  1312,  1510,
    1034,   880,   984,   628,  1081,   984,   525,   151,   984,   984,
     984,   984,   984,   984,   984,   984,   875,    64,     0,     0,
       0,     0,  1450,  -790,     0,     0,     0,  -790,     0,     0,
       0,     0,     0,   342,   345,  1458,   521,  1459,     0,     0,
       0,     0,  1460,     0,     0,  -790,     0,     1,   528,   430,
       0,     0,     0,     0,   152,   153,     0,  1466,     0,     8,
     154,   155,     0,   156,     0,     0,     0,   157,   158,   342,
       0,     0,   159,     0,     0,     0,     0,     0,     0,     9,
       0,   160,   161,     0,   162,     0,     0,     0,     0,     0,
       0,     0,   528,     0,     0,     0,   617,     0,   152,   153,
       0,     0,     0,     8,   154,   155,   984,   156,     0,   984,
     984,   157,   158,     0,     0,     0,   159,     0,     0,     0,
       0,   630,   632,     9,     0,   160,   161,     0,   162,     0,
       0,   639,     0,     0,   641,     0,   984,   984,     0,   649,
       0,     0,   645,   646,     0,   653,   654,     0,   656,     0,
     658,     0,   659,     0,   661,     0,  1539,     0,     0,   663,
     121,     0,   121,     0,  1545,     0,     0,     0,     0,     0,
       0,  1241,  1551,  1087,     0,     0,     0,     0,   679,   163,
     164,   684,     0,     0,     0,     0,     0,     0,     0,   342,
       0,     0,   528,     0,     0,   703,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   710,     0,     0,
       0,   345,   712,   528,   358,     0,  -790,     0,     0,  -790,
       0,     0,     0,   163,   164,  -790,     0,     0,     0,     0,
     725,   528,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1604,     0,     0,     0,  -790,     0,     0,     0,     0,
       0,  -790,  -790,  -790,     0,     0,     0,     0,     0,  -790,
    -790,  -790,  -790,  -790,  -790,     0,     0,     0,     0,     0,
    -790,     0,   342,  -790,  -790,     0,  -790,     0,     0,   342,
     342,     0,     0,     0,  1340,     0,     0,     0,     0,     0,
       0,     0,   342,     0,  1650,   342,     0,     0,  -790,     0,
    -790,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  -790,     0,  -790,  -790,     0,  -790,
       0,  -790,     0,   528,   873,     0,   414,     0,     0,     0,
       0,     0,     0,     0,   121,     0,     0,   873,     0,  -790,
       0,     1,     0,     0,     0,   885,   886,     0,     0,     0,
     600,   890,  -790,     0,     0,  -790,     0,     0,     0,     0,
       0,  -790,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   121,     0,     0,   918,     0,
     920,  -790,     0,     0,     0,     0,   342,  -790,  -790,  -790,
       0,     0,     0,   342,     0,  -790,  -790,  -790,  -790,  -790,
    -790,     0,     0,     0,     0,     8,  -790,     0,     0,  -790,
    -790,   528,  -790,     0,  1729,   152,   153,     0,     0,     0,
       8,   154,   155,     0,   156,     9,     0,     0,   157,   158,
     113,     0,     0,   159,  -790,     0,  -790,     0,     0,     0,
       9,     0,   160,   161,     0,   162,     0,     0,     0,     0,
    -790,     0,  -790,  -790,     0,  -790,     0,  -790,  1369,   258,
     259,   260,  1370,  1371,  1372,     0,     0,     0,     0,     0,
     268,  1373,     0,     0,  1374,  -790,     0,     1,     0,     0,
     152,   153,   342,     0,     0,     8,   154,   155,  1244,   156,
    1087,     0,     0,   157,   158,   342,     0,   342,   159,     0,
       0,     0,     0,     0,   342,     9,   342,   160,   161,     0,
     162,     0,     0,     0,   342,     0,     0,     0,   342,   342,
       0,   342,     0,   342,   342,     0,   342,     0,   342,   152,
     153,     0,  1054,     0,     8,   154,   155,     0,   156,     0,
     163,   164,   157,   158,   342,     0,     0,   159,     0,   342,
       0,     0,     0,  1245,     9,  1087,   160,   161,     0,   162,
       0,  1068,     0,     0,     0,   602,     0,  -790,   342,     0,
    -790,     0,     0,     0,     0,   342,  -790,   342,  1079,  1079,
       0,     0,     0,     0,     0,     0,     0,   649,     0,   649,
     342,     0,     0,   528,   528,   528,  -790,     0,  1095,     0,
       0,     0,  -790,  -790,  -790,   163,   164,     0,     0,     0,
    -790,  -790,  -790,  -790,  -790,  -790,     0,  1106,     0,  1107,
       0,  -790,     0,  1110,  -790,  -790,     0,  -790,     0,     0,
       0,     0,     0,  1084,     0,   703,     0,     0,     0,   710,
       0,     0,   475,     0,  -790,     0,  -790,     0,     0,  -790,
     343,  -790,     0,     0,   163,   164,     0,     0,     0,     0,
       0,  -790,     0,  -790,  -790,  -790,     0,  -790,  -790,  -790,
    -790,     0,  -790,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  -790,     0,     0,  1158,     0,     0,     0,     0,
    -790,     0,     1,     0,     0,     0,     0,  -790,  -790,  -790,
    -790,  -790,  -790,  -790,     0,  -790,  -790,  -790,  -790,  -790,
    -790,     0,     0,  -790,     0,  -790,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   124,     0,     0,     0,     0,     0,     0,   342,     0,
       0,     0,  -790,     0,  -790,     0,     0,     0,     0,     0,
     342,   342,     0,     0,     0,   342,     0,     0,     0,  -790,
       1,  -790,  -790,     0,     0,     0,     0,  -790,     0,     0,
       0,   821,     0,  -375,     0,     0,  -375,     0,     0,     0,
    -790,     0,  -375,   342,     0,   342,     0,     0,   528,     0,
       0,   528,   528,     0,     0,  -790,  -790,  -790,  -790,  -790,
    -790,  -790,  -375,  -790,  -790,  -790,  -790,  -790,  -790,     0,
       0,  -790,     0,  -790,     0,     0,  -375,  -375,  -375,  -375,
    -375,  -375,     0,  1270,     0,     0,     0,  -375,     0,     0,
    -375,  -375,     0,  -375,     0,  -375,  -375,     0,     0,     0,
       0,  -375,     0,     0,     0,     0,  1153,     0,     0,     0,
       0,  -375,     0,     0,     0,     0,     0,  1306,     1,     0,
       0,     0,     0,     0,     0,     0,  1456,     0,  -790,     0,
       0,  -790,     0,     0,  -375,   152,   153,  -790,  -375,     0,
       8,   154,   155,     0,   156,     0,     0,     0,   157,   158,
       0,     0,     0,   159,     0,     0,  -375,  -790,  -375,     0,
       9,     0,   160,   161,     0,   162,     0,     0,  1337,  1338,
       0,  -790,  -790,  -790,  -790,  -790,  -790,     0,     0,   342,
       0,     0,  -790,     0,     0,  -790,  -790,     0,  -790,     0,
    1031,  1032,     0,   342,     0,     0,  1033,     0,     0,     0,
       0,     0,     0,     0,   342,     0,  1034,     0,  1590,     0,
    1530,     0,   152,   153,     0,     0,     0,     8,   154,   155,
     342,   156,     0,   431,     0,   157,   158,     0,     0,  -790,
     159,   342,   342,  -790,     0,   342,     0,     9,     0,   160,
     161,     0,   162,     0,     0,     0,     0,     0,     0,     0,
    1408,  -790,     0,     1,     0,     0,     0,     0,     0,     0,
     163,   164,     0,     0,   152,   153,     0,     0,   697,     8,
     154,   155,     0,   156,     0,  1435,  1435,   157,   158,     0,
       0,     0,   159,   342,     0,     0,     0,     0,     0,     9,
       0,   160,   161,     0,   162,   152,   153,     0,     0,     0,
       8,   154,   155,     0,   156,     0,     0,     0,   157,   158,
       0,     0,     0,   159,  1153,     0,     0,     0,     0,     0,
       9,     0,   160,   161,     0,   162,   152,   153,     0,     0,
       0,     8,   154,   155,     0,   156,  1269,   163,   164,   157,
     158,     0,     0,     0,   159,     0,     0,     0,     0,     0,
       0,     9,     0,   160,   161,     0,   162,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1087,     0,     0,   152,   153,     0,     0,     0,     8,   154,
     155,     0,   156,     0,     0,     0,   157,   158,     0,   163,
     164,   159,     0,     0,     0,   342,     0,     0,     9,     0,
     160,   161,     0,   162,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   528,  1534,  1535,     0,     0,     0,     0,
     163,   164,     0,     0,     0,     0,     0,  1541,   152,   153,
    1542,   342,  1544,     8,   154,   155,     0,   156,  1548,     0,
       0,   157,   158,     0,     0,     0,   159,     0,  1530,     0,
       0,   163,   164,     9,     0,   160,   161,     0,   162,     0,
       0,     0,   342,   342,     0,     0,     0,     0,     0,  1435,
       0,  1435,     0,  1572,     0,  1576,  1435,  1435,  1435,     0,
    1435,  1435,  1435,  1435,     0,     0,     0,   152,   153,     0,
       0,   528,     8,   154,   155,     0,   202,     0,   163,   164,
     157,   158,     0,     0,     0,   159,     0,     0,     0,     0,
       0,     0,     9,     0,   160,   161,     0,   162,     0,     0,
       0,     0,     0,     0,  1612,     0,  1612,     0,     0,     0,
       0,     0,     0,   342,     0,     0,  1497,     0,   152,   153,
       0,  1500,     0,     8,   154,   155,     0,  1191,     0,     0,
       0,   157,   158,   163,   164,     0,   159,  1645,     0,     0,
     342,     0,     0,     9,     0,   160,   161,     0,   162,     0,
       0,     0,     0,  1612,     0,  1612,     0,  1576,     0,  1576,
    1576,     0,  1576,     0,  1576,     0,  1576,  1435,     0,     0,
    1576,     0,  1576,     0,  1576,  1435,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   163,   164,     0,   152,   153,     0,     0,     0,
       8,   154,   155,  1565,  1327,     0,  1567,  1500,   157,   158,
       0,   763,     0,   159,     0,     0,     0,     0,     0,     0,
       9,     0,   160,   161,     0,   162,   764,     0,     0,     0,
       0,     0,     0,     0,     0,  1576,     0,  1576,     0,   342,
     342,     0,  1576,   163,   164,     0,   342,   342,     0,   342,
       0,     0,     0,   342,  1247,     0,     0,   154,   155,     0,
       0,     0,     0,     0,   325,   326,   327,   328,   329,   330,
     331,   332,   333,     0,     0,   765,     0,   342,   334,   335,
       0,   342,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   766,   560,   767,   768,
     769,   770,   771,   772,   773,     0,     0,     0,     0,    28,
       0,     0,    29,     0,     0,   774,     0,   342,     8,     0,
     163,   164,     0,   775,   776,     0,     0,     0,     0,   777,
     778,   779,   780,   781,   782,   783,     0,     0,     9,     0,
       0,     0,     0,   336,   556,   557,   558,     0,     0,     0,
     342,     0,    30,    31,    32,    33,    34,    35,     0,     0,
       0,     0,     0,    36,     0,     0,    37,    38,     0,    39,
       0,     0,     0,     0,   337,   338,   339,   340,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   559,     0,   560,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   561,     0,   562,
      40,     0,   563,  1593,    41,     0,   154,   155,     0,     0,
       0,     0,     0,   325,   326,   327,   328,   329,   330,   331,
     332,   333,    42,     0,     0,     0,  1684,   334,   335,   154,
     155,     0,     0,     0,     0,     0,   325,   326,   327,   328,
     329,   330,   331,   332,   333,     0,   635,   636,   637,     0,
     334,   335,   638,   325,   326,   327,   328,   329,   330,   331,
     332,   333,     0,     0,   635,   636,   637,   334,   335,     0,
     877,   325,   326,   327,   328,   329,   330,   331,   332,   333,
       0,     0,     0,     0,     0,   334,   335,   635,   636,   637,
       0,     0,   336,   881,   325,   326,   327,   328,   329,   330,
     331,   332,   333,     0,     0,     0,     0,     0,   334,   335,
       0,     0,     0,     0,     0,   336,     0,     0,     0,     0,
       0,     0,     0,   337,   338,   339,   340,     0,     0,     0,
       0,     0,   336,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   337,   338,   339,   340,
     336,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   337,   338,   339,   340,     0,     0,     0,
       0,     0,     0,   336,     0,     0,     0,     0,     0,     0,
       0,   337,   338,   339,   340,     0,     0,   635,   636,   637,
       0,     0,     0,  1227,   325,   326,   327,   328,   329,   330,
     331,   332,   333,     0,   337,   338,   339,   340,   334,   335,
     635,   636,   637,     0,     0,     0,  1421,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   154,   155,   396,     0,
       0,   334,   335,   325,   326,   327,   328,   329,   330,   331,
     332,   333,     0,     0,   764,   154,   155,   334,   335,     0,
       0,     0,   325,   326,   327,   328,   329,   330,   331,   332,
     333,     0,     0,     0,     0,     0,   334,   335,     0,   513,
     154,   155,   718,   336,     0,     0,     0,   325,   326,   327,
     328,   329,   330,   331,   332,   333,     0,     0,     0,     0,
       0,   334,   335,   765,     0,     0,   336,     0,     0,     0,
       0,     0,     0,     0,   337,   338,   339,   340,     0,     0,
       0,     0,   336,     0,  1009,   560,   767,   768,   769,   770,
     771,   772,   773,     0,     0,     0,     0,   337,   338,   339,
     340,   336,     0,   774,     0,     0,     0,     0,     0,     0,
       0,   775,   776,   337,   338,   339,   340,   777,   778,   779,
     780,   781,   782,   783,     0,     0,   336,     0,     0,   154,
     155,   870,   337,   338,   339,   340,   325,   326,   327,   328,
     329,   330,   331,   332,   333,     0,     0,     0,     0,     0,
     334,   335,     0,     0,   635,   636,   637,   337,   338,   339,
     340,   325,   326,   327,   328,   329,   330,   331,   332,   333,
       0,   154,   155,     0,     0,   334,   335,   881,   325,   326,
     327,   328,   329,   330,   331,   332,   333,     0,     0,     0,
     154,   155,   334,   335,   892,     0,     0,   325,   326,   327,
     328,   329,   330,   331,   332,   333,     0,     0,     0,   154,
     155,   334,   335,   893,     0,   336,   325,   326,   327,   328,
     329,   330,   331,   332,   333,     0,     0,     0,     0,     0,
     334,   335,     0,     0,     0,     0,     0,     0,     0,     0,
     336,     0,     0,     0,     0,     0,   337,   338,   339,   340,
       0,     0,     0,     0,     0,     0,     0,   336,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   337,   338,   339,   340,     0,   336,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   337,   338,
     339,   340,     0,     0,     0,   336,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   337,   338,   339,
     340,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   337,   338,   339,   340,
     154,   155,     0,     0,   894,     0,     0,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   154,   155,     0,     0,
     895,   334,   335,   325,   326,   327,   328,   329,   330,   331,
     332,   333,     0,     0,     0,   154,   155,   334,   335,   896,
       0,     0,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   154,   155,     0,     0,   899,   334,   335,   325,   326,
     327,   328,   329,   330,   331,   332,   333,     0,     0,     0,
     154,   155,   334,   335,   900,     0,     0,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   336,     0,     0,     0,
       0,   334,   335,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   336,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   337,   338,   339,
     340,   336,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   337,   338,   339,   340,   336,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   337,   338,   339,   340,   336,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   337,   338,
     339,   340,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   337,   338,   339,
     340,   154,   155,     0,     0,  1307,     0,     0,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   154,   155,     0,
       0,  1389,   334,   335,   325,   326,   327,   328,   329,   330,
     331,   332,   333,     0,     0,     0,   154,   155,   334,   335,
    1452,     0,     0,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   154,   155,     0,     0,  1453,   334,   335,   325,
     326,   327,   328,   329,   330,   331,   332,   333,     0,     0,
       0,   154,   155,   334,   335,  1595,     0,     0,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   336,     0,     0,
       0,     0,   334,   335,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   336,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   337,   338,
     339,   340,   336,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   337,   338,   339,   340,   336,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   337,   338,   339,   340,   336,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   337,
     338,   339,   340,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   337,   338,
     339,   340,   154,   155,     0,     0,  1596,     0,     0,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   154,   155,
       0,     0,  1598,   334,   335,   325,   326,   327,   328,   329,
     330,   331,   332,   333,     0,     0,     0,     0,     0,   334,
     335,   154,   155,     0,     0,     0,     0,     0,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   154,   155,     0,
       0,     0,   334,   335,   325,   326,   327,   328,   329,   330,
     331,   332,   333,     0,     0,     0,     0,     0,   334,   335,
       0,     0,     0,     0,     0,     0,     0,     0,   336,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   336,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   337,
     338,   339,   340,     0,     0,     0,  1620,   336,     8,     0,
     253,     0,     0,     0,     0,   337,   338,   339,   340,     0,
       0,     0,     0,   336,     0,   254,     0,   255,     9,     0,
       0,     0,     0,   113,   556,   592,   593,     0,   337,   338,
     339,   340,   905,    31,    32,    33,   256,     0,     0,     0,
       0,     0,     0,     0,   337,   338,   339,   340,     0,     0,
       0,   257,   258,   259,   260,   261,   262,   263,     0,   264,
     265,   266,   267,   268,   269,     0,     8,   270,   253,   271,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   254,     0,   255,     9,   594,     0,   562,
      40,   113,   556,     0,     0,     0,     0,     0,     0,     0,
     905,    31,    32,    33,   256,     0,     0,     0,     0,     0,
       0,     0,    42,     0,     0,     0,     0,     0,     0,   257,
     258,   259,   260,   261,   262,   263,     0,   264,   265,   266,
     267,   268,   269,     0,     8,   270,   253,   271,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   254,     0,   255,     9,     0,     0,   562,    40,   113,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   256,     0,     0,     0,     0,     0,     0,     0,
      42,     0,     0,     0,     0,     0,     0,   257,   258,   259,
     260,   261,   262,   263,     0,   264,   265,   266,   267,   268,
     269,     0,     0,   270,     0,   271
};

/* YYCONFLP[YYPACT[STATE-NUM]] -- Pointer into YYCONFL of start of
   list of conflicting reductions corresponding to action entry for
   state STATE-NUM in yytable.  0 means no conflicts.  The list in
   yyconfl is terminated by a rule number of 0.  */
static const unsigned char yyconflp[] =
{
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0
};

/* YYCONFL[I] -- lists of conflicting rule numbers, each terminated by
   0, pointed into by YYCONFLP.  */
static const short int yyconfl[] =
{
       0
};

static const short int yycheck[] =
{
       0,   482,    34,     3,     4,   453,   433,   106,   243,   228,
      88,   674,   783,   556,     0,   234,   162,   349,  1034,   562,
    1114,   776,   777,   778,   196,   822,    96,    34,   361,    99,
     265,   575,    34,   495,   576,    82,   202,  1191,   764,   463,
     464,   584,   361,    87,   744,   341,  1262,  1262,  1262,   775,
     776,   777,   778,     6,     6,     6,     6,   556,   482,     6,
     606,   113,   482,   562,    36,    72,   612,   613,   606,   764,
     834,   169,  1395,   478,   612,   613,   558,  1400,   156,   561,
      87,     0,   114,   115,     1,   132,    40,    89,    29,   421,
     422,   892,    15,   172,   126,    62,    17,  1121,   899,  1099,
      12,   114,   115,    10,     1,    10,    26,   114,   115,   142,
      15,     0,   114,    89,    90,    12,   123,    15,    19,   126,
      32,   749,  1398,     3,   202,    10,    36,   376,  1316,    12,
      72,   380,   381,    16,   141,    32,    84,   989,   990,    11,
     142,   993,   994,    26,    16,    99,    18,   101,    12,    32,
     197,   198,     8,    10,  1006,   127,    12,    13,    14,    10,
      16,    84,   206,   583,  1487,   129,    36,  1490,    32,    10,
    1493,   215,    62,  1327,    12,    16,    32,    98,    98,     1,
     128,    37,    46,   183,   184,   139,   128,   668,    98,   817,
     109,   110,    10,   112,    32,     6,    15,    98,   530,   206,
      98,    23,   348,   100,   685,   128,    17,   239,   215,   128,
     127,   243,    10,    98,    65,    66,   128,   389,   390,  1495,
      71,   128,   102,   128,   256,   295,   239,   523,    98,    10,
      81,   207,   239,   265,   266,   267,   243,  1034,   128,  1036,
    1264,    98,    22,  1267,   668,   128,   392,    10,   346,   256,
     674,  1251,    15,  1469,  1469,  1469,   128,   983,   265,   266,
     267,   685,   341,   101,   597,   685,   220,   600,   601,   602,
     603,   212,   128,   317,   307,   680,  1370,   128,   597,    98,
      98,  1007,   601,    10,   603,  1608,  1087,    98,   983,   261,
      10,    10,  1056,  1387,    10,  1449,    62,    10,   305,    10,
      98,    10,    65,    66,    10,    98,   278,    84,    71,     1,
     317,    18,  1007,    17,   314,    22,   862,    98,    81,   418,
      12,  1509,    10,  1511,   573,   372,  1342,   865,  1516,  1517,
    1518,    10,  1520,  1521,  1522,  1523,   129,   965,   966,   967,
      32,   823,   824,   172,   311,   312,   492,   354,    10,   598,
     599,   128,     1,    10,    62,    10,   400,   357,   402,     1,
     438,   361,   128,    12,    17,   128,     8,   513,   420,    18,
      12,    98,    18,    10,    16,    10,   376,   377,    98,    98,
     380,   381,    98,    32,    26,   531,   388,    98,  1482,    98,
      10,    10,    98,   400,    98,   402,  1151,    16,  1026,  1027,
    1028,    47,    48,    95,    96,    97,   905,    10,   627,   238,
      98,    12,   365,   365,   365,   365,  1213,    18,   365,    98,
     128,   453,   718,    62,  1150,  1151,   433,  1643,  1643,  1643,
      10,    32,  1586,    10,   915,  1236,  1237,  1137,  1239,  1627,
      10,    98,  1243,    98,    11,    98,   453,  1635,   929,  1112,
     616,  1545,    18,   102,    17,    22,    22,    99,   104,  1311,
      17,    98,  1314,    98,   464,  1317,  1318,  1319,  1320,  1321,
    1322,  1323,  1324,    17,   936,    10,    17,   623,    98,     3,
     126,     8,   482,   483,    10,    12,   556,   557,    12,   128,
     560,   915,   562,   826,    18,    98,   468,   101,    10,    26,
     832,   102,  1596,    10,  1598,  1049,  1600,   826,    32,  1051,
       3,   558,    10,    37,   561,   848,   849,  1145,    98,    12,
    1566,    98,    46,    17,   128,    18,  1680,   534,    98,   848,
     849,   538,   539,     1,    17,    98,  1307,   584,   616,    32,
       8,    98,  1297,     8,    12,  1342,    17,    12,    16,    72,
      15,    16,    10,    46,    98,    17,     8,    98,    26,    39,
      12,    26,    10,    98,    16,   711,    46,  1613,  1722,  1615,
    1113,  1297,    99,   573,    26,    84,  1302,   621,   102,  1207,
    1734,     1,    10,   583,   584,  1739,    98,  1741,    12,  1743,
     762,  1745,    12,  1747,    18,  1749,    10,   597,   598,   599,
      98,   601,    84,   603,    98,   128,     1,    59,    32,   102,
     612,   613,    32,     8,   621,    98,    11,    12,     1,   128,
      98,   101,    17,    47,   102,     8,     1,    98,    11,    12,
    1724,    99,  1059,  1114,    99,    17,    98,    32,   102,   671,
      98,    16,    37,   815,    39,    40,   128,    99,    10,    32,
      98,    17,    10,    10,    37,     1,    39,    40,   690,    10,
    1457,     8,    10,  1418,   671,    12,    12,   839,   668,    16,
      98,    10,    18,    10,   674,    95,    96,    97,   102,    26,
     104,    10,   752,   690,    98,   685,    32,   757,  1112,  1415,
    1445,     8,  1418,  1419,   666,    12,    18,    17,   670,    10,
      17,    47,    48,    44,    45,    10,   101,   707,   708,    26,
      10,  1374,    59,  1729,   761,     1,    98,   689,   101,  1445,
    1446,     7,     8,   730,  1387,    16,    12,    13,    14,   736,
      16,    10,    98,   128,    20,    21,    98,    17,    10,    25,
      98,    98,   749,    10,   744,   128,    32,    98,    34,    35,
     820,    37,    99,     1,   100,     1,   102,    10,   104,    98,
      17,    98,    17,    17,    12,    10,    12,   814,    16,    98,
      18,    36,    18,  1254,     1,    10,   823,   824,    98,    18,
     126,    29,    99,    12,    32,    12,    32,    98,   835,    17,
      84,    18,   870,    98,    13,    14,    44,    45,    98,  1247,
      46,    47,    48,    32,   976,    32,  1233,    26,    47,     8,
     817,  1046,    98,    12,    17,    14,    13,    14,    98,    98,
      47,    48,   822,    17,    17,  1157,   826,    26,    84,    26,
    1254,    98,    17,    98,   128,   905,   822,    17,    17,    10,
      17,    98,  1385,    98,    98,    98,   132,   133,   848,   849,
    1022,    38,    17,    98,   102,    17,   102,    98,   104,    46,
      47,    48,    49,   102,    17,   104,    95,    96,    17,    10,
      98,  1043,   128,  1045,    17,   102,    10,   104,     1,    98,
     126,    17,  1545,  1055,     7,     8,    17,    17,    11,    12,
      13,    14,    98,    16,    17,    98,    17,    20,    21,   126,
      99,    98,    25,    17,    98,    98,    17,    17,    17,    32,
      36,    34,    35,    98,    37,   915,   103,   104,    98,    98,
     892,    98,    57,    58,   896,  1352,    17,   899,   900,   929,
     930,   903,  1729,    98,    17,    10,    98,    17,  1735,   126,
     947,    16,     1,  1021,   916,    98,    17,     6,    18,    98,
    1374,    39,    40,   925,   954,    98,   956,    16,   965,   966,
     967,    98,    98,    65,    66,    22,    29,    98,    98,    71,
      29,    34,    98,    32,    33,    34,  1046,    98,    12,    81,
      84,    40,    41,    11,    98,    72,    11,    98,    98,    98,
      15,     1,   129,   128,  1475,  1042,    36,  1044,    32,    62,
      18,  1482,    12,    62,  1103,   128,    65,    98,    18,   132,
     133,    22,    23,   101,  1046,    98,    75,    76,    98,  1026,
    1027,  1028,    32,  1471,   128,    10,   128,    98,    87,    84,
      89,    90,  1102,  1252,  1034,    84,  1036,    47,    48,  1046,
      99,   128,   101,    52,  1216,    54,  1218,    56,  1034,    22,
    1036,  1475,  1059,    26,   113,   114,   115,  1229,    98,     1,
      22,   128,    24,     7,     8,  1530,  1113,   126,    12,    13,
      14,   130,    16,   128,    16,    12,    20,    21,    47,    48,
     139,    25,   141,   142,     7,    29,  1258,    31,    32,    12,
      34,    35,   102,    37,   104,    32,    46,    47,    48,     1,
     109,   110,    39,   112,    65,    66,     1,    62,    10,    32,
      71,  1130,  1112,  1191,  1114,  1087,   126,  1136,  1599,   128,
      81,    16,  1587,  1588,    20,    21,    70,  1592,     1,    98,
    1130,     1,  1104,   102,    82,   104,  1136,  1137,  1145,    12,
      12,     1,    12,    64,     4,     5,   107,   206,   207,    17,
    1220,    19,   102,   212,   104,   214,   215,   126,    12,    32,
      32,   220,    32,   111,    18,    37,   225,   128,    10,   117,
     118,    65,    66,   232,   233,  1599,   126,    71,    32,     1,
     239,    41,    42,    43,   243,    10,   245,    81,   132,   133,
      84,     1,    10,  1365,    16,    84,   255,   256,    65,    66,
    1207,    12,    12,     1,    71,    16,   265,   266,   267,   268,
    1257,    98,    10,  1213,    81,  1247,  1617,    84,  1619,  1620,
       8,    32,    32,  1624,    12,  1626,  1233,  1213,     1,  1630,
    1262,  1632,    10,  1634,   128,  1313,  1684,    10,    16,     1,
    1247,   300,     4,     5,    32,    16,   305,    29,   307,  1327,
      12,    29,   311,   312,  1254,  1262,     1,   316,   317,     4,
       5,   128,    10,    11,  1236,  1237,     1,  1239,    16,    16,
      32,  1243,     7,     8,    24,    37,    11,    12,    13,    14,
      11,    16,    82,  1255,   343,    20,    21,    18,    22,    23,
      25,    22,     1,     1,  1695,     8,  1697,    32,   357,    34,
      35,  1702,    37,    12,    12,     1,   365,  1453,  1480,   368,
      18,   111,   887,    16,   889,     1,    12,   117,   118,    10,
      16,     7,     8,    32,    32,    10,    12,    13,    14,   388,
      16,   115,   116,    29,    20,    21,    32,    17,  1385,    25,
      98,   400,  1342,   402,     1,  1352,    32,     1,    34,    35,
      17,    37,  1430,     7,     8,    12,  1342,     1,    12,    13,
      14,   420,    16,    13,    14,    98,    20,    21,    12,    12,
    1370,    25,    17,    16,  1374,    32,   435,  1549,    32,    17,
      34,    35,    16,    37,     1,  1531,    29,  1387,    32,    32,
    1362,    18,     1,     1,   453,    12,    82,   132,   133,     7,
       8,    12,   461,    12,    12,    13,    14,   466,    16,   542,
     543,     1,    20,    21,     1,    32,    18,    25,    29,    24,
       1,    32,    12,    32,    32,    12,    34,    35,    16,    37,
     489,    12,  1479,    16,    65,    66,    16,  1469,     1,  1471,
      71,  1519,    32,     1,     8,    32,   132,   133,    12,    12,
      81,    32,  1452,    84,    12,  1088,     1,  1457,  1091,  1092,
      16,    10,  1469,    12,  1471,    16,  1452,    12,    16,    32,
      10,  1457,    39,    40,    32,  1475,   593,   594,   132,   133,
      47,    48,  1482,    32,    98,     8,    16,    32,    11,    12,
    1462,    13,    14,     7,     8,    17,    17,   128,    12,    13,
      14,   560,    16,    10,  1476,    22,    20,    21,    26,    32,
      22,    25,    26,    18,    37,     8,   575,   576,    32,    12,
      34,    35,     8,    37,   132,   133,    12,    16,   587,    12,
    1530,    17,   591,    16,   101,   102,    12,   104,    12,    52,
      16,    54,    16,    56,  1530,  1545,    32,   606,     8,    32,
    1628,    37,    12,   612,   613,    29,    32,   111,    32,   126,
       8,   128,   621,    37,    12,    13,    14,    10,    16,    13,
      14,    12,    32,    17,  1546,    16,    10,    37,    84,    85,
      53,    95,    96,    98,    32,   894,   895,  1587,  1588,    37,
      17,    32,  1592,    12,     1,  1595,  1596,    16,  1598,  1599,
    1600,  1587,  1588,    12,    10,    12,  1592,    14,    15,    17,
      29,  1643,   671,    32,  1014,  1015,    10,    12,   132,   133,
      29,    16,    29,    32,    31,    32,    10,     5,    37,     4,
      37,   690,   109,   110,    98,   112,  1643,    32,   697,    16,
      19,  1314,    15,    50,  1317,  1318,    15,    17,  1321,  1322,
    1323,   128,  1684,    10,    22,    80,    80,    72,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    84,    22,    81,  1647,    83,  1684,    17,    17,
       8,    98,  1682,   742,    12,   744,   745,    98,    16,    22,
      24,    23,    22,    98,     3,   988,   755,     6,   991,   992,
      10,   129,    12,    12,    19,   764,    10,    98,    39,    17,
    1003,  1004,  1005,   116,    10,    98,   775,   776,   777,   778,
      18,   128,    32,    32,  1724,    46,    98,    37,     3,  1729,
      17,    98,    38,    17,    10,  1735,    98,    46,    47,    48,
      49,    50,    51,  1729,    17,    19,    15,    15,    57,  1735,
      10,    60,    61,   812,    63,    65,    66,    67,    68,    69,
      70,    71,    17,    17,    17,    10,   825,    77,    78,    72,
      16,    81,   831,     0,     1,    17,     3,   836,    10,     6,
       7,     8,    17,    17,    98,    12,    13,    14,    10,    16,
      19,    98,    10,    20,    21,   104,    10,    10,    25,   108,
     859,    10,    10,   862,    10,    32,   865,    34,    35,    10,
      37,    38,    39,    40,    10,    86,    16,   126,    16,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    16,    56,
      57,    16,    16,    60,    61,    16,    63,    16,    65,    66,
      16,    16,    16,    16,    71,    16,   905,    16,    10,    10,
      22,    10,    79,    80,    81,    82,    22,    84,    85,    22,
      87,    10,    22,    10,   107,    16,    10,    10,    10,    17,
      10,    10,    17,    19,   101,    10,   103,   104,    19,   106,
     107,   108,   109,   110,    12,   112,    10,    16,    11,   101,
      22,    98,    18,    98,    10,    98,    10,    10,    36,   126,
      10,   128,   961,    10,    32,   132,   133,    10,    10,    37,
      38,    16,    16,    19,   973,    16,    38,    10,    46,    47,
      48,    49,    22,    79,   983,    79,    10,   986,    80,   988,
     989,   990,   991,   992,   993,   994,    31,    65,    66,    67,
      68,    69,    70,    71,  1003,  1004,  1005,  1006,  1007,    77,
      78,   101,   110,    81,    22,    24,    22,    24,    18,    22,
    1019,    98,    98,     1,   134,     3,    19,    98,     6,    17,
      10,    98,    64,    98,    12,   103,   104,    98,    98,    98,
      98,    98,    10,    98,    55,    84,    98,  1046,    58,    98,
    1049,    55,  1051,    17,    32,    24,    19,    24,   126,  1058,
      38,    39,    40,    24,    24,    16,    24,    24,    46,    47,
      48,    49,    50,    51,    17,    53,    98,    67,    10,    57,
      22,    17,    60,    61,    22,    63,   134,    16,    16,    16,
      16,    10,    10,    59,    16,     8,    98,    22,     8,    98,
    1099,    98,    98,    98,    98,    84,    98,    85,    64,    87,
      59,    98,    98,    98,    15,    15,    10,    10,    17,    17,
      79,    17,    10,   101,    64,   103,   104,    10,   106,    10,
     108,    17,     1,    15,    10,    81,    15,    17,  1137,  1138,
    1139,    15,    17,    12,    98,    14,    15,    17,   126,  1148,
     128,  1150,  1151,    98,    98,    10,    10,    10,    10,    10,
      29,    10,    31,    32,    10,    10,    10,  1166,    37,    17,
      79,    10,   162,    10,    17,    17,    17,    10,    10,    10,
      10,    50,    10,    10,    10,   543,    10,    10,    17,    10,
      98,    10,    10,    15,    98,    98,    65,    66,    67,    68,
      69,    70,    71,  1202,    73,    74,    75,    76,    77,    78,
      17,  1210,    81,  1212,    83,    84,   730,     4,  1217,   540,
    1219,  1220,   831,   365,   186,    98,   216,    98,   365,  1228,
       1,    98,     3,    98,   186,     6,   226,   227,   365,    33,
    1046,    12,   225,   812,    15,   859,  1019,    39,  1247,  1114,
     685,  1250,  1251,   483,   244,   584,   246,  1250,   935,   128,
    1259,    32,  1593,  1262,   214,   212,  1265,   707,  1531,   708,
     956,  1400,  1136,  1272,   311,    46,    47,    48,    49,    50,
      51,  1280,   312,   357,  1283,  1284,    57,  1608,  1404,    60,
      61,   316,    63,  1682,    65,    66,  1295,  1094,  1297,   785,
      71,  1307,  1191,  1302,  1419,  1622,   990,  1508,  1166,  1430,
      81,   637,  1311,   420,   879,  1314,   343,    65,  1317,  1318,
    1319,  1320,  1321,  1322,  1323,  1324,   626,     9,    -1,    -1,
      -1,    -1,  1331,   104,    -1,    -1,    -1,   108,    -1,    -1,
      -1,    -1,    -1,   168,   169,  1344,   336,  1346,    -1,    -1,
      -1,    -1,  1351,    -1,    -1,   126,    -1,   128,   348,   349,
      -1,    -1,    -1,    -1,     7,     8,    -1,  1366,    -1,    12,
      13,    14,    -1,    16,    -1,    -1,    -1,    20,    21,   204,
      -1,    -1,    25,    -1,    -1,    -1,    -1,    -1,    -1,    32,
      -1,    34,    35,    -1,    37,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   392,    -1,    -1,    -1,   396,    -1,     7,     8,
      -1,    -1,    -1,    12,    13,    14,  1415,    16,    -1,  1418,
    1419,    20,    21,    -1,    -1,    -1,    25,    -1,    -1,    -1,
      -1,   421,   422,    32,    -1,    34,    35,    -1,    37,    -1,
      -1,   431,    -1,    -1,   434,    -1,  1445,  1446,    -1,   439,
      -1,    -1,    95,    96,    -1,   445,   446,    -1,   448,    -1,
     450,    -1,   452,    -1,   454,    -1,  1465,    -1,    -1,   459,
    1469,    -1,  1471,    -1,  1473,    -1,    -1,    -1,    -1,    -1,
      -1,    80,  1481,    82,    -1,    -1,    -1,    -1,   478,   132,
     133,   481,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   324,
      -1,    -1,   492,    -1,    -1,   495,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   507,    -1,    -1,
      -1,   346,   512,   513,     1,    -1,     3,    -1,    -1,     6,
      -1,    -1,    -1,   132,   133,    12,    -1,    -1,    -1,    -1,
     530,   531,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1550,    -1,    -1,    -1,    32,    -1,    -1,    -1,    -1,
      -1,    38,    39,    40,    -1,    -1,    -1,    -1,    -1,    46,
      47,    48,    49,    50,    51,    -1,    -1,    -1,    -1,    -1,
      57,    -1,   407,    60,    61,    -1,    63,    -1,    -1,   414,
     415,    -1,    -1,    -1,  1593,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   427,    -1,  1603,   430,    -1,    -1,    85,    -1,
      87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   101,    -1,   103,   104,    -1,   106,
      -1,   108,    -1,   623,   624,    -1,   626,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1643,    -1,    -1,   637,    -1,   126,
      -1,   128,    -1,    -1,    -1,   645,   646,    -1,    -1,    -1,
       1,   651,     3,    -1,    -1,     6,    -1,    -1,    -1,    -1,
      -1,    12,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1684,    -1,    -1,   678,    -1,
     680,    32,    -1,    -1,    -1,    -1,   521,    38,    39,    40,
      -1,    -1,    -1,   528,    -1,    46,    47,    48,    49,    50,
      51,    -1,    -1,    -1,    -1,    12,    57,    -1,    -1,    60,
      61,   711,    63,    -1,  1723,     7,     8,    -1,    -1,    -1,
      12,    13,    14,    -1,    16,    32,    -1,    -1,    20,    21,
      37,    -1,    -1,    25,    85,    -1,    87,    -1,    -1,    -1,
      32,    -1,    34,    35,    -1,    37,    -1,    -1,    -1,    -1,
     101,    -1,   103,   104,    -1,   106,    -1,   108,    65,    66,
      67,    68,    69,    70,    71,    -1,    -1,    -1,    -1,    -1,
      77,    78,    -1,    -1,    81,   126,    -1,   128,    -1,    -1,
       7,     8,   617,    -1,    -1,    12,    13,    14,    80,    16,
      82,    -1,    -1,    20,    21,   630,    -1,   632,    25,    -1,
      -1,    -1,    -1,    -1,   639,    32,   641,    34,    35,    -1,
      37,    -1,    -1,    -1,   649,    -1,    -1,    -1,   653,   654,
      -1,   656,    -1,   658,   659,    -1,   661,    -1,   663,     7,
       8,    -1,   832,    -1,    12,    13,    14,    -1,    16,    -1,
     132,   133,    20,    21,   679,    -1,    -1,    25,    -1,   684,
      -1,    -1,    -1,    80,    32,    82,    34,    35,    -1,    37,
      -1,   861,    -1,    -1,    -1,     1,    -1,     3,   703,    -1,
       6,    -1,    -1,    -1,    -1,   710,    12,   712,   878,   879,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   887,    -1,   889,
     725,    -1,    -1,   893,   894,   895,    32,    -1,   898,    -1,
      -1,    -1,    38,    39,    40,   132,   133,    -1,    -1,    -1,
      46,    47,    48,    49,    50,    51,    -1,   917,    -1,   919,
      -1,    57,    -1,   923,    60,    61,    -1,    63,    -1,    -1,
      -1,    -1,    -1,     1,    -1,   935,    -1,    -1,    -1,   939,
      -1,    -1,    10,    -1,    12,    -1,    14,    -1,    -1,    85,
     128,    87,    -1,    -1,   132,   133,    -1,    -1,    -1,    -1,
      -1,    29,    -1,    31,    32,   101,    -1,   103,   104,    37,
     106,    -1,   108,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    50,    -1,    -1,   985,    -1,    -1,    -1,    -1,
     126,    -1,   128,    -1,    -1,    -1,    -1,    65,    66,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      78,    -1,    -1,    81,    -1,    83,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     1,    -1,    -1,    -1,    -1,    -1,    -1,   873,    -1,
      -1,    -1,    12,    -1,    14,    -1,    -1,    -1,    -1,    -1,
     885,   886,    -1,    -1,    -1,   890,    -1,    -1,    -1,    29,
     128,    31,    32,    -1,    -1,    -1,    -1,    37,    -1,    -1,
      -1,     1,    -1,     3,    -1,    -1,     6,    -1,    -1,    -1,
      50,    -1,    12,   918,    -1,   920,    -1,    -1,  1088,    -1,
      -1,  1091,  1092,    -1,    -1,    65,    66,    67,    68,    69,
      70,    71,    32,    73,    74,    75,    76,    77,    78,    -1,
      -1,    81,    -1,    83,    -1,    -1,    46,    47,    48,    49,
      50,    51,    -1,  1123,    -1,    -1,    -1,    57,    -1,    -1,
      60,    61,    -1,    63,    -1,    65,    66,    -1,    -1,    -1,
      -1,    71,    -1,    -1,    -1,    -1,   981,    -1,    -1,    -1,
      -1,    81,    -1,    -1,    -1,    -1,    -1,  1157,   128,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,     3,    -1,
      -1,     6,    -1,    -1,   104,     7,     8,    12,   108,    -1,
      12,    13,    14,    -1,    16,    -1,    -1,    -1,    20,    21,
      -1,    -1,    -1,    25,    -1,    -1,   126,    32,   128,    -1,
      32,    -1,    34,    35,    -1,    37,    -1,    -1,  1208,  1209,
      -1,    46,    47,    48,    49,    50,    51,    -1,    -1,  1054,
      -1,    -1,    57,    -1,    -1,    60,    61,    -1,    63,    -1,
      65,    66,    -1,  1068,    -1,    -1,    71,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1079,    -1,    81,    -1,    80,    -1,
      82,    -1,     7,     8,    -1,    -1,    -1,    12,    13,    14,
    1095,    16,    -1,    18,    -1,    20,    21,    -1,    -1,   104,
      25,  1106,  1107,   108,    -1,  1110,    -1,    32,    -1,    34,
      35,    -1,    37,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1290,   126,    -1,   128,    -1,    -1,    -1,    -1,    -1,    -1,
     132,   133,    -1,    -1,     7,     8,    -1,    -1,    11,    12,
      13,    14,    -1,    16,    -1,  1315,  1316,    20,    21,    -1,
      -1,    -1,    25,  1158,    -1,    -1,    -1,    -1,    -1,    32,
      -1,    34,    35,    -1,    37,     7,     8,    -1,    -1,    -1,
      12,    13,    14,    -1,    16,    -1,    -1,    -1,    20,    21,
      -1,    -1,    -1,    25,  1189,    -1,    -1,    -1,    -1,    -1,
      32,    -1,    34,    35,    -1,    37,     7,     8,    -1,    -1,
      -1,    12,    13,    14,    -1,    16,    17,   132,   133,    20,
      21,    -1,    -1,    -1,    25,    -1,    -1,    -1,    -1,    -1,
      -1,    32,    -1,    34,    35,    -1,    37,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      82,    -1,    -1,     7,     8,    -1,    -1,    -1,    12,    13,
      14,    -1,    16,    -1,    -1,    -1,    20,    21,    -1,   132,
     133,    25,    -1,    -1,    -1,  1270,    -1,    -1,    32,    -1,
      34,    35,    -1,    37,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1453,  1454,  1455,    -1,    -1,    -1,    -1,
     132,   133,    -1,    -1,    -1,    -1,    -1,  1467,     7,     8,
    1470,  1306,  1472,    12,    13,    14,    -1,    16,  1478,    -1,
      -1,    20,    21,    -1,    -1,    -1,    25,    -1,    82,    -1,
      -1,   132,   133,    32,    -1,    34,    35,    -1,    37,    -1,
      -1,    -1,  1337,  1338,    -1,    -1,    -1,    -1,    -1,  1509,
      -1,  1511,    -1,  1513,    -1,  1515,  1516,  1517,  1518,    -1,
    1520,  1521,  1522,  1523,    -1,    -1,    -1,     7,     8,    -1,
      -1,  1531,    12,    13,    14,    -1,    16,    -1,   132,   133,
      20,    21,    -1,    -1,    -1,    25,    -1,    -1,    -1,    -1,
      -1,    -1,    32,    -1,    34,    35,    -1,    37,    -1,    -1,
      -1,    -1,    -1,    -1,  1564,    -1,  1566,    -1,    -1,    -1,
      -1,    -1,    -1,  1408,    -1,    -1,  1411,    -1,     7,     8,
      -1,  1416,    -1,    12,    13,    14,    -1,    16,    -1,    -1,
      -1,    20,    21,   132,   133,    -1,    25,  1597,    -1,    -1,
    1435,    -1,    -1,    32,    -1,    34,    35,    -1,    37,    -1,
      -1,    -1,    -1,  1613,    -1,  1615,    -1,  1617,    -1,  1619,
    1620,    -1,  1622,    -1,  1624,    -1,  1626,  1627,    -1,    -1,
    1630,    -1,  1632,    -1,  1634,  1635,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   132,   133,    -1,     7,     8,    -1,    -1,    -1,
      12,    13,    14,  1498,    16,    -1,  1501,  1502,    20,    21,
      -1,     1,    -1,    25,    -1,    -1,    -1,    -1,    -1,    -1,
      32,    -1,    34,    35,    -1,    37,    16,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1695,    -1,  1697,    -1,  1534,
    1535,    -1,  1702,   132,   133,    -1,  1541,  1542,    -1,  1544,
      -1,    -1,    -1,  1548,    10,    -1,    -1,    13,    14,    -1,
      -1,    -1,    -1,    -1,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    -1,    -1,    65,    -1,  1572,    34,    35,
      -1,  1576,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    -1,    -1,    -1,     3,
      -1,    -1,     6,    -1,    -1,   105,    -1,  1612,    12,    -1,
     132,   133,    -1,   113,   114,    -1,    -1,    -1,    -1,   119,
     120,   121,   122,   123,   124,   125,    -1,    -1,    32,    -1,
      -1,    -1,    -1,    99,    38,    39,    40,    -1,    -1,    -1,
    1645,    -1,    46,    47,    48,    49,    50,    51,    -1,    -1,
      -1,    -1,    -1,    57,    -1,    -1,    60,    61,    -1,    63,
      -1,    -1,    -1,    -1,   130,   131,   132,   133,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    85,    -1,    87,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,    -1,   103,
     104,    -1,   106,    10,   108,    -1,    13,    14,    -1,    -1,
      -1,    -1,    -1,    20,    21,    22,    23,    24,    25,    26,
      27,    28,   126,    -1,    -1,    -1,    10,    34,    35,    13,
      14,    -1,    -1,    -1,    -1,    -1,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    -1,    13,    14,    15,    -1,
      34,    35,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    -1,    -1,    13,    14,    15,    34,    35,    -1,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      -1,    -1,    -1,    -1,    -1,    34,    35,    13,    14,    15,
      -1,    -1,    99,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    -1,    -1,    -1,    -1,    -1,    34,    35,
      -1,    -1,    -1,    -1,    -1,    99,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   130,   131,   132,   133,    -1,    -1,    -1,
      -1,    -1,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   130,   131,   132,   133,
      99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   130,   131,   132,   133,    -1,    -1,    -1,
      -1,    -1,    -1,    99,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   130,   131,   132,   133,    -1,    -1,    13,    14,    15,
      -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    -1,   130,   131,   132,   133,    34,    35,
      13,    14,    15,    -1,    -1,    -1,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    13,    14,    15,    -1,
      -1,    34,    35,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    -1,    -1,    16,    13,    14,    34,    35,    -1,
      -1,    -1,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    -1,    -1,    -1,    -1,    -1,    34,    35,    -1,    37,
      13,    14,    15,    99,    -1,    -1,    -1,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    -1,    -1,    -1,    -1,
      -1,    34,    35,    65,    -1,    -1,    99,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   130,   131,   132,   133,    -1,    -1,
      -1,    -1,    99,    -1,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    -1,    -1,    -1,   130,   131,   132,
     133,    99,    -1,   105,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   113,   114,   130,   131,   132,   133,   119,   120,   121,
     122,   123,   124,   125,    -1,    -1,    99,    -1,    -1,    13,
      14,    15,   130,   131,   132,   133,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    -1,    -1,    -1,    -1,    -1,
      34,    35,    -1,    -1,    13,    14,    15,   130,   131,   132,
     133,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      -1,    13,    14,    -1,    -1,    34,    35,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    -1,    -1,    -1,
      13,    14,    34,    35,    17,    -1,    -1,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    -1,    -1,    -1,    13,
      14,    34,    35,    17,    -1,    99,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    -1,    -1,    -1,    -1,    -1,
      34,    35,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      99,    -1,    -1,    -1,    -1,    -1,   130,   131,   132,   133,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   130,   131,   132,   133,    -1,    99,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   130,   131,
     132,   133,    -1,    -1,    -1,    99,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   130,   131,   132,
     133,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   130,   131,   132,   133,
      13,    14,    -1,    -1,    17,    -1,    -1,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    13,    14,    -1,    -1,
      17,    34,    35,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    -1,    -1,    -1,    13,    14,    34,    35,    17,
      -1,    -1,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    13,    14,    -1,    -1,    17,    34,    35,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    -1,    -1,    -1,
      13,    14,    34,    35,    17,    -1,    -1,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    99,    -1,    -1,    -1,
      -1,    34,    35,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   130,   131,   132,
     133,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   130,   131,   132,   133,    99,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   130,   131,   132,   133,    99,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   130,   131,
     132,   133,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   130,   131,   132,
     133,    13,    14,    -1,    -1,    17,    -1,    -1,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    13,    14,    -1,
      -1,    17,    34,    35,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    -1,    -1,    -1,    13,    14,    34,    35,
      17,    -1,    -1,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    13,    14,    -1,    -1,    17,    34,    35,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    -1,    -1,
      -1,    13,    14,    34,    35,    17,    -1,    -1,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    99,    -1,    -1,
      -1,    -1,    34,    35,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    99,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   130,   131,
     132,   133,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   130,   131,   132,   133,    99,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   130,   131,   132,   133,    99,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   130,
     131,   132,   133,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   130,   131,
     132,   133,    13,    14,    -1,    -1,    17,    -1,    -1,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    13,    14,
      -1,    -1,    17,    34,    35,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    -1,    -1,    -1,    -1,    -1,    34,
      35,    13,    14,    -1,    -1,    -1,    -1,    -1,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    13,    14,    -1,
      -1,    -1,    34,    35,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    -1,    -1,    -1,    -1,    -1,    34,    35,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    99,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   130,
     131,   132,   133,    -1,    -1,    -1,    98,    99,    12,    -1,
      14,    -1,    -1,    -1,    -1,   130,   131,   132,   133,    -1,
      -1,    -1,    -1,    99,    -1,    29,    -1,    31,    32,    -1,
      -1,    -1,    -1,    37,    38,    39,    40,    -1,   130,   131,
     132,   133,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   130,   131,   132,   133,    -1,    -1,
      -1,    65,    66,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    78,    -1,    12,    81,    14,    83,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    29,    -1,    31,    32,   101,    -1,   103,
     104,    37,    38,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      66,    67,    68,    69,    70,    71,    -1,    73,    74,    75,
      76,    77,    78,    -1,    12,    81,    14,    83,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    29,    -1,    31,    32,    -1,    -1,   103,   104,    37,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     126,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      78,    -1,    -1,    81,    -1,    83
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const unsigned short int yystos[] =
{
       0,   128,   137,   138,   139,   180,   450,     1,    12,    32,
     451,   452,   454,   455,     0,   109,   110,   112,   140,   141,
     142,   144,   145,   156,   157,   310,   450,   156,     3,     6,
      46,    47,    48,    49,    50,    51,    57,    60,    61,    63,
     104,   108,   126,   181,   182,   210,   211,   212,   213,   216,
     217,   219,   220,   245,   253,   272,   279,   280,   332,   336,
     339,   340,   454,   129,   455,    98,   129,    22,    10,   146,
     454,     1,    23,    52,    54,    56,   159,   160,     1,    16,
      44,    45,   214,   215,   223,   224,     1,    16,    29,   223,
     225,   273,   274,   275,   276,   277,   454,     1,   102,   249,
       1,   221,     1,   236,   237,   239,   454,     1,   229,   230,
     231,   454,    16,    37,   223,   225,   337,   338,   428,   445,
     453,   454,     1,   183,     1,   355,   450,   341,     1,   100,
     248,     1,   248,     1,   239,     1,   232,   454,     1,   218,
       1,    16,   223,   281,   284,   291,   292,   333,   334,   335,
     454,   452,     7,     8,    13,    14,    16,    20,    21,    25,
      34,    35,    37,   132,   133,   427,   436,   437,   438,   443,
     447,   448,   453,   454,    10,    10,     7,   143,   453,   311,
     454,   158,   454,    10,    16,    29,   164,   170,   172,    10,
       1,     4,     5,    41,    42,    43,   249,   214,   214,    10,
     278,   445,    16,   228,   438,   439,    16,   225,   274,   277,
     274,    10,    98,    10,    98,    16,    18,   244,    10,   239,
     244,    10,   239,    10,    10,    98,    18,    22,   222,   243,
      10,    10,    98,    98,   222,   428,   429,   430,   454,   225,
     337,   337,    10,    98,    22,    11,    18,   432,    10,   235,
     241,   453,    84,    14,    29,    31,    50,    65,    66,    67,
      68,    69,    70,    71,    73,    74,    75,    76,    77,    78,
      81,    83,   342,   343,   344,   350,   351,   359,   360,   362,
     363,   364,   367,   368,   369,   371,   375,   376,   445,   453,
     355,    62,   254,   454,    64,   249,    10,    10,    10,    10,
      98,    10,   239,    84,   278,    16,   225,   227,   292,   333,
      29,   285,    98,   283,    16,    10,    98,    16,   244,   262,
     439,    20,    21,   435,   438,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    34,    35,    99,   130,   131,   132,
     133,   444,   447,   128,   436,   447,   449,     8,    16,    18,
     431,   432,   449,     1,   127,   147,    24,    16,     1,   161,
     162,   163,   178,   179,   180,   450,     1,    17,   171,   258,
     259,   260,   264,   450,     1,    16,    10,    16,   170,   172,
      10,    10,    17,    98,    98,    17,    17,    17,   262,   249,
     249,    17,    98,   226,   228,   439,    15,   278,   274,    10,
      16,    10,    16,   276,   277,   275,   278,   438,   441,    10,
     239,    10,   237,   433,   438,   438,   243,   454,   454,    36,
      98,    18,   432,   337,    10,    10,   338,   438,   454,   434,
     438,    18,    10,    98,    22,    24,     8,    12,    16,    16,
      26,   128,   454,   349,   445,    16,    16,     1,    16,     1,
      16,   355,    16,    16,    16,   338,   445,   445,   454,    16,
       1,    15,    84,   352,   353,     1,    15,    72,   354,   355,
       1,    10,     1,    10,    10,    10,   355,   356,    22,    23,
      10,    16,    10,    16,    47,    48,   104,   126,   244,   247,
     454,    10,    98,   333,    10,    16,   284,   292,   291,    10,
       1,    17,   293,   294,   295,   296,   297,   450,   334,   278,
      17,    36,    98,    37,    22,    22,    23,    22,    24,    26,
      22,   438,   437,   449,     1,   451,   436,   435,   438,   434,
      18,    16,   111,     1,   150,   453,    82,   111,   117,   118,
     148,   149,   151,   152,    10,   312,   313,   317,   450,   454,
      10,    53,   161,   179,     1,    10,    38,    39,    40,    85,
      87,   101,   103,   106,   184,   190,   196,   197,   200,   203,
     298,   378,    17,    10,     8,    11,    37,   173,   174,   175,
     177,   454,    17,    98,    98,    47,    48,    98,   104,   126,
     249,   267,    39,    40,   101,    17,   165,   163,    10,    10,
       1,   163,     1,   163,     5,     4,   225,   229,   233,   234,
     240,   454,   262,   262,   435,    17,    98,   438,    10,   278,
     278,    16,    17,    98,    15,    10,    15,   222,   430,   434,
     438,   434,   438,    10,    19,    13,    14,    15,    19,   438,
     241,   438,   454,   439,    26,    95,    96,   365,   366,   438,
      17,    22,     1,   438,   438,    80,   438,    80,   438,   438,
     349,   438,    10,   438,    84,   454,   354,    84,   255,   268,
     354,   450,    72,     1,   454,    72,   355,    70,   360,   438,
      22,     1,    98,   377,   438,   256,   257,   259,   268,   354,
     450,   258,   246,   454,   435,    10,     1,    11,   286,   287,
     288,   289,   290,   438,   282,    17,    17,    98,    98,   290,
     438,    98,   438,   435,    22,    23,    24,    22,    15,   437,
     129,   129,    17,    19,   434,   438,   435,    10,    10,   453,
     116,   153,   453,   453,   111,   149,   115,   153,   154,   153,
     154,    17,    98,    17,    98,    39,    10,     1,   102,   191,
     244,   267,   446,     3,    46,   205,   206,   208,   209,   244,
     446,   209,   249,     1,    16,    65,    86,    88,    89,    90,
      91,    92,    93,    94,   105,   113,   114,   119,   120,   121,
     122,   123,   124,   125,   196,   379,   380,   381,   382,   383,
     384,   385,   393,   394,   395,   399,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,     1,
     238,   242,   244,   454,   209,   249,     1,   187,   244,   267,
     446,     1,   299,    98,    98,    98,   163,   175,   176,   177,
      17,    98,    18,   259,   249,   264,   267,   454,    46,   261,
     454,     3,   263,   263,   263,    38,   166,   161,   163,   163,
     161,   161,   161,   161,    17,    17,   233,   234,    10,    98,
      10,    22,   225,   233,   234,   225,   233,   234,    17,   228,
      15,   278,   435,   438,   440,   433,    19,    19,    15,    15,
     440,    19,    10,    17,    17,   438,   438,     6,    17,    98,
     438,    17,    17,    17,    17,    17,    17,   361,    10,    17,
      17,    84,   268,   354,    84,    46,   184,   190,   210,   212,
     216,   217,   220,   269,    72,   255,   354,    16,   438,   360,
     438,    17,    17,    98,   257,   354,    10,    62,    17,    10,
      16,    17,    17,   454,    17,    98,    98,    10,   295,   450,
     297,   450,   435,    36,   437,    19,    17,   150,    10,   453,
      10,    10,    10,    10,    10,   454,    10,   314,   318,   450,
     454,    46,   454,    10,   235,   194,   192,   195,   244,   454,
      47,   102,   104,   204,   207,   244,   249,   262,    86,    95,
      96,   386,   389,   398,   454,    16,    16,     1,    16,    16,
      16,    16,    16,    16,    16,   386,   387,   389,     1,   387,
     387,     1,   387,    16,    16,    16,    16,    16,   384,    86,
     380,    10,    22,    10,    22,    22,    10,    10,    10,    98,
     238,    22,   249,   262,    10,   235,   185,   186,   188,   244,
     107,    65,    66,    71,    81,   180,   300,   302,   303,   304,
     307,   309,   209,   249,   209,   249,    39,   454,   161,    16,
      36,    98,   174,   434,   438,   261,   249,   454,   262,   167,
      17,    98,   161,   161,    10,    10,   240,   454,   438,   233,
      10,    10,   234,    10,    10,   439,    17,    19,    19,   438,
     442,   442,   365,   365,     1,   356,     1,    82,   372,   373,
     435,   372,   372,   355,    17,   438,   356,   355,    84,   244,
     270,   271,   446,   454,   354,    72,   438,   438,    10,    10,
     438,    62,    10,   101,   250,   251,   265,   266,   268,   450,
     252,   450,    10,    16,   288,   290,    17,    36,    15,   155,
     315,   316,   317,   318,   319,   450,   315,    98,    98,   101,
     454,    10,   235,   235,   235,   193,   454,   262,   198,    26,
      98,   388,   400,   447,    22,   386,   389,    18,   438,     1,
      95,    96,    97,   389,   417,   419,   421,   422,   425,    10,
       1,   417,   419,   420,   420,   417,   417,   419,   419,    10,
      10,    10,    10,    10,    10,   417,   417,   417,   419,   386,
     389,    16,   390,   391,   392,   439,   390,   390,   242,    10,
     439,   262,   201,    10,   235,   235,   235,   189,    16,    16,
      16,     1,    15,   300,   107,   302,   249,   262,   249,   262,
     208,   338,   454,    17,   175,   177,    19,    19,   262,   261,
     454,   241,    38,   169,    10,    10,    79,    79,    80,    15,
     356,    80,   373,    15,    80,    80,   363,    10,   270,    10,
      98,   244,   222,    72,   255,   354,     1,    46,   249,   267,
     251,   357,   450,    10,    98,    98,    17,    98,   266,    17,
     438,   110,    57,    58,   316,   320,   321,   324,    10,    10,
      98,    10,    10,    98,    46,   320,   318,   454,   454,   454,
      22,    10,    10,    10,   235,   199,   454,    24,   389,   387,
      22,    26,    24,    26,    22,   434,   438,    17,    17,    19,
      18,    98,   425,   134,    98,    98,    98,    98,    98,    98,
      98,    98,    98,    98,    98,    26,    22,    16,   391,   392,
     439,   202,   454,    10,    10,    10,   235,   438,   438,   308,
     454,    84,   454,    84,   262,   454,   262,   454,   454,    17,
     454,   262,   168,   241,   356,   356,   356,   356,   349,    10,
     271,   270,   354,    62,    10,   249,   262,   454,    64,    65,
      69,    70,    71,    78,    81,   345,   347,   358,   362,   370,
     371,   374,   376,   445,   266,   101,   454,    10,   266,    17,
       1,   454,     1,     8,    12,    16,    26,    99,   322,   323,
     326,   327,   331,    55,    58,   454,   454,    55,   438,    10,
     454,   387,    17,    24,    24,    16,   389,   396,    24,    24,
      19,    19,   384,   393,     8,    12,   423,   424,   418,   419,
     134,   426,   439,   418,   416,   438,   416,   418,   418,   419,
     419,   418,   418,   418,   419,    24,    24,   392,    17,    98,
     454,    10,    17,    17,    10,    22,     1,   300,   454,   454,
     454,   241,    17,    10,    62,   262,   454,    16,   357,   450,
      16,    16,    16,    15,    84,   255,   354,    10,    22,    46,
     249,   267,   255,   357,    10,    22,    59,   331,    59,   323,
      15,   327,   331,    16,     1,   322,    17,   447,   389,    17,
     447,   387,   389,   396,     8,    12,     8,    19,    98,    98,
     426,    98,    17,    98,    17,    98,    98,    98,    98,    98,
      98,    98,    98,    98,   387,   389,   392,    10,   301,   302,
      82,   305,   306,   435,   438,   438,    84,    84,   355,   454,
       1,   438,   438,   349,   438,   454,   354,    84,   438,   249,
     262,   454,   357,    64,     8,   325,    17,   331,   328,   330,
     331,   331,    59,    59,    15,   447,    15,   447,   423,   416,
     416,    10,   438,    10,   414,   415,   438,   416,   416,   416,
     439,   416,   416,   416,   416,    17,    98,    79,    15,   301,
      80,   306,    15,    10,    17,    17,    17,    10,    17,   255,
     348,   357,    84,   262,   454,    64,    10,    17,    15,    10,
      17,   397,   438,    15,   397,    15,    17,    98,    17,    98,
      98,    17,    98,    17,    98,    17,    98,    98,    98,    17,
      98,    17,    98,    17,    98,    98,   392,   301,   301,   301,
     308,   346,   357,   450,   357,   438,   357,   354,    84,   357,
     454,    14,   329,   330,   331,    17,   397,    17,   397,    10,
     414,    10,   414,   414,    10,   415,    10,   414,    10,   414,
     416,   439,    10,   414,    10,   414,    10,   414,   416,    17,
      98,    17,    79,    10,    10,    84,    10,    17,    17,    17,
      17,    17,    17,    17,    17,    98,    17,    98,    17,    17,
      17,    17,    98,   392,    81,   346,   349,    17,    10,    10,
      10,    10,    10,    10,   414,    10,   414,    10,    10,    10,
      10,   414,    98,    15,    17,    17,    17,    17,   392,   454,
     357,    10,    10,    10,    98,   300,   392,    84,    17,    98,
     392,    98,   392,    98,   392,    98,   392,    98,   392,    98,
     392,    17
};


/* Prevent warning if -Wmissing-prototypes.  */
int yyparse (void);

/* Error token number */
#define YYTERROR 1

/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */


#define YYRHSLOC(Rhs, K) ((Rhs)[K].yystate.yyloc)
#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)				\
    do									\
      if (YYID (N))							\
	{								\
	  (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;	\
	  (Current).first_column = YYRHSLOC (Rhs, 1).first_column;	\
	  (Current).last_line    = YYRHSLOC (Rhs, N).last_line;		\
	  (Current).last_column  = YYRHSLOC (Rhs, N).last_column;	\
	}								\
      else								\
	{								\
	  (Current).first_line   = (Current).last_line   =		\
	    YYRHSLOC (Rhs, 0).last_line;				\
	  (Current).first_column = (Current).last_column =		\
	    YYRHSLOC (Rhs, 0).last_column;				\
	}								\
    while (YYID (0))

/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

# define YY_LOCATION_PRINT(File, Loc)			\
    fprintf (File, "%d.%d-%d.%d",			\
	     (Loc).first_line, (Loc).first_column,	\
	     (Loc).last_line,  (Loc).last_column)
#endif


#ifndef YY_LOCATION_PRINT
# define YY_LOCATION_PRINT(File, Loc) ((void) 0)
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */
#define YYLEX yylex ()

YYSTYPE yylval;

YYLTYPE yylloc;

int yynerrs;
int yychar;

static const int YYEOF = 0;
static const int YYEMPTY = -2;

typedef enum { yyok, yyaccept, yyabort, yyerr } YYRESULTTAG;

#define YYCHK(YYE)							     \
   do { YYRESULTTAG yyflag = YYE; if (yyflag != yyok) return yyflag; }	     \
   while (YYID (0))

#if YYDEBUG

# ifndef YYFPRINTF
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (YYID (0))


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

/*ARGSUSED*/
static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
{
  if (!yyvaluep)
    return;
  YYUSE (yylocationp);
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# else
  YYUSE (yyoutput);
# endif
  switch (yytype)
    {
      default:
	break;
    }
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
{
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  YY_LOCATION_PRINT (yyoutput, *yylocationp);
  YYFPRINTF (yyoutput, ": ");
  yy_symbol_value_print (yyoutput, yytype, yyvaluep, yylocationp);
  YYFPRINTF (yyoutput, ")");
}

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			    \
do {									    \
  if (yydebug)								    \
    {									    \
      YYFPRINTF (stderr, "%s ", Title);					    \
      yy_symbol_print (stderr, Type,					    \
		       Value, Location);  \
      YYFPRINTF (stderr, "\n");						    \
    }									    \
} while (YYID (0))

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;

#else /* !YYDEBUG */

# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)

#endif /* !YYDEBUG */

/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   SIZE_MAX < YYMAXDEPTH * sizeof (GLRStackItem)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif

/* Minimum number of free items on the stack allowed after an
   allocation.  This is to allow allocation and initialization
   to be completed by functions that call yyexpandGLRStack before the
   stack is expanded, thus insuring that all necessary pointers get
   properly redirected to new data.  */
#define YYHEADROOM 2

#ifndef YYSTACKEXPANDABLE
# if (! defined __cplusplus \
      || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
	  && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL))
#  define YYSTACKEXPANDABLE 1
# else
#  define YYSTACKEXPANDABLE 0
# endif
#endif

#if YYSTACKEXPANDABLE
# define YY_RESERVE_GLRSTACK(Yystack)			\
  do {							\
    if (Yystack->yyspaceLeft < YYHEADROOM)		\
      yyexpandGLRStack (Yystack);			\
  } while (YYID (0))
#else
# define YY_RESERVE_GLRSTACK(Yystack)			\
  do {							\
    if (Yystack->yyspaceLeft < YYHEADROOM)		\
      yyMemoryExhausted (Yystack);			\
  } while (YYID (0))
#endif


#if YYERROR_VERBOSE

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
yystpcpy (char *yydest, const char *yysrc)
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static size_t
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      size_t yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return strlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

#endif /* !YYERROR_VERBOSE */

/** State numbers, as in LALR(1) machine */
typedef int yyStateNum;

/** Rule numbers, as in LALR(1) machine */
typedef int yyRuleNum;

/** Grammar symbol */
typedef short int yySymbol;

/** Item references, as in LALR(1) machine */
typedef short int yyItemNum;

typedef struct yyGLRState yyGLRState;
typedef struct yyGLRStateSet yyGLRStateSet;
typedef struct yySemanticOption yySemanticOption;
typedef union yyGLRStackItem yyGLRStackItem;
typedef struct yyGLRStack yyGLRStack;

struct yyGLRState {
  /** Type tag: always true.  */
  yybool yyisState;
  /** Type tag for yysemantics.  If true, yysval applies, otherwise
   *  yyfirstVal applies.  */
  yybool yyresolved;
  /** Number of corresponding LALR(1) machine state.  */
  yyStateNum yylrState;
  /** Preceding state in this stack */
  yyGLRState* yypred;
  /** Source position of the first token produced by my symbol */
  size_t yyposn;
  union {
    /** First in a chain of alternative reductions producing the
     *  non-terminal corresponding to this state, threaded through
     *  yynext.  */
    yySemanticOption* yyfirstVal;
    /** Semantic value for this state.  */
    YYSTYPE yysval;
  } yysemantics;
  /** Source location for this state.  */
  YYLTYPE yyloc;
};

struct yyGLRStateSet {
  yyGLRState** yystates;
  /** During nondeterministic operation, yylookaheadNeeds tracks which
   *  stacks have actually needed the current lookahead.  During deterministic
   *  operation, yylookaheadNeeds[0] is not maintained since it would merely
   *  duplicate yychar != YYEMPTY.  */
  yybool* yylookaheadNeeds;
  size_t yysize, yycapacity;
};

struct yySemanticOption {
  /** Type tag: always false.  */
  yybool yyisState;
  /** Rule number for this reduction */
  yyRuleNum yyrule;
  /** The last RHS state in the list of states to be reduced.  */
  yyGLRState* yystate;
  /** The lookahead for this reduction.  */
  int yyrawchar;
  YYSTYPE yyval;
  YYLTYPE yyloc;
  /** Next sibling in chain of options.  To facilitate merging,
   *  options are chained in decreasing order by address.  */
  yySemanticOption* yynext;
};

/** Type of the items in the GLR stack.  The yyisState field
 *  indicates which item of the union is valid.  */
union yyGLRStackItem {
  yyGLRState yystate;
  yySemanticOption yyoption;
};

struct yyGLRStack {
  int yyerrState;
  /* To compute the location of the error token.  */
  yyGLRStackItem yyerror_range[3];

  YYJMP_BUF yyexception_buffer;
  yyGLRStackItem* yyitems;
  yyGLRStackItem* yynextFree;
  size_t yyspaceLeft;
  yyGLRState* yysplitPoint;
  yyGLRState* yylastDeleted;
  yyGLRStateSet yytops;
};

#if YYSTACKEXPANDABLE
static void yyexpandGLRStack (yyGLRStack* yystackp);
#endif

static void yyFail (yyGLRStack* yystackp, const char* yymsg)
  __attribute__ ((__noreturn__));
static void
yyFail (yyGLRStack* yystackp, const char* yymsg)
{
  if (yymsg != NULL)
    yyerror (yymsg);
  YYLONGJMP (yystackp->yyexception_buffer, 1);
}

static void yyMemoryExhausted (yyGLRStack* yystackp)
  __attribute__ ((__noreturn__));
static void
yyMemoryExhausted (yyGLRStack* yystackp)
{
  YYLONGJMP (yystackp->yyexception_buffer, 2);
}

#if YYDEBUG || YYERROR_VERBOSE
/** A printable representation of TOKEN.  */
static inline const char*
yytokenName (yySymbol yytoken)
{
  if (yytoken == YYEMPTY)
    return "";

  return yytname[yytoken];
}
#endif

/** Fill in YYVSP[YYLOW1 .. YYLOW0-1] from the chain of states starting
 *  at YYVSP[YYLOW0].yystate.yypred.  Leaves YYVSP[YYLOW1].yystate.yypred
 *  containing the pointer to the next state in the chain.  */
static void yyfillin (yyGLRStackItem *, int, int) __attribute__ ((__unused__));
static void
yyfillin (yyGLRStackItem *yyvsp, int yylow0, int yylow1)
{
  yyGLRState* s;
  int i;
  s = yyvsp[yylow0].yystate.yypred;
  for (i = yylow0-1; i >= yylow1; i -= 1)
    {
      YYASSERT (s->yyresolved);
      yyvsp[i].yystate.yyresolved = yytrue;
      yyvsp[i].yystate.yysemantics.yysval = s->yysemantics.yysval;
      yyvsp[i].yystate.yyloc = s->yyloc;
      s = yyvsp[i].yystate.yypred = s->yypred;
    }
}

/* Do nothing if YYNORMAL or if *YYLOW <= YYLOW1.  Otherwise, fill in
 * YYVSP[YYLOW1 .. *YYLOW-1] as in yyfillin and set *YYLOW = YYLOW1.
 * For convenience, always return YYLOW1.  */
static inline int yyfill (yyGLRStackItem *, int *, int, yybool)
     __attribute__ ((__unused__));
static inline int
yyfill (yyGLRStackItem *yyvsp, int *yylow, int yylow1, yybool yynormal)
{
  if (!yynormal && yylow1 < *yylow)
    {
      yyfillin (yyvsp, *yylow, yylow1);
      *yylow = yylow1;
    }
  return yylow1;
}

/** Perform user action for rule number YYN, with RHS length YYRHSLEN,
 *  and top stack item YYVSP.  YYLVALP points to place to put semantic
 *  value ($$), and yylocp points to place for location information
 *  (@$).  Returns yyok for normal return, yyaccept for YYACCEPT,
 *  yyerr for YYERROR, yyabort for YYABORT.  */
/*ARGSUSED*/ static YYRESULTTAG
yyuserAction (yyRuleNum yyn, int yyrhslen, yyGLRStackItem* yyvsp,
	      YYSTYPE* yyvalp,
	      YYLTYPE* YYOPTIONAL_LOC (yylocp),
	      yyGLRStack* yystackp
	      )
{
  yybool yynormal __attribute__ ((__unused__)) =
    (yystackp->yysplitPoint == NULL);
  int yylow;
# undef yyerrok
# define yyerrok (yystackp->yyerrState = 0)
# undef YYACCEPT
# define YYACCEPT return yyaccept
# undef YYABORT
# define YYABORT return yyabort
# undef YYERROR
# define YYERROR return yyerrok, yyerr
# undef YYRECOVERING
# define YYRECOVERING() (yystackp->yyerrState != 0)
# undef yyclearin
# define yyclearin (yychar = YYEMPTY)
# undef YYFILL
# define YYFILL(N) yyfill (yyvsp, &yylow, N, yynormal)
# undef YYBACKUP
# define YYBACKUP(Token, Value)						     \
  return yyerror (YY_("syntax error: cannot back up")),     \
	 yyerrok, yyerr

  yylow = 1;
  if (yyrhslen == 0)
    *yyvalp = yyval_default;
  else
    *yyvalp = yyvsp[YYFILL (1-yyrhslen)].yystate.yysemantics.yysval;
  YYLLOC_DEFAULT ((*yylocp), (yyvsp - yyrhslen), yyrhslen);
  yystackp->yyerror_range[1].yystate.yyloc = *yylocp;

  switch (yyn)
    {
        case 3:

/* Line 936 of glr.c  */
#line 136 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {identVerilog.resize(0);}
    break;

  case 5:

/* Line 936 of glr.c  */
#line 137 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {identVerilog.resize(0);}
    break;

  case 8:

/* Line 936 of glr.c  */
#line 148 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {vbufreset;}
    break;

  case 9:

/* Line 936 of glr.c  */
#line 149 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {vbufreset;}
    break;

  case 10:

/* Line 936 of glr.c  */
#line 150 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {vbufreset;}
    break;

  case 19:

/* Line 936 of glr.c  */
#line 182 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {
                                if(!parseCode) 
								{ 
								   QCString confName=(((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.cstr);
								   Entry *conf=VerilogDocGen::makeNewEntry(confName.data(),Entry::VARIABLE_SEC,VerilogDocGen::CONFIGURATION,c_lloc.first_line);
                                   conf->type="configuration";
								   addGlobalVerilogMember(conf);
								}          
				            }
    break;

  case 38:

/* Line 936 of glr.c  */
#line 238 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {}
    break;

  case 54:

/* Line 936 of glr.c  */
#line 267 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {
                                    yydebug=0; //sets parser in debug mode
                                    if(!parseCode) { 
							              
											 lastModule=VerilogDocGen::makeNewEntry("",Entry::CLASS_SEC,VerilogDocGen::MODULE);
                                            currentVerilog=lastModule;
                                             currentVerilog->protection=Public;
					                         parseModule();
							                 CurrState=VerilogDocGen::STATE_MODULE;
				                             
										    }
                                            else {
											      parseModule();
                                         		  }
                               currVerilogType=0;						       
							   vbufreset();
							 }
    break;

  case 55:

/* Line 936 of glr.c  */
#line 286 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {
            if(!parseCode){ 
			        int ll=getVerilogLine();
	                currentVerilog->endBodyLine=ll;
			       } 	 
              vbufreset(); 
		   }
    break;

  case 56:

/* Line 936 of glr.c  */
#line 292 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {currentVerilog=0;vbufreset();}
    break;

  case 59:

/* Line 936 of glr.c  */
#line 302 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {currVerilogType=VerilogDocGen::PORT;}
    break;

  case 60:

/* Line 936 of glr.c  */
#line 302 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {currVerilogType=0;vbufreset();}
    break;

  case 62:

/* Line 936 of glr.c  */
#line 306 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::PARAMETER;}
    break;

  case 63:

/* Line 936 of glr.c  */
#line 306 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {currVerilogType=0;}
    break;

  case 64:

/* Line 936 of glr.c  */
#line 307 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::PARAMETER;}
    break;

  case 65:

/* Line 936 of glr.c  */
#line 307 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {currVerilogType=0;}
    break;

  case 66:

/* Line 936 of glr.c  */
#line 308 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::PARAMETER;}
    break;

  case 67:

/* Line 936 of glr.c  */
#line 308 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {currVerilogType=0;}
    break;

  case 68:

/* Line 936 of glr.c  */
#line 314 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {currVerilogType=VerilogDocGen::PORT;}
    break;

  case 69:

/* Line 936 of glr.c  */
#line 314 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {currVerilogType=0;vbufreset();}
    break;

  case 70:

/* Line 936 of glr.c  */
#line 315 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {currVerilogType=0;vbufreset();}
    break;

  case 71:

/* Line 936 of glr.c  */
#line 319 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {currVerilogType=0;vbufreset();}
    break;

  case 72:

/* Line 936 of glr.c  */
#line 323 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {parseListOfPorts();vbufreset();}
    break;

  case 73:

/* Line 936 of glr.c  */
#line 324 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {parseListOfPorts();vbufreset();}
    break;

  case 85:

/* Line 936 of glr.c  */
#line 346 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=0;vbufreset();}
    break;

  case 86:

/* Line 936 of glr.c  */
#line 347 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=0;vbufreset();}
    break;

  case 87:

/* Line 936 of glr.c  */
#line 348 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=0;vbufreset();}
    break;

  case 88:

/* Line 936 of glr.c  */
#line 349 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    { vbufreset();}
    break;

  case 91:

/* Line 936 of glr.c  */
#line 358 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 92:

/* Line 936 of glr.c  */
#line 359 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 95:

/* Line 936 of glr.c  */
#line 362 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 97:

/* Line 936 of glr.c  */
#line 367 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 98:

/* Line 936 of glr.c  */
#line 368 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 99:

/* Line 936 of glr.c  */
#line 369 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 100:

/* Line 936 of glr.c  */
#line 370 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 101:

/* Line 936 of glr.c  */
#line 371 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 102:

/* Line 936 of glr.c  */
#line 372 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 103:

/* Line 936 of glr.c  */
#line 373 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 112:

/* Line 936 of glr.c  */
#line 384 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 113:

/* Line 936 of glr.c  */
#line 385 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {}
    break;

  case 114:

/* Line 936 of glr.c  */
#line 386 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {}
    break;

  case 115:

/* Line 936 of glr.c  */
#line 390 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    { if(parseCode) currVerilogType=VerilogDocGen::DEFPARAM;}
    break;

  case 116:

/* Line 936 of glr.c  */
#line 390 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {vbufreset(); if(parseCode) currVerilogType=0; }
    break;

  case 117:

/* Line 936 of glr.c  */
#line 391 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {vbufreset(); if(parseCode) currVerilogType=0;}
    break;

  case 118:

/* Line 936 of glr.c  */
#line 399 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::PARAMETER;}
    break;

  case 119:

/* Line 936 of glr.c  */
#line 399 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {currVerilogType=0;vbufreset();}
    break;

  case 120:

/* Line 936 of glr.c  */
#line 400 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::PARAMETER;}
    break;

  case 121:

/* Line 936 of glr.c  */
#line 400 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {currVerilogType=0;vbufreset();}
    break;

  case 122:

/* Line 936 of glr.c  */
#line 401 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::PARAMETER;}
    break;

  case 123:

/* Line 936 of glr.c  */
#line 401 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {currVerilogType=0;vbufreset();}
    break;

  case 124:

/* Line 936 of glr.c  */
#line 402 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::PARAMETER;}
    break;

  case 125:

/* Line 936 of glr.c  */
#line 402 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {currVerilogType=0;vbufreset();}
    break;

  case 126:

/* Line 936 of glr.c  */
#line 403 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::PARAMETER;}
    break;

  case 127:

/* Line 936 of glr.c  */
#line 403 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {currVerilogType=0;vbufreset();}
    break;

  case 129:

/* Line 936 of glr.c  */
#line 407 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::PARAMETER;}
    break;

  case 130:

/* Line 936 of glr.c  */
#line 407 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {currVerilogType=0;vbufreset();}
    break;

  case 131:

/* Line 936 of glr.c  */
#line 408 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::PARAMETER;}
    break;

  case 132:

/* Line 936 of glr.c  */
#line 408 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {currVerilogType=0;vbufreset();}
    break;

  case 133:

/* Line 936 of glr.c  */
#line 409 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::PARAMETER;}
    break;

  case 134:

/* Line 936 of glr.c  */
#line 409 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {currVerilogType=0;vbufreset();}
    break;

  case 135:

/* Line 936 of glr.c  */
#line 410 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::PARAMETER;}
    break;

  case 136:

/* Line 936 of glr.c  */
#line 410 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {currVerilogType=0;vbufreset();}
    break;

  case 137:

/* Line 936 of glr.c  */
#line 411 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::PARAMETER;}
    break;

  case 138:

/* Line 936 of glr.c  */
#line 411 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {currVerilogType=0;vbufreset();}
    break;

  case 139:

/* Line 936 of glr.c  */
#line 412 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {currVerilogType=0;vbufreset();}
    break;

  case 140:

/* Line 936 of glr.c  */
#line 415 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    { vbufreset();}
    break;

  case 141:

/* Line 936 of glr.c  */
#line 416 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    { vbufreset();}
    break;

  case 143:

/* Line 936 of glr.c  */
#line 424 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::INOUT; }
    break;

  case 144:

/* Line 936 of glr.c  */
#line 424 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode)parsePortDir(currentVerilog,3);vbufreset();}
    break;

  case 145:

/* Line 936 of glr.c  */
#line 425 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::INOUT; }
    break;

  case 146:

/* Line 936 of glr.c  */
#line 425 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode)parsePortDir(currentVerilog,3);vbufreset();}
    break;

  case 147:

/* Line 936 of glr.c  */
#line 426 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode)parsePortDir(currentVerilog,3);vbufreset();}
    break;

  case 148:

/* Line 936 of glr.c  */
#line 427 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode)parsePortDir(currentVerilog,3);vbufreset();}
    break;

  case 149:

/* Line 936 of glr.c  */
#line 430 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::INPUT; }
    break;

  case 150:

/* Line 936 of glr.c  */
#line 430 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode)parsePortDir(currentVerilog,3);vbufreset();}
    break;

  case 151:

/* Line 936 of glr.c  */
#line 431 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::INPUT; }
    break;

  case 152:

/* Line 936 of glr.c  */
#line 431 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode)parsePortDir(currentVerilog,3);vbufreset();}
    break;

  case 153:

/* Line 936 of glr.c  */
#line 432 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode)parsePortDir(currentVerilog,3);vbufreset();}
    break;

  case 154:

/* Line 936 of glr.c  */
#line 433 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode)parsePortDir(currentVerilog,3);vbufreset();}
    break;

  case 155:

/* Line 936 of glr.c  */
#line 438 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::OUTPUT; }
    break;

  case 156:

/* Line 936 of glr.c  */
#line 438 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode)parsePortDir(currentVerilog,3);vbufreset();}
    break;

  case 157:

/* Line 936 of glr.c  */
#line 439 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::OUTPUT; }
    break;

  case 158:

/* Line 936 of glr.c  */
#line 439 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode)parsePortDir(currentVerilog,3);vbufreset();}
    break;

  case 159:

/* Line 936 of glr.c  */
#line 441 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::OUTPUT; }
    break;

  case 160:

/* Line 936 of glr.c  */
#line 441 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode)parsePortDir(currentVerilog,3);vbufreset();}
    break;

  case 162:

/* Line 936 of glr.c  */
#line 444 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode)parsePortDir(currentVerilog,3);vbufreset();}
    break;

  case 163:

/* Line 936 of glr.c  */
#line 445 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode)parsePortDir(currentVerilog,3);vbufreset();}
    break;

  case 164:

/* Line 936 of glr.c  */
#line 446 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode)parsePortDir(currentVerilog,3);vbufreset();}
    break;

  case 175:

/* Line 936 of glr.c  */
#line 474 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    { vbufreset();}
    break;

  case 176:

/* Line 936 of glr.c  */
#line 475 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    { vbufreset();}
    break;

  case 179:

/* Line 936 of glr.c  */
#line 482 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 181:

/* Line 936 of glr.c  */
#line 487 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 182:

/* Line 936 of glr.c  */
#line 488 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 183:

/* Line 936 of glr.c  */
#line 489 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 184:

/* Line 936 of glr.c  */
#line 490 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 185:

/* Line 936 of glr.c  */
#line 491 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 186:

/* Line 936 of glr.c  */
#line 492 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 187:

/* Line 936 of glr.c  */
#line 493 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 188:

/* Line 936 of glr.c  */
#line 494 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 189:

/* Line 936 of glr.c  */
#line 495 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 190:

/* Line 936 of glr.c  */
#line 496 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 191:

/* Line 936 of glr.c  */
#line 497 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 196:

/* Line 936 of glr.c  */
#line 510 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();currVerilogType=0;}
    break;

  case 197:

/* Line 936 of glr.c  */
#line 511 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 198:

/* Line 936 of glr.c  */
#line 513 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::TIME; }
    break;

  case 199:

/* Line 936 of glr.c  */
#line 513 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();currVerilogType=0;}
    break;

  case 200:

/* Line 936 of glr.c  */
#line 514 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 201:

/* Line 936 of glr.c  */
#line 517 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {currVerilogType=0;}
    break;

  case 202:

/* Line 936 of glr.c  */
#line 518 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {currVerilogType=0;}
    break;

  case 203:

/* Line 936 of glr.c  */
#line 519 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    { vbufreset();}
    break;

  case 204:

/* Line 936 of glr.c  */
#line 522 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::TIME; }
    break;

  case 205:

/* Line 936 of glr.c  */
#line 522 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();currVerilogType=0;}
    break;

  case 206:

/* Line 936 of glr.c  */
#line 523 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 215:

/* Line 936 of glr.c  */
#line 552 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {}
    break;

  case 222:

/* Line 936 of glr.c  */
#line 571 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode) {parseReg(currentVerilog);}vbufreset();}
    break;

  case 223:

/* Line 936 of glr.c  */
#line 574 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode) {parseReg(currentVerilog);}vbufreset();}
    break;

  case 224:

/* Line 936 of glr.c  */
#line 575 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode) {parseReg(currentVerilog);}vbufreset();}
    break;

  case 240:

/* Line 936 of glr.c  */
#line 614 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode) {
                                                                   							parseReg(currentVerilog);}
																							vbufreset();}
    break;

  case 241:

/* Line 936 of glr.c  */
#line 617 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode) parseReg(currentVerilog);vbufreset();}
    break;

  case 242:

/* Line 936 of glr.c  */
#line 625 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode) {parseReg(currentVerilog);}vbufreset();}
    break;

  case 243:

/* Line 936 of glr.c  */
#line 627 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {
                          			 if(currVerilogType==VerilogDocGen::PARAMETER && !parseCode)
									 parseParam(currentVerilog);
									 vbufreset();
	                   }
    break;

  case 247:

/* Line 936 of glr.c  */
#line 656 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode && currentFunctionVerilog)
						                                {
														  currentFunctionVerilog->endBodyLine=getVerilogPrevLine();
														} vbufreset(); }
    break;

  case 248:

/* Line 936 of glr.c  */
#line 664 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode && currentFunctionVerilog){currentFunctionVerilog->endBodyLine=getVerilogPrevLine();} vbufreset(); }
    break;

  case 250:

/* Line 936 of glr.c  */
#line 668 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    { vbufreset(); }
    break;

  case 251:

/* Line 936 of glr.c  */
#line 672 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {  if(!parseCode){
                             //    printf("\n  funcname [%s] --\n",getVerilogString());
                                 currentFunctionVerilog=VerilogDocGen::makeNewEntry("",Entry::FUNCTION_SEC,VerilogDocGen::FUNCTION);
								 currentFunctionVerilog->fileName=getVerilogParsingFile();
								 parseFunction(currentFunctionVerilog);
								 CurrState=VerilogDocGen::STATE_FUNCTION;
								 }
								 vbufreset();
							   }
    break;

  case 265:

/* Line 936 of glr.c  */
#line 708 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=0;}
    break;

  case 268:

/* Line 936 of glr.c  */
#line 722 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode && currentFunctionVerilog) { currentFunctionVerilog->endBodyLine=getVerilogPrevLine();} vbufreset();}
    break;

  case 270:

/* Line 936 of glr.c  */
#line 726 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode && currentFunctionVerilog) { currentFunctionVerilog->endBodyLine=getVerilogPrevLine();} vbufreset();}
    break;

  case 271:

/* Line 936 of glr.c  */
#line 728 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode && currentFunctionVerilog) { currentFunctionVerilog->endBodyLine=getVerilogPrevLine();} vbufreset();}
    break;

  case 272:

/* Line 936 of glr.c  */
#line 729 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    { vbufreset();}
    break;

  case 273:

/* Line 936 of glr.c  */
#line 732 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {  if(!parseCode){
                             //    printf("\n  funcname [%s] --\n",getVerilogString());
                                 currentFunctionVerilog=VerilogDocGen::makeNewEntry("",Entry::FUNCTION_SEC,VerilogDocGen::TASK);
								 currentFunctionVerilog->fileName=getVerilogParsingFile();
								 parseFunction(currentFunctionVerilog);
								 CurrState=VerilogDocGen::STATE_FUNCTION;
								 }
								 vbufreset();
							   }
    break;

  case 283:

/* Line 936 of glr.c  */
#line 768 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {
                             if(!parseCode){
							   parsePortDir(currentVerilog,3);}
							   vbufreset();
                     }
    break;

  case 284:

/* Line 936 of glr.c  */
#line 773 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode){
							   parsePortDir(currentVerilog,3);}
							   vbufreset();
                      }
    break;

  case 285:

/* Line 936 of glr.c  */
#line 777 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode){
							   parsePortDir(currentVerilog,3);}
							   vbufreset();
                       }
    break;

  case 286:

/* Line 936 of glr.c  */
#line 782 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {
                             if(!parseCode){
							   parsePortDir(currentVerilog,3);}
							   vbufreset();
                   }
    break;

  case 287:

/* Line 936 of glr.c  */
#line 787 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {
                             if(!parseCode){
							   parsePortDir(currentVerilog,3);}
							   vbufreset();
                    }
    break;

  case 294:

/* Line 936 of glr.c  */
#line 805 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    { if(!parseCode )currVerilogType=VerilogDocGen::INOUT;}
    break;

  case 295:

/* Line 936 of glr.c  */
#line 806 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    { if(!parseCode)currVerilogType=VerilogDocGen::OUTPUT;}
    break;

  case 296:

/* Line 936 of glr.c  */
#line 807 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    { if(!parseCode)currVerilogType=VerilogDocGen::INPUT;}
    break;

  case 297:

/* Line 936 of glr.c  */
#line 808 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    { if(!parseCode){parsePortDir(currentVerilog,3);vbufreset();}}
    break;

  case 300:

/* Line 936 of glr.c  */
#line 816 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode){currVerilogType=VerilogDocGen::INPUT;parsePortDir(currentVerilog,3);}vbufreset();}
    break;

  case 301:

/* Line 936 of glr.c  */
#line 817 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode){currVerilogType=VerilogDocGen::INPUT;parsePortDir(currentVerilog,3);}vbufreset();}
    break;

  case 302:

/* Line 936 of glr.c  */
#line 818 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode){currVerilogType=VerilogDocGen::INPUT;parsePortDir(currentVerilog,3);}vbufreset();}
    break;

  case 303:

/* Line 936 of glr.c  */
#line 819 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode){currVerilogType=VerilogDocGen::INPUT;parsePortDir(currentVerilog,3);}vbufreset();}
    break;

  case 304:

/* Line 936 of glr.c  */
#line 820 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode){currVerilogType=VerilogDocGen::INPUT;parsePortDir(currentVerilog,3);}vbufreset();}
    break;

  case 305:

/* Line 936 of glr.c  */
#line 821 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode){currVerilogType=VerilogDocGen::INPUT;parsePortDir(currentVerilog,3);}vbufreset();}
    break;

  case 306:

/* Line 936 of glr.c  */
#line 822 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode){currVerilogType=VerilogDocGen::INPUT;parsePortDir(currentVerilog,3);}vbufreset();}
    break;

  case 307:

/* Line 936 of glr.c  */
#line 823 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    { vbufreset(); }
    break;

  case 320:

/* Line 936 of glr.c  */
#line 847 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 321:

/* Line 936 of glr.c  */
#line 848 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 322:

/* Line 936 of glr.c  */
#line 849 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 332:

/* Line 936 of glr.c  */
#line 870 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    { vbufreset(); }
    break;

  case 345:

/* Line 936 of glr.c  */
#line 912 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    { 
                    						     moduleParamName=prevName;	
                    					         moduleLine=c_lloc.first_line;
                    						}
    break;

  case 346:

/* Line 936 of glr.c  */
#line 915 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();moduleLine=0;}
    break;

  case 348:

/* Line 936 of glr.c  */
#line 916 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 356:

/* Line 936 of glr.c  */
#line 931 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {}
    break;

  case 359:

/* Line 936 of glr.c  */
#line 938 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    { }
    break;

  case 361:

/* Line 936 of glr.c  */
#line 943 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 362:

/* Line 936 of glr.c  */
#line 944 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    { vbufreset();}
    break;

  case 363:

/* Line 936 of glr.c  */
#line 948 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {vbufreset(); currVerilogType=0;}
    break;

  case 364:

/* Line 936 of glr.c  */
#line 949 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {vbufreset(); currVerilogType=0;}
    break;

  case 365:

/* Line 936 of glr.c  */
#line 950 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {vbufreset(); currVerilogType=0;}
    break;

  case 366:

/* Line 936 of glr.c  */
#line 953 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    { 
                            const char *name=(((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.cstr);
                            QCString firstName(name);
							int u=getVerilogEndLine();
							QCString secName(getVerilogString());
							 if(moduleParamName.isEmpty()){
							   moduleParamName=secName;
							  moduleLine=c_lloc.last_line;
							   }
							 parseModuleInst(firstName,moduleParamName);
							 moduleParamName.resize(0);
							     if(parseCode){
							  currVerilogType=VerilogDocGen::COMPONENT;
							  vbufreset();
							  }
							  }
    break;

  case 375:

/* Line 936 of glr.c  */
#line 999 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {CurrState=VerilogDocGen::STATE_GENERATE;generateItem=true;}
    break;

  case 376:

/* Line 936 of glr.c  */
#line 999 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {CurrState=0;generateItem=false;}
    break;

  case 377:

/* Line 936 of glr.c  */
#line 1000 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {CurrState=0;generateItem=false;}
    break;

  case 382:

/* Line 936 of glr.c  */
#line 1013 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 383:

/* Line 936 of glr.c  */
#line 1014 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 384:

/* Line 936 of glr.c  */
#line 1015 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 385:

/* Line 936 of glr.c  */
#line 1016 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 386:

/* Line 936 of glr.c  */
#line 1017 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 399:

/* Line 936 of glr.c  */
#line 1045 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    { vbufreset();}
    break;

  case 400:

/* Line 936 of glr.c  */
#line 1046 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    { vbufreset();}
    break;

  case 401:

/* Line 936 of glr.c  */
#line 1055 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();currentVerilog=0;}
    break;

  case 403:

/* Line 936 of glr.c  */
#line 1061 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    { if(!parseCode) { 
							               //  printf("\n  name_of_mod [%s] [%d]--\n",getVerilogString(),getVerilogLine());
                                            lastModule=VerilogDocGen::makeNewEntry("",Entry::CLASS_SEC,VerilogDocGen::MODULE);
                                             currentVerilog=lastModule;
                                             currentVerilog->protection=Private;
					                        //  currentVerilog->stat=TRUE;
					                         parseModule();
							                 CurrState=VerilogDocGen::STATE_MODULE;

										    }
                                            else {
											      parseModule();
                                              //    currVerilogType=VerilogDocGen::MODULE;
												  }
						        vbufreset();
							 }
    break;

  case 404:

/* Line 936 of glr.c  */
#line 1083 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {parseListOfPorts();vbufreset();}
    break;

  case 405:

/* Line 936 of glr.c  */
#line 1084 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {parseListOfPorts();vbufreset();}
    break;

  case 416:

/* Line 936 of glr.c  */
#line 1105 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::OUTPUT;if(!parseCode)parsePortDir(currentVerilog,3);vbufreset();}
    break;

  case 417:

/* Line 936 of glr.c  */
#line 1106 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::OUTPUT;if(!parseCode)parsePortDir(currentVerilog,3);vbufreset();}
    break;

  case 418:

/* Line 936 of glr.c  */
#line 1107 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::OUTPUT;if(!parseCode)parsePortDir(currentVerilog,3);vbufreset();}
    break;

  case 419:

/* Line 936 of glr.c  */
#line 1108 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::OUTPUT;if(!parseCode)parsePortDir(currentVerilog,3);vbufreset();}
    break;

  case 420:

/* Line 936 of glr.c  */
#line 1111 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::INPUT;if(!parseCode)parsePortDir(currentVerilog,3);vbufreset();}
    break;

  case 421:

/* Line 936 of glr.c  */
#line 1112 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::INPUT;if(!parseCode)parsePortDir(currentVerilog,3);vbufreset();}
    break;

  case 422:

/* Line 936 of glr.c  */
#line 1114 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode) parseReg(currentVerilog);vbufreset();}
    break;

  case 423:

/* Line 936 of glr.c  */
#line 1115 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode) parseReg(currentVerilog);vbufreset();}
    break;

  case 425:

/* Line 936 of glr.c  */
#line 1125 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    { vbufreset();}
    break;

  case 426:

/* Line 936 of glr.c  */
#line 1126 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    { vbufreset();}
    break;

  case 427:

/* Line 936 of glr.c  */
#line 1127 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    { vbufreset();}
    break;

  case 428:

/* Line 936 of glr.c  */
#line 1128 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    { vbufreset();}
    break;

  case 433:

/* Line 936 of glr.c  */
#line 1142 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    { vbufreset(); }
    break;

  case 434:

/* Line 936 of glr.c  */
#line 1143 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    { vbufreset(); }
    break;

  case 435:

/* Line 936 of glr.c  */
#line 1146 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    { identVerilog+=(((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.cstr);writeDigit(); }
    break;

  case 447:

/* Line 936 of glr.c  */
#line 1171 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    { identVerilog+=(((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.cstr);writeDigit(); }
    break;

  case 466:

/* Line 936 of glr.c  */
#line 1216 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    { vbufreset(); }
    break;

  case 467:

/* Line 936 of glr.c  */
#line 1217 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    { vbufreset();  }
    break;

  case 468:

/* Line 936 of glr.c  */
#line 1220 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {
                               currVerilogType=VerilogDocGen::ALWAYS;
                               prevName.resize(0);
                     		   }
    break;

  case 469:

/* Line 936 of glr.c  */
#line 1223 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {
                                            if(!parseCode && currentFunctionVerilog)
											 {
											  currentFunctionVerilog->endBodyLine=getVerilogEndLine();
											  if( currentFunctionVerilog->endBodyLine<currentFunctionVerilog->startLine || c_lloc.first_line>currentFunctionVerilog->endBodyLine ) // awlays without end
											   currentFunctionVerilog->endBodyLine=c_lloc.first_line;
											  currVerilogType=0;
											  }
											   vbufreset();}
    break;

  case 470:

/* Line 936 of glr.c  */
#line 1232 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    { vbufreset();currVerilogType=0;}
    break;

  case 474:

/* Line 936 of glr.c  */
#line 1239 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 478:

/* Line 936 of glr.c  */
#line 1245 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 500:

/* Line 936 of glr.c  */
#line 1297 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode && currVerilogType==VerilogDocGen::ALWAYS)parseAlways(true);}
    break;

  case 507:

/* Line 936 of glr.c  */
#line 1306 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {
                                            if(!parseCode){
                                             if(currentFunctionVerilog && currentFunctionVerilog->spec==VerilogDocGen::ALWAYS){
                                             VerilogDocGen::adjustMemberName(prevName); 
                                             currentFunctionVerilog->name=prevName;
                                            }
                                          }
                                         }
    break;

  case 520:

/* Line 936 of glr.c  */
#line 1334 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 535:

/* Line 936 of glr.c  */
#line 1361 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 538:

/* Line 936 of glr.c  */
#line 1366 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {currVerilogType=0;}
    break;

  case 539:

/* Line 936 of glr.c  */
#line 1366 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {currVerilogType=0;}
    break;

  case 541:

/* Line 936 of glr.c  */
#line 1372 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    { parseAlways(); vbufreset();currVerilogType=0;}
    break;

  case 542:

/* Line 936 of glr.c  */
#line 1373 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    { parseAlways(); vbufreset();currVerilogType=0;}
    break;

  case 543:

/* Line 936 of glr.c  */
#line 1374 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    { parseAlways(); vbufreset();currVerilogType=0;}
    break;

  case 544:

/* Line 936 of glr.c  */
#line 1375 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    { parseAlways(); vbufreset();currVerilogType=0;}
    break;

  case 545:

/* Line 936 of glr.c  */
#line 1376 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    { parseAlways(); vbufreset();currVerilogType=0;}
    break;

  case 563:

/* Line 936 of glr.c  */
#line 1415 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    { vbufreset();}
    break;

  case 565:

/* Line 936 of glr.c  */
#line 1417 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    { vbufreset();}
    break;

  case 567:

/* Line 936 of glr.c  */
#line 1419 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    { vbufreset();}
    break;

  case 589:

/* Line 936 of glr.c  */
#line 1471 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    { vbufreset(); }
    break;

  case 590:

/* Line 936 of glr.c  */
#line 1472 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    { vbufreset(); }
    break;

  case 591:

/* Line 936 of glr.c  */
#line 1476 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    { vbufreset(); }
    break;

  case 592:

/* Line 936 of glr.c  */
#line 1477 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    { vbufreset(); }
    break;

  case 593:

/* Line 936 of glr.c  */
#line 1481 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 594:

/* Line 936 of glr.c  */
#line 1482 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 595:

/* Line 936 of glr.c  */
#line 1483 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 596:

/* Line 936 of glr.c  */
#line 1484 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 597:

/* Line 936 of glr.c  */
#line 1485 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 786:

/* Line 936 of glr.c  */
#line 1898 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    { identVerilog+=(((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.cstr);writeDigit(); }
    break;

  case 787:

/* Line 936 of glr.c  */
#line 1899 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {if(parseCode) {writePrevVerilogWords(identVerilog);writeVerilogFont("vhdllogic",identVerilog.data());identVerilog.resize(0);}}
    break;

  case 788:

/* Line 936 of glr.c  */
#line 1910 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 789:

/* Line 936 of glr.c  */
#line 1911 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    { vbufreset(); }
    break;

  case 791:

/* Line 936 of glr.c  */
#line 1915 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    { vbufreset(); }
    break;

  case 792:

/* Line 936 of glr.c  */
#line 1916 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    { vbufreset(); }
    break;

  case 798:

/* Line 936 of glr.c  */
#line 1928 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {
										 }
    break;

  case 799:

/* Line 936 of glr.c  */
#line 1932 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    { parseString(); }
    break;

  case 800:

/* Line 936 of glr.c  */
#line 1935 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {
                    	//if(parseCode) 
						      identVerilog+=(((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.cstr); 
						  //    fprintf(stderr,"\n String: %s",identVerilog.data());
							 }
    break;

  case 801:

/* Line 936 of glr.c  */
#line 1940 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"
    {}
    break;



/* Line 936 of glr.c  */
#line 5718 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.cpp"
      default: break;
    }

  return yyok;
# undef yyerrok
# undef YYABORT
# undef YYACCEPT
# undef YYERROR
# undef YYBACKUP
# undef yyclearin
# undef YYRECOVERING
}


/*ARGSUSED*/ static void
yyuserMerge (int yyn, YYSTYPE* yy0, YYSTYPE* yy1)
{
  YYUSE (yy0);
  YYUSE (yy1);

  switch (yyn)
    {
      
      default: break;
    }
}

			      /* Bison grammar-table manipulation.  */

/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

/*ARGSUSED*/
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, YYLTYPE *yylocationp)
{
  YYUSE (yyvaluep);
  YYUSE (yylocationp);

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {

      default:
	break;
    }
}

/** Number of symbols composing the right hand side of rule #RULE.  */
static inline int
yyrhsLength (yyRuleNum yyrule)
{
  return yyr2[yyrule];
}

static void
yydestroyGLRState (char const *yymsg, yyGLRState *yys)
{
  if (yys->yyresolved)
    yydestruct (yymsg, yystos[yys->yylrState],
		&yys->yysemantics.yysval, &yys->yyloc);
  else
    {
#if YYDEBUG
      if (yydebug)
	{
	  if (yys->yysemantics.yyfirstVal)
	    YYFPRINTF (stderr, "%s unresolved ", yymsg);
	  else
	    YYFPRINTF (stderr, "%s incomplete ", yymsg);
	  yy_symbol_print (stderr, yystos[yys->yylrState],
			   NULL, &yys->yyloc);
	  YYFPRINTF (stderr, "\n");
	}
#endif

      if (yys->yysemantics.yyfirstVal)
	{
	  yySemanticOption *yyoption = yys->yysemantics.yyfirstVal;
	  yyGLRState *yyrh;
	  int yyn;
	  for (yyrh = yyoption->yystate, yyn = yyrhsLength (yyoption->yyrule);
	       yyn > 0;
	       yyrh = yyrh->yypred, yyn -= 1)
	    yydestroyGLRState (yymsg, yyrh);
	}
    }
}

/** Left-hand-side symbol for rule #RULE.  */
static inline yySymbol
yylhsNonterm (yyRuleNum yyrule)
{
  return yyr1[yyrule];
}

#define yyis_pact_ninf(yystate) \
  ((yystate) == YYPACT_NINF)

/** True iff LR state STATE has only a default reduction (regardless
 *  of token).  */
static inline yybool
yyisDefaultedState (yyStateNum yystate)
{
  return yyis_pact_ninf (yypact[yystate]);
}

/** The default reduction for STATE, assuming it has one.  */
static inline yyRuleNum
yydefaultAction (yyStateNum yystate)
{
  return yydefact[yystate];
}

#define yyis_table_ninf(yytable_value) \
  YYID (0)

/** Set *YYACTION to the action to take in YYSTATE on seeing YYTOKEN.
 *  Result R means
 *    R < 0:  Reduce on rule -R.
 *    R = 0:  Error.
 *    R > 0:  Shift to state R.
 *  Set *CONFLICTS to a pointer into yyconfl to 0-terminated list of
 *  conflicting reductions.
 */
static inline void
yygetLRActions (yyStateNum yystate, int yytoken,
		int* yyaction, const short int** yyconflicts)
{
  int yyindex = yypact[yystate] + yytoken;
  if (yyindex < 0 || YYLAST < yyindex || yycheck[yyindex] != yytoken)
    {
      *yyaction = -yydefact[yystate];
      *yyconflicts = yyconfl;
    }
  else if (! yyis_table_ninf (yytable[yyindex]))
    {
      *yyaction = yytable[yyindex];
      *yyconflicts = yyconfl + yyconflp[yyindex];
    }
  else
    {
      *yyaction = 0;
      *yyconflicts = yyconfl + yyconflp[yyindex];
    }
}

static inline yyStateNum
yyLRgotoState (yyStateNum yystate, yySymbol yylhs)
{
  int yyr;
  yyr = yypgoto[yylhs - YYNTOKENS] + yystate;
  if (0 <= yyr && yyr <= YYLAST && yycheck[yyr] == yystate)
    return yytable[yyr];
  else
    return yydefgoto[yylhs - YYNTOKENS];
}

static inline yybool
yyisShiftAction (int yyaction)
{
  return 0 < yyaction;
}

static inline yybool
yyisErrorAction (int yyaction)
{
  return yyaction == 0;
}

				/* GLRStates */

/** Return a fresh GLRStackItem.  Callers should call
 * YY_RESERVE_GLRSTACK afterwards to make sure there is sufficient
 * headroom.  */

static inline yyGLRStackItem*
yynewGLRStackItem (yyGLRStack* yystackp, yybool yyisState)
{
  yyGLRStackItem* yynewItem = yystackp->yynextFree;
  yystackp->yyspaceLeft -= 1;
  yystackp->yynextFree += 1;
  yynewItem->yystate.yyisState = yyisState;
  return yynewItem;
}

/** Add a new semantic action that will execute the action for rule
 *  RULENUM on the semantic values in RHS to the list of
 *  alternative actions for STATE.  Assumes that RHS comes from
 *  stack #K of *STACKP. */
static void
yyaddDeferredAction (yyGLRStack* yystackp, size_t yyk, yyGLRState* yystate,
		     yyGLRState* rhs, yyRuleNum yyrule)
{
  yySemanticOption* yynewOption =
    &yynewGLRStackItem (yystackp, yyfalse)->yyoption;
  yynewOption->yystate = rhs;
  yynewOption->yyrule = yyrule;
  if (yystackp->yytops.yylookaheadNeeds[yyk])
    {
      yynewOption->yyrawchar = yychar;
      yynewOption->yyval = yylval;
      yynewOption->yyloc = yylloc;
    }
  else
    yynewOption->yyrawchar = YYEMPTY;
  yynewOption->yynext = yystate->yysemantics.yyfirstVal;
  yystate->yysemantics.yyfirstVal = yynewOption;

  YY_RESERVE_GLRSTACK (yystackp);
}

				/* GLRStacks */

/** Initialize SET to a singleton set containing an empty stack.  */
static yybool
yyinitStateSet (yyGLRStateSet* yyset)
{
  yyset->yysize = 1;
  yyset->yycapacity = 16;
  yyset->yystates = (yyGLRState**) YYMALLOC (16 * sizeof yyset->yystates[0]);
  if (! yyset->yystates)
    return yyfalse;
  yyset->yystates[0] = NULL;
  yyset->yylookaheadNeeds =
    (yybool*) YYMALLOC (16 * sizeof yyset->yylookaheadNeeds[0]);
  if (! yyset->yylookaheadNeeds)
    {
      YYFREE (yyset->yystates);
      return yyfalse;
    }
  return yytrue;
}

static void yyfreeStateSet (yyGLRStateSet* yyset)
{
  YYFREE (yyset->yystates);
  YYFREE (yyset->yylookaheadNeeds);
}

/** Initialize STACK to a single empty stack, with total maximum
 *  capacity for all stacks of SIZE.  */
static yybool
yyinitGLRStack (yyGLRStack* yystackp, size_t yysize)
{
  yystackp->yyerrState = 0;
  yynerrs = 0;
  yystackp->yyspaceLeft = yysize;
  yystackp->yyitems =
    (yyGLRStackItem*) YYMALLOC (yysize * sizeof yystackp->yynextFree[0]);
  if (!yystackp->yyitems)
    return yyfalse;
  yystackp->yynextFree = yystackp->yyitems;
  yystackp->yysplitPoint = NULL;
  yystackp->yylastDeleted = NULL;
  return yyinitStateSet (&yystackp->yytops);
}


#if YYSTACKEXPANDABLE
# define YYRELOC(YYFROMITEMS,YYTOITEMS,YYX,YYTYPE) \
  &((YYTOITEMS) - ((YYFROMITEMS) - (yyGLRStackItem*) (YYX)))->YYTYPE

/** If STACK is expandable, extend it.  WARNING: Pointers into the
    stack from outside should be considered invalid after this call.
    We always expand when there are 1 or fewer items left AFTER an
    allocation, so that we can avoid having external pointers exist
    across an allocation.  */
static void
yyexpandGLRStack (yyGLRStack* yystackp)
{
  yyGLRStackItem* yynewItems;
  yyGLRStackItem* yyp0, *yyp1;
  size_t yysize, yynewSize;
  size_t yyn;
  yysize = yystackp->yynextFree - yystackp->yyitems;
  if (YYMAXDEPTH - YYHEADROOM < yysize)
    yyMemoryExhausted (yystackp);
  yynewSize = 2*yysize;
  if (YYMAXDEPTH < yynewSize)
    yynewSize = YYMAXDEPTH;
  yynewItems = (yyGLRStackItem*) YYMALLOC (yynewSize * sizeof yynewItems[0]);
  if (! yynewItems)
    yyMemoryExhausted (yystackp);
  for (yyp0 = yystackp->yyitems, yyp1 = yynewItems, yyn = yysize;
       0 < yyn;
       yyn -= 1, yyp0 += 1, yyp1 += 1)
    {
      *yyp1 = *yyp0;
      if (*(yybool *) yyp0)
	{
	  yyGLRState* yys0 = &yyp0->yystate;
	  yyGLRState* yys1 = &yyp1->yystate;
	  if (yys0->yypred != NULL)
	    yys1->yypred =
	      YYRELOC (yyp0, yyp1, yys0->yypred, yystate);
	  if (! yys0->yyresolved && yys0->yysemantics.yyfirstVal != NULL)
	    yys1->yysemantics.yyfirstVal =
	      YYRELOC(yyp0, yyp1, yys0->yysemantics.yyfirstVal, yyoption);
	}
      else
	{
	  yySemanticOption* yyv0 = &yyp0->yyoption;
	  yySemanticOption* yyv1 = &yyp1->yyoption;
	  if (yyv0->yystate != NULL)
	    yyv1->yystate = YYRELOC (yyp0, yyp1, yyv0->yystate, yystate);
	  if (yyv0->yynext != NULL)
	    yyv1->yynext = YYRELOC (yyp0, yyp1, yyv0->yynext, yyoption);
	}
    }
  if (yystackp->yysplitPoint != NULL)
    yystackp->yysplitPoint = YYRELOC (yystackp->yyitems, yynewItems,
				 yystackp->yysplitPoint, yystate);

  for (yyn = 0; yyn < yystackp->yytops.yysize; yyn += 1)
    if (yystackp->yytops.yystates[yyn] != NULL)
      yystackp->yytops.yystates[yyn] =
	YYRELOC (yystackp->yyitems, yynewItems,
		 yystackp->yytops.yystates[yyn], yystate);
  YYFREE (yystackp->yyitems);
  yystackp->yyitems = yynewItems;
  yystackp->yynextFree = yynewItems + yysize;
  yystackp->yyspaceLeft = yynewSize - yysize;
}
#endif

static void
yyfreeGLRStack (yyGLRStack* yystackp)
{
  YYFREE (yystackp->yyitems);
  yyfreeStateSet (&yystackp->yytops);
}

/** Assuming that S is a GLRState somewhere on STACK, update the
 *  splitpoint of STACK, if needed, so that it is at least as deep as
 *  S.  */
static inline void
yyupdateSplit (yyGLRStack* yystackp, yyGLRState* yys)
{
  if (yystackp->yysplitPoint != NULL && yystackp->yysplitPoint > yys)
    yystackp->yysplitPoint = yys;
}

/** Invalidate stack #K in STACK.  */
static inline void
yymarkStackDeleted (yyGLRStack* yystackp, size_t yyk)
{
  if (yystackp->yytops.yystates[yyk] != NULL)
    yystackp->yylastDeleted = yystackp->yytops.yystates[yyk];
  yystackp->yytops.yystates[yyk] = NULL;
}

/** Undelete the last stack that was marked as deleted.  Can only be
    done once after a deletion, and only when all other stacks have
    been deleted.  */
static void
yyundeleteLastStack (yyGLRStack* yystackp)
{
  if (yystackp->yylastDeleted == NULL || yystackp->yytops.yysize != 0)
    return;
  yystackp->yytops.yystates[0] = yystackp->yylastDeleted;
  yystackp->yytops.yysize = 1;
  YYDPRINTF ((stderr, "Restoring last deleted stack as stack #0.\n"));
  yystackp->yylastDeleted = NULL;
}

static inline void
yyremoveDeletes (yyGLRStack* yystackp)
{
  size_t yyi, yyj;
  yyi = yyj = 0;
  while (yyj < yystackp->yytops.yysize)
    {
      if (yystackp->yytops.yystates[yyi] == NULL)
	{
	  if (yyi == yyj)
	    {
	      YYDPRINTF ((stderr, "Removing dead stacks.\n"));
	    }
	  yystackp->yytops.yysize -= 1;
	}
      else
	{
	  yystackp->yytops.yystates[yyj] = yystackp->yytops.yystates[yyi];
	  /* In the current implementation, it's unnecessary to copy
	     yystackp->yytops.yylookaheadNeeds[yyi] since, after
	     yyremoveDeletes returns, the parser immediately either enters
	     deterministic operation or shifts a token.  However, it doesn't
	     hurt, and the code might evolve to need it.  */
	  yystackp->yytops.yylookaheadNeeds[yyj] =
	    yystackp->yytops.yylookaheadNeeds[yyi];
	  if (yyj != yyi)
	    {
	      YYDPRINTF ((stderr, "Rename stack %lu -> %lu.\n",
			  (unsigned long int) yyi, (unsigned long int) yyj));
	    }
	  yyj += 1;
	}
      yyi += 1;
    }
}

/** Shift to a new state on stack #K of STACK, corresponding to LR state
 * LRSTATE, at input position POSN, with (resolved) semantic value SVAL.  */
static inline void
yyglrShift (yyGLRStack* yystackp, size_t yyk, yyStateNum yylrState,
	    size_t yyposn,
	    YYSTYPE* yyvalp, YYLTYPE* yylocp)
{
  yyGLRState* yynewState = &yynewGLRStackItem (yystackp, yytrue)->yystate;

  yynewState->yylrState = yylrState;
  yynewState->yyposn = yyposn;
  yynewState->yyresolved = yytrue;
  yynewState->yypred = yystackp->yytops.yystates[yyk];
  yynewState->yysemantics.yysval = *yyvalp;
  yynewState->yyloc = *yylocp;
  yystackp->yytops.yystates[yyk] = yynewState;

  YY_RESERVE_GLRSTACK (yystackp);
}

/** Shift stack #K of YYSTACK, to a new state corresponding to LR
 *  state YYLRSTATE, at input position YYPOSN, with the (unresolved)
 *  semantic value of YYRHS under the action for YYRULE.  */
static inline void
yyglrShiftDefer (yyGLRStack* yystackp, size_t yyk, yyStateNum yylrState,
		 size_t yyposn, yyGLRState* rhs, yyRuleNum yyrule)
{
  yyGLRState* yynewState = &yynewGLRStackItem (yystackp, yytrue)->yystate;

  yynewState->yylrState = yylrState;
  yynewState->yyposn = yyposn;
  yynewState->yyresolved = yyfalse;
  yynewState->yypred = yystackp->yytops.yystates[yyk];
  yynewState->yysemantics.yyfirstVal = NULL;
  yystackp->yytops.yystates[yyk] = yynewState;

  /* Invokes YY_RESERVE_GLRSTACK.  */
  yyaddDeferredAction (yystackp, yyk, yynewState, rhs, yyrule);
}

/** Pop the symbols consumed by reduction #RULE from the top of stack
 *  #K of STACK, and perform the appropriate semantic action on their
 *  semantic values.  Assumes that all ambiguities in semantic values
 *  have been previously resolved.  Set *VALP to the resulting value,
 *  and *LOCP to the computed location (if any).  Return value is as
 *  for userAction.  */
static inline YYRESULTTAG
yydoAction (yyGLRStack* yystackp, size_t yyk, yyRuleNum yyrule,
	    YYSTYPE* yyvalp, YYLTYPE* yylocp)
{
  int yynrhs = yyrhsLength (yyrule);

  if (yystackp->yysplitPoint == NULL)
    {
      /* Standard special case: single stack.  */
      yyGLRStackItem* rhs = (yyGLRStackItem*) yystackp->yytops.yystates[yyk];
      YYASSERT (yyk == 0);
      yystackp->yynextFree -= yynrhs;
      yystackp->yyspaceLeft += yynrhs;
      yystackp->yytops.yystates[0] = & yystackp->yynextFree[-1].yystate;
      return yyuserAction (yyrule, yynrhs, rhs,
			   yyvalp, yylocp, yystackp);
    }
  else
    {
      /* At present, doAction is never called in nondeterministic
       * mode, so this branch is never taken.  It is here in
       * anticipation of a future feature that will allow immediate
       * evaluation of selected actions in nondeterministic mode.  */
      int yyi;
      yyGLRState* yys;
      yyGLRStackItem yyrhsVals[YYMAXRHS + YYMAXLEFT + 1];
      yys = yyrhsVals[YYMAXRHS + YYMAXLEFT].yystate.yypred
	= yystackp->yytops.yystates[yyk];
      if (yynrhs == 0)
	/* Set default location.  */
	yyrhsVals[YYMAXRHS + YYMAXLEFT - 1].yystate.yyloc = yys->yyloc;
      for (yyi = 0; yyi < yynrhs; yyi += 1)
	{
	  yys = yys->yypred;
	  YYASSERT (yys);
	}
      yyupdateSplit (yystackp, yys);
      yystackp->yytops.yystates[yyk] = yys;
      return yyuserAction (yyrule, yynrhs, yyrhsVals + YYMAXRHS + YYMAXLEFT - 1,
			   yyvalp, yylocp, yystackp);
    }
}

#if !YYDEBUG
# define YY_REDUCE_PRINT(Args)
#else
# define YY_REDUCE_PRINT(Args)		\
do {					\
  if (yydebug)				\
    yy_reduce_print Args;		\
} while (YYID (0))

/*----------------------------------------------------------.
| Report that the RULE is going to be reduced on stack #K.  |
`----------------------------------------------------------*/

/*ARGSUSED*/ static inline void
yy_reduce_print (yyGLRStack* yystackp, size_t yyk, yyRuleNum yyrule,
		 YYSTYPE* yyvalp, YYLTYPE* yylocp)
{
  int yynrhs = yyrhsLength (yyrule);
  yybool yynormal __attribute__ ((__unused__)) =
    (yystackp->yysplitPoint == NULL);
  yyGLRStackItem* yyvsp = (yyGLRStackItem*) yystackp->yytops.yystates[yyk];
  int yylow = 1;
  int yyi;
  YYUSE (yyvalp);
  YYUSE (yylocp);
  YYFPRINTF (stderr, "Reducing stack %lu by rule %d (line %lu):\n",
	     (unsigned long int) yyk, yyrule - 1,
	     (unsigned long int) yyrline[yyrule]);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
		       &(((yyGLRStackItem const *)yyvsp)[YYFILL ((yyi + 1) - (yynrhs))].yystate.yysemantics.yysval)
		       , &(((yyGLRStackItem const *)yyvsp)[YYFILL ((yyi + 1) - (yynrhs))].yystate.yyloc)		       );
      YYFPRINTF (stderr, "\n");
    }
}
#endif

/** Pop items off stack #K of STACK according to grammar rule RULE,
 *  and push back on the resulting nonterminal symbol.  Perform the
 *  semantic action associated with RULE and store its value with the
 *  newly pushed state, if FORCEEVAL or if STACK is currently
 *  unambiguous.  Otherwise, store the deferred semantic action with
 *  the new state.  If the new state would have an identical input
 *  position, LR state, and predecessor to an existing state on the stack,
 *  it is identified with that existing state, eliminating stack #K from
 *  the STACK.  In this case, the (necessarily deferred) semantic value is
 *  added to the options for the existing state's semantic value.
 */
static inline YYRESULTTAG
yyglrReduce (yyGLRStack* yystackp, size_t yyk, yyRuleNum yyrule,
	     yybool yyforceEval)
{
  size_t yyposn = yystackp->yytops.yystates[yyk]->yyposn;

  if (yyforceEval || yystackp->yysplitPoint == NULL)
    {
      YYSTYPE yysval;
      YYLTYPE yyloc;

      YY_REDUCE_PRINT ((yystackp, yyk, yyrule, &yysval, &yyloc));
      YYCHK (yydoAction (yystackp, yyk, yyrule, &yysval,
			 &yyloc));
      YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyrule], &yysval, &yyloc);
      yyglrShift (yystackp, yyk,
		  yyLRgotoState (yystackp->yytops.yystates[yyk]->yylrState,
				 yylhsNonterm (yyrule)),
		  yyposn, &yysval, &yyloc);
    }
  else
    {
      size_t yyi;
      int yyn;
      yyGLRState* yys, *yys0 = yystackp->yytops.yystates[yyk];
      yyStateNum yynewLRState;

      for (yys = yystackp->yytops.yystates[yyk], yyn = yyrhsLength (yyrule);
	   0 < yyn; yyn -= 1)
	{
	  yys = yys->yypred;
	  YYASSERT (yys);
	}
      yyupdateSplit (yystackp, yys);
      yynewLRState = yyLRgotoState (yys->yylrState, yylhsNonterm (yyrule));
      YYDPRINTF ((stderr,
		  "Reduced stack %lu by rule #%d; action deferred.  Now in state %d.\n",
		  (unsigned long int) yyk, yyrule - 1, yynewLRState));
      for (yyi = 0; yyi < yystackp->yytops.yysize; yyi += 1)
	if (yyi != yyk && yystackp->yytops.yystates[yyi] != NULL)
	  {
	    yyGLRState* yyp, *yysplit = yystackp->yysplitPoint;
	    yyp = yystackp->yytops.yystates[yyi];
	    while (yyp != yys && yyp != yysplit && yyp->yyposn >= yyposn)
	      {
		if (yyp->yylrState == yynewLRState && yyp->yypred == yys)
		  {
		    yyaddDeferredAction (yystackp, yyk, yyp, yys0, yyrule);
		    yymarkStackDeleted (yystackp, yyk);
		    YYDPRINTF ((stderr, "Merging stack %lu into stack %lu.\n",
				(unsigned long int) yyk,
				(unsigned long int) yyi));
		    return yyok;
		  }
		yyp = yyp->yypred;
	      }
	  }
      yystackp->yytops.yystates[yyk] = yys;
      yyglrShiftDefer (yystackp, yyk, yynewLRState, yyposn, yys0, yyrule);
    }
  return yyok;
}

static size_t
yysplitStack (yyGLRStack* yystackp, size_t yyk)
{
  if (yystackp->yysplitPoint == NULL)
    {
      YYASSERT (yyk == 0);
      yystackp->yysplitPoint = yystackp->yytops.yystates[yyk];
    }
  if (yystackp->yytops.yysize >= yystackp->yytops.yycapacity)
    {
      yyGLRState** yynewStates;
      yybool* yynewLookaheadNeeds;

      yynewStates = NULL;

      if (yystackp->yytops.yycapacity
	  > (YYSIZEMAX / (2 * sizeof yynewStates[0])))
	yyMemoryExhausted (yystackp);
      yystackp->yytops.yycapacity *= 2;

      yynewStates =
	(yyGLRState**) YYREALLOC (yystackp->yytops.yystates,
				  (yystackp->yytops.yycapacity
				   * sizeof yynewStates[0]));
      if (yynewStates == NULL)
	yyMemoryExhausted (yystackp);
      yystackp->yytops.yystates = yynewStates;

      yynewLookaheadNeeds =
	(yybool*) YYREALLOC (yystackp->yytops.yylookaheadNeeds,
			     (yystackp->yytops.yycapacity
			      * sizeof yynewLookaheadNeeds[0]));
      if (yynewLookaheadNeeds == NULL)
	yyMemoryExhausted (yystackp);
      yystackp->yytops.yylookaheadNeeds = yynewLookaheadNeeds;
    }
  yystackp->yytops.yystates[yystackp->yytops.yysize]
    = yystackp->yytops.yystates[yyk];
  yystackp->yytops.yylookaheadNeeds[yystackp->yytops.yysize]
    = yystackp->yytops.yylookaheadNeeds[yyk];
  yystackp->yytops.yysize += 1;
  return yystackp->yytops.yysize-1;
}

/** True iff Y0 and Y1 represent identical options at the top level.
 *  That is, they represent the same rule applied to RHS symbols
 *  that produce the same terminal symbols.  */
static yybool
yyidenticalOptions (yySemanticOption* yyy0, yySemanticOption* yyy1)
{
  if (yyy0->yyrule == yyy1->yyrule)
    {
      yyGLRState *yys0, *yys1;
      int yyn;
      for (yys0 = yyy0->yystate, yys1 = yyy1->yystate,
	   yyn = yyrhsLength (yyy0->yyrule);
	   yyn > 0;
	   yys0 = yys0->yypred, yys1 = yys1->yypred, yyn -= 1)
	if (yys0->yyposn != yys1->yyposn)
	  return yyfalse;
      return yytrue;
    }
  else
    return yyfalse;
}

/** Assuming identicalOptions (Y0,Y1), destructively merge the
 *  alternative semantic values for the RHS-symbols of Y1 and Y0.  */
static void
yymergeOptionSets (yySemanticOption* yyy0, yySemanticOption* yyy1)
{
  yyGLRState *yys0, *yys1;
  int yyn;
  for (yys0 = yyy0->yystate, yys1 = yyy1->yystate,
       yyn = yyrhsLength (yyy0->yyrule);
       yyn > 0;
       yys0 = yys0->yypred, yys1 = yys1->yypred, yyn -= 1)
    {
      if (yys0 == yys1)
	break;
      else if (yys0->yyresolved)
	{
	  yys1->yyresolved = yytrue;
	  yys1->yysemantics.yysval = yys0->yysemantics.yysval;
	}
      else if (yys1->yyresolved)
	{
	  yys0->yyresolved = yytrue;
	  yys0->yysemantics.yysval = yys1->yysemantics.yysval;
	}
      else
	{
	  yySemanticOption** yyz0p;
	  yySemanticOption* yyz1;
	  yyz0p = &yys0->yysemantics.yyfirstVal;
	  yyz1 = yys1->yysemantics.yyfirstVal;
	  while (YYID (yytrue))
	    {
	      if (yyz1 == *yyz0p || yyz1 == NULL)
		break;
	      else if (*yyz0p == NULL)
		{
		  *yyz0p = yyz1;
		  break;
		}
	      else if (*yyz0p < yyz1)
		{
		  yySemanticOption* yyz = *yyz0p;
		  *yyz0p = yyz1;
		  yyz1 = yyz1->yynext;
		  (*yyz0p)->yynext = yyz;
		}
	      yyz0p = &(*yyz0p)->yynext;
	    }
	  yys1->yysemantics.yyfirstVal = yys0->yysemantics.yyfirstVal;
	}
    }
}

/** Y0 and Y1 represent two possible actions to take in a given
 *  parsing state; return 0 if no combination is possible,
 *  1 if user-mergeable, 2 if Y0 is preferred, 3 if Y1 is preferred.  */
static int
yypreference (yySemanticOption* y0, yySemanticOption* y1)
{
  yyRuleNum r0 = y0->yyrule, r1 = y1->yyrule;
  int p0 = yydprec[r0], p1 = yydprec[r1];

  if (p0 == p1)
    {
      if (yymerger[r0] == 0 || yymerger[r0] != yymerger[r1])
	return 0;
      else
	return 1;
    }
  if (p0 == 0 || p1 == 0)
    return 0;
  if (p0 < p1)
    return 3;
  if (p1 < p0)
    return 2;
  return 0;
}

static YYRESULTTAG yyresolveValue (yyGLRState* yys,
				   yyGLRStack* yystackp);


/** Resolve the previous N states starting at and including state S.  If result
 *  != yyok, some states may have been left unresolved possibly with empty
 *  semantic option chains.  Regardless of whether result = yyok, each state
 *  has been left with consistent data so that yydestroyGLRState can be invoked
 *  if necessary.  */
static YYRESULTTAG
yyresolveStates (yyGLRState* yys, int yyn,
		 yyGLRStack* yystackp)
{
  if (0 < yyn)
    {
      YYASSERT (yys->yypred);
      YYCHK (yyresolveStates (yys->yypred, yyn-1, yystackp));
      if (! yys->yyresolved)
	YYCHK (yyresolveValue (yys, yystackp));
    }
  return yyok;
}

/** Resolve the states for the RHS of OPT, perform its user action, and return
 *  the semantic value and location.  Regardless of whether result = yyok, all
 *  RHS states have been destroyed (assuming the user action destroys all RHS
 *  semantic values if invoked).  */
static YYRESULTTAG
yyresolveAction (yySemanticOption* yyopt, yyGLRStack* yystackp,
		 YYSTYPE* yyvalp, YYLTYPE* yylocp)
{
  yyGLRStackItem yyrhsVals[YYMAXRHS + YYMAXLEFT + 1];
  int yynrhs;
  int yychar_current;
  YYSTYPE yylval_current;
  YYLTYPE yylloc_current;
  YYRESULTTAG yyflag;

  yynrhs = yyrhsLength (yyopt->yyrule);
  yyflag = yyresolveStates (yyopt->yystate, yynrhs, yystackp);
  if (yyflag != yyok)
    {
      yyGLRState *yys;
      for (yys = yyopt->yystate; yynrhs > 0; yys = yys->yypred, yynrhs -= 1)
	yydestroyGLRState ("Cleanup: popping", yys);
      return yyflag;
    }

  yyrhsVals[YYMAXRHS + YYMAXLEFT].yystate.yypred = yyopt->yystate;
  if (yynrhs == 0)
    /* Set default location.  */
    yyrhsVals[YYMAXRHS + YYMAXLEFT - 1].yystate.yyloc = yyopt->yystate->yyloc;
  yychar_current = yychar;
  yylval_current = yylval;
  yylloc_current = yylloc;
  yychar = yyopt->yyrawchar;
  yylval = yyopt->yyval;
  yylloc = yyopt->yyloc;
  yyflag = yyuserAction (yyopt->yyrule, yynrhs,
			   yyrhsVals + YYMAXRHS + YYMAXLEFT - 1,
			   yyvalp, yylocp, yystackp);
  yychar = yychar_current;
  yylval = yylval_current;
  yylloc = yylloc_current;
  return yyflag;
}

#if YYDEBUG
static void
yyreportTree (yySemanticOption* yyx, int yyindent)
{
  int yynrhs = yyrhsLength (yyx->yyrule);
  int yyi;
  yyGLRState* yys;
  yyGLRState* yystates[1 + YYMAXRHS];
  yyGLRState yyleftmost_state;

  for (yyi = yynrhs, yys = yyx->yystate; 0 < yyi; yyi -= 1, yys = yys->yypred)
    yystates[yyi] = yys;
  if (yys == NULL)
    {
      yyleftmost_state.yyposn = 0;
      yystates[0] = &yyleftmost_state;
    }
  else
    yystates[0] = yys;

  if (yyx->yystate->yyposn < yys->yyposn + 1)
    YYFPRINTF (stderr, "%*s%s -> <Rule %d, empty>\n",
	       yyindent, "", yytokenName (yylhsNonterm (yyx->yyrule)),
	       yyx->yyrule - 1);
  else
    YYFPRINTF (stderr, "%*s%s -> <Rule %d, tokens %lu .. %lu>\n",
	       yyindent, "", yytokenName (yylhsNonterm (yyx->yyrule)),
	       yyx->yyrule - 1, (unsigned long int) (yys->yyposn + 1),
	       (unsigned long int) yyx->yystate->yyposn);
  for (yyi = 1; yyi <= yynrhs; yyi += 1)
    {
      if (yystates[yyi]->yyresolved)
	{
	  if (yystates[yyi-1]->yyposn+1 > yystates[yyi]->yyposn)
	    YYFPRINTF (stderr, "%*s%s <empty>\n", yyindent+2, "",
		       yytokenName (yyrhs[yyprhs[yyx->yyrule]+yyi-1]));
	  else
	    YYFPRINTF (stderr, "%*s%s <tokens %lu .. %lu>\n", yyindent+2, "",
		       yytokenName (yyrhs[yyprhs[yyx->yyrule]+yyi-1]),
		       (unsigned long int) (yystates[yyi - 1]->yyposn + 1),
		       (unsigned long int) yystates[yyi]->yyposn);
	}
      else
	yyreportTree (yystates[yyi]->yysemantics.yyfirstVal, yyindent+2);
    }
}
#endif

/*ARGSUSED*/ static YYRESULTTAG
yyreportAmbiguity (yySemanticOption* yyx0,
		   yySemanticOption* yyx1)
{
  YYUSE (yyx0);
  YYUSE (yyx1);

#if YYDEBUG
  YYFPRINTF (stderr, "Ambiguity detected.\n");
  YYFPRINTF (stderr, "Option 1,\n");
  yyreportTree (yyx0, 2);
  YYFPRINTF (stderr, "\nOption 2,\n");
  yyreportTree (yyx1, 2);
  YYFPRINTF (stderr, "\n");
#endif

  yyerror (YY_("syntax is ambiguous"));
  return yyabort;
}

/** Starting at and including state S1, resolve the location for each of the
 *  previous N1 states that is unresolved.  The first semantic option of a state
 *  is always chosen.  */
static void
yyresolveLocations (yyGLRState* yys1, int yyn1,
		    yyGLRStack *yystackp)
{
  if (0 < yyn1)
    {
      yyresolveLocations (yys1->yypred, yyn1 - 1, yystackp);
      if (!yys1->yyresolved)
	{
	  yySemanticOption *yyoption;
	  yyGLRStackItem yyrhsloc[1 + YYMAXRHS];
	  int yynrhs;
	  int yychar_current;
	  YYSTYPE yylval_current;
	  YYLTYPE yylloc_current;
	  yyoption = yys1->yysemantics.yyfirstVal;
	  YYASSERT (yyoption != NULL);
	  yynrhs = yyrhsLength (yyoption->yyrule);
	  if (yynrhs > 0)
	    {
	      yyGLRState *yys;
	      int yyn;
	      yyresolveLocations (yyoption->yystate, yynrhs,
				  yystackp);
	      for (yys = yyoption->yystate, yyn = yynrhs;
		   yyn > 0;
		   yys = yys->yypred, yyn -= 1)
		yyrhsloc[yyn].yystate.yyloc = yys->yyloc;
	    }
	  else
	    {
	      /* Both yyresolveAction and yyresolveLocations traverse the GSS
		 in reverse rightmost order.  It is only necessary to invoke
		 yyresolveLocations on a subforest for which yyresolveAction
		 would have been invoked next had an ambiguity not been
		 detected.  Thus the location of the previous state (but not
		 necessarily the previous state itself) is guaranteed to be
		 resolved already.  */
	      yyGLRState *yyprevious = yyoption->yystate;
	      yyrhsloc[0].yystate.yyloc = yyprevious->yyloc;
	    }
	  yychar_current = yychar;
	  yylval_current = yylval;
	  yylloc_current = yylloc;
	  yychar = yyoption->yyrawchar;
	  yylval = yyoption->yyval;
	  yylloc = yyoption->yyloc;
	  YYLLOC_DEFAULT ((yys1->yyloc), yyrhsloc, yynrhs);
	  yychar = yychar_current;
	  yylval = yylval_current;
	  yylloc = yylloc_current;
	}
    }
}

/** Resolve the ambiguity represented in state S, perform the indicated
 *  actions, and set the semantic value of S.  If result != yyok, the chain of
 *  semantic options in S has been cleared instead or it has been left
 *  unmodified except that redundant options may have been removed.  Regardless
 *  of whether result = yyok, S has been left with consistent data so that
 *  yydestroyGLRState can be invoked if necessary.  */
static YYRESULTTAG
yyresolveValue (yyGLRState* yys, yyGLRStack* yystackp)
{
  yySemanticOption* yyoptionList = yys->yysemantics.yyfirstVal;
  yySemanticOption* yybest;
  yySemanticOption** yypp;
  yybool yymerge;
  YYSTYPE yysval;
  YYRESULTTAG yyflag;
  YYLTYPE *yylocp = &yys->yyloc;

  yybest = yyoptionList;
  yymerge = yyfalse;
  for (yypp = &yyoptionList->yynext; *yypp != NULL; )
    {
      yySemanticOption* yyp = *yypp;

      if (yyidenticalOptions (yybest, yyp))
	{
	  yymergeOptionSets (yybest, yyp);
	  *yypp = yyp->yynext;
	}
      else
	{
	  switch (yypreference (yybest, yyp))
	    {
	    case 0:
	      yyresolveLocations (yys, 1, yystackp);
	      return yyreportAmbiguity (yybest, yyp);
	      break;
	    case 1:
	      yymerge = yytrue;
	      break;
	    case 2:
	      break;
	    case 3:
	      yybest = yyp;
	      yymerge = yyfalse;
	      break;
	    default:
	      /* This cannot happen so it is not worth a YYASSERT (yyfalse),
		 but some compilers complain if the default case is
		 omitted.  */
	      break;
	    }
	  yypp = &yyp->yynext;
	}
    }

  if (yymerge)
    {
      yySemanticOption* yyp;
      int yyprec = yydprec[yybest->yyrule];
      yyflag = yyresolveAction (yybest, yystackp, &yysval,
				yylocp);
      if (yyflag == yyok)
	for (yyp = yybest->yynext; yyp != NULL; yyp = yyp->yynext)
	  {
	    if (yyprec == yydprec[yyp->yyrule])
	      {
		YYSTYPE yysval_other;
		YYLTYPE yydummy;
		yyflag = yyresolveAction (yyp, yystackp, &yysval_other,
					  &yydummy);
		if (yyflag != yyok)
		  {
		    yydestruct ("Cleanup: discarding incompletely merged value for",
				yystos[yys->yylrState],
				&yysval, yylocp);
		    break;
		  }
		yyuserMerge (yymerger[yyp->yyrule], &yysval, &yysval_other);
	      }
	  }
    }
  else
    yyflag = yyresolveAction (yybest, yystackp, &yysval, yylocp);

  if (yyflag == yyok)
    {
      yys->yyresolved = yytrue;
      yys->yysemantics.yysval = yysval;
    }
  else
    yys->yysemantics.yyfirstVal = NULL;
  return yyflag;
}

static YYRESULTTAG
yyresolveStack (yyGLRStack* yystackp)
{
  if (yystackp->yysplitPoint != NULL)
    {
      yyGLRState* yys;
      int yyn;

      for (yyn = 0, yys = yystackp->yytops.yystates[0];
	   yys != yystackp->yysplitPoint;
	   yys = yys->yypred, yyn += 1)
	continue;
      YYCHK (yyresolveStates (yystackp->yytops.yystates[0], yyn, yystackp
			     ));
    }
  return yyok;
}

static void
yycompressStack (yyGLRStack* yystackp)
{
  yyGLRState* yyp, *yyq, *yyr;

  if (yystackp->yytops.yysize != 1 || yystackp->yysplitPoint == NULL)
    return;

  for (yyp = yystackp->yytops.yystates[0], yyq = yyp->yypred, yyr = NULL;
       yyp != yystackp->yysplitPoint;
       yyr = yyp, yyp = yyq, yyq = yyp->yypred)
    yyp->yypred = yyr;

  yystackp->yyspaceLeft += yystackp->yynextFree - yystackp->yyitems;
  yystackp->yynextFree = ((yyGLRStackItem*) yystackp->yysplitPoint) + 1;
  yystackp->yyspaceLeft -= yystackp->yynextFree - yystackp->yyitems;
  yystackp->yysplitPoint = NULL;
  yystackp->yylastDeleted = NULL;

  while (yyr != NULL)
    {
      yystackp->yynextFree->yystate = *yyr;
      yyr = yyr->yypred;
      yystackp->yynextFree->yystate.yypred = &yystackp->yynextFree[-1].yystate;
      yystackp->yytops.yystates[0] = &yystackp->yynextFree->yystate;
      yystackp->yynextFree += 1;
      yystackp->yyspaceLeft -= 1;
    }
}

static YYRESULTTAG
yyprocessOneStack (yyGLRStack* yystackp, size_t yyk,
		   size_t yyposn)
{
  int yyaction;
  const short int* yyconflicts;
  yyRuleNum yyrule;

  while (yystackp->yytops.yystates[yyk] != NULL)
    {
      yyStateNum yystate = yystackp->yytops.yystates[yyk]->yylrState;
      YYDPRINTF ((stderr, "Stack %lu Entering state %d\n",
		  (unsigned long int) yyk, yystate));

      YYASSERT (yystate != YYFINAL);

      if (yyisDefaultedState (yystate))
	{
	  yyrule = yydefaultAction (yystate);
	  if (yyrule == 0)
	    {
	      YYDPRINTF ((stderr, "Stack %lu dies.\n",
			  (unsigned long int) yyk));
	      yymarkStackDeleted (yystackp, yyk);
	      return yyok;
	    }
	  YYCHK (yyglrReduce (yystackp, yyk, yyrule, yyfalse));
	}
      else
	{
	  yySymbol yytoken;
	  yystackp->yytops.yylookaheadNeeds[yyk] = yytrue;
	  if (yychar == YYEMPTY)
	    {
	      YYDPRINTF ((stderr, "Reading a token: "));
	      yychar = YYLEX;
	    }

	  if (yychar <= YYEOF)
	    {
	      yychar = yytoken = YYEOF;
	      YYDPRINTF ((stderr, "Now at end of input.\n"));
	    }
	  else
	    {
	      yytoken = YYTRANSLATE (yychar);
	      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
	    }

	  yygetLRActions (yystate, yytoken, &yyaction, &yyconflicts);

	  while (*yyconflicts != 0)
	    {
	      size_t yynewStack = yysplitStack (yystackp, yyk);
	      YYDPRINTF ((stderr, "Splitting off stack %lu from %lu.\n",
			  (unsigned long int) yynewStack,
			  (unsigned long int) yyk));
	      YYCHK (yyglrReduce (yystackp, yynewStack,
				  *yyconflicts, yyfalse));
	      YYCHK (yyprocessOneStack (yystackp, yynewStack,
					yyposn));
	      yyconflicts += 1;
	    }

	  if (yyisShiftAction (yyaction))
	    break;
	  else if (yyisErrorAction (yyaction))
	    {
	      YYDPRINTF ((stderr, "Stack %lu dies.\n",
			  (unsigned long int) yyk));
	      yymarkStackDeleted (yystackp, yyk);
	      break;
	    }
	  else
	    YYCHK (yyglrReduce (yystackp, yyk, -yyaction,
				yyfalse));
	}
    }
  return yyok;
}

/*ARGSUSED*/ static void
yyreportSyntaxError (yyGLRStack* yystackp)
{
  if (yystackp->yyerrState == 0)
    {
#if YYERROR_VERBOSE
      int yyn;
      yyn = yypact[yystackp->yytops.yystates[0]->yylrState];
      if (YYPACT_NINF < yyn && yyn <= YYLAST)
	{
	  yySymbol yytoken = YYTRANSLATE (yychar);
	  size_t yysize0 = yytnamerr (NULL, yytokenName (yytoken));
	  size_t yysize = yysize0;
	  size_t yysize1;
	  yybool yysize_overflow = yyfalse;
	  char* yymsg = NULL;
	  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
	  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
	  int yyx;
	  char *yyfmt;
	  char const *yyf;
	  static char const yyunexpected[] = "syntax error, unexpected %s";
	  static char const yyexpecting[] = ", expecting %s";
	  static char const yyor[] = " or %s";
	  char yyformat[sizeof yyunexpected
			+ sizeof yyexpecting - 1
			+ ((YYERROR_VERBOSE_ARGS_MAXIMUM - 2)
			   * (sizeof yyor - 1))];
	  char const *yyprefix = yyexpecting;

	  /* Start YYX at -YYN if negative to avoid negative indexes in
	     YYCHECK.  */
	  int yyxbegin = yyn < 0 ? -yyn : 0;

	  /* Stay within bounds of both yycheck and yytname.  */
	  int yychecklim = YYLAST - yyn + 1;
	  int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
	  int yycount = 1;

	  yyarg[0] = yytokenName (yytoken);
	  yyfmt = yystpcpy (yyformat, yyunexpected);

	  for (yyx = yyxbegin; yyx < yyxend; ++yyx)
	    if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
	      {
		if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
		  {
		    yycount = 1;
		    yysize = yysize0;
		    yyformat[sizeof yyunexpected - 1] = '\0';
		    break;
		  }
		yyarg[yycount++] = yytokenName (yyx);
		yysize1 = yysize + yytnamerr (NULL, yytokenName (yyx));
		yysize_overflow |= yysize1 < yysize;
		yysize = yysize1;
		yyfmt = yystpcpy (yyfmt, yyprefix);
		yyprefix = yyor;
	      }

	  yyf = YY_(yyformat);
	  yysize1 = yysize + strlen (yyf);
	  yysize_overflow |= yysize1 < yysize;
	  yysize = yysize1;

	  if (!yysize_overflow)
	    yymsg = (char *) YYMALLOC (yysize);

	  if (yymsg)
	    {
	      char *yyp = yymsg;
	      int yyi = 0;
	      while ((*yyp = *yyf))
		{
		  if (*yyp == '%' && yyf[1] == 's' && yyi < yycount)
		    {
		      yyp += yytnamerr (yyp, yyarg[yyi++]);
		      yyf += 2;
		    }
		  else
		    {
		      yyp++;
		      yyf++;
		    }
		}
	      yyerror (yymsg);
	      YYFREE (yymsg);
	    }
	  else
	    {
	      yyerror (YY_("syntax error"));
	      yyMemoryExhausted (yystackp);
	    }
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror (YY_("syntax error"));
      yynerrs += 1;
    }
}

/* Recover from a syntax error on *YYSTACKP, assuming that *YYSTACKP->YYTOKENP,
   yylval, and yylloc are the syntactic category, semantic value, and location
   of the lookahead.  */
/*ARGSUSED*/ static void
yyrecoverSyntaxError (yyGLRStack* yystackp)
{
  size_t yyk;
  int yyj;

  if (yystackp->yyerrState == 3)
    /* We just shifted the error token and (perhaps) took some
       reductions.  Skip tokens until we can proceed.  */
    while (YYID (yytrue))
      {
	yySymbol yytoken;
	if (yychar == YYEOF)
	  yyFail (yystackp, NULL);
	if (yychar != YYEMPTY)
	  {
	    /* We throw away the lookahead, but the error range
	       of the shifted error token must take it into account.  */
	    yyGLRState *yys = yystackp->yytops.yystates[0];
	    yyGLRStackItem yyerror_range[3];
	    yyerror_range[1].yystate.yyloc = yys->yyloc;
	    yyerror_range[2].yystate.yyloc = yylloc;
	    YYLLOC_DEFAULT ((yys->yyloc), yyerror_range, 2);
	    yytoken = YYTRANSLATE (yychar);
	    yydestruct ("Error: discarding",
			yytoken, &yylval, &yylloc);
	  }
	YYDPRINTF ((stderr, "Reading a token: "));
	yychar = YYLEX;
	if (yychar <= YYEOF)
	  {
	    yychar = yytoken = YYEOF;
	    YYDPRINTF ((stderr, "Now at end of input.\n"));
	  }
	else
	  {
	    yytoken = YYTRANSLATE (yychar);
	    YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
	  }
	yyj = yypact[yystackp->yytops.yystates[0]->yylrState];
	if (yyis_pact_ninf (yyj))
	  return;
	yyj += yytoken;
	if (yyj < 0 || YYLAST < yyj || yycheck[yyj] != yytoken)
	  {
	    if (yydefact[yystackp->yytops.yystates[0]->yylrState] != 0)
	      return;
	  }
	else if (yytable[yyj] != 0 && ! yyis_table_ninf (yytable[yyj]))
	  return;
      }

  /* Reduce to one stack.  */
  for (yyk = 0; yyk < yystackp->yytops.yysize; yyk += 1)
    if (yystackp->yytops.yystates[yyk] != NULL)
      break;
  if (yyk >= yystackp->yytops.yysize)
    yyFail (yystackp, NULL);
  for (yyk += 1; yyk < yystackp->yytops.yysize; yyk += 1)
    yymarkStackDeleted (yystackp, yyk);
  yyremoveDeletes (yystackp);
  yycompressStack (yystackp);

  /* Now pop stack until we find a state that shifts the error token.  */
  yystackp->yyerrState = 3;
  while (yystackp->yytops.yystates[0] != NULL)
    {
      yyGLRState *yys = yystackp->yytops.yystates[0];
      yyj = yypact[yys->yylrState];
      if (! yyis_pact_ninf (yyj))
	{
	  yyj += YYTERROR;
	  if (0 <= yyj && yyj <= YYLAST && yycheck[yyj] == YYTERROR
	      && yyisShiftAction (yytable[yyj]))
	    {
	      /* Shift the error token having adjusted its location.  */
	      YYLTYPE yyerrloc;
	      yystackp->yyerror_range[2].yystate.yyloc = yylloc;
	      YYLLOC_DEFAULT (yyerrloc, (yystackp->yyerror_range), 2);
	      YY_SYMBOL_PRINT ("Shifting", yystos[yytable[yyj]],
			       &yylval, &yyerrloc);
	      yyglrShift (yystackp, 0, yytable[yyj],
			  yys->yyposn, &yylval, &yyerrloc);
	      yys = yystackp->yytops.yystates[0];
	      break;
	    }
	}
      yystackp->yyerror_range[1].yystate.yyloc = yys->yyloc;
      if (yys->yypred != NULL)
	yydestroyGLRState ("Error: popping", yys);
      yystackp->yytops.yystates[0] = yys->yypred;
      yystackp->yynextFree -= 1;
      yystackp->yyspaceLeft += 1;
    }
  if (yystackp->yytops.yystates[0] == NULL)
    yyFail (yystackp, NULL);
}

#define YYCHK1(YYE)							     \
  do {									     \
    switch (YYE) {							     \
    case yyok:								     \
      break;								     \
    case yyabort:							     \
      goto yyabortlab;							     \
    case yyaccept:							     \
      goto yyacceptlab;							     \
    case yyerr:								     \
      goto yyuser_error;						     \
    default:								     \
      goto yybuglab;							     \
    }									     \
  } while (YYID (0))


/*----------.
| yyparse.  |
`----------*/

int
yyparse (void)
{
  int yyresult;
  yyGLRStack yystack;
  yyGLRStack* const yystackp = &yystack;
  size_t yyposn;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yychar = YYEMPTY;
  yylval = yyval_default;

#if YYLTYPE_IS_TRIVIAL
  yylloc.first_line   = yylloc.last_line   = 1;
  yylloc.first_column = yylloc.last_column = 1;
#endif


  if (! yyinitGLRStack (yystackp, YYINITDEPTH))
    goto yyexhaustedlab;
  switch (YYSETJMP (yystack.yyexception_buffer))
    {
    case 0: break;
    case 1: goto yyabortlab;
    case 2: goto yyexhaustedlab;
    default: goto yybuglab;
    }
  yyglrShift (&yystack, 0, 0, 0, &yylval, &yylloc);
  yyposn = 0;

  while (YYID (yytrue))
    {
      /* For efficiency, we have two loops, the first of which is
	 specialized to deterministic operation (single stack, no
	 potential ambiguity).  */
      /* Standard mode */
      while (YYID (yytrue))
	{
	  yyRuleNum yyrule;
	  int yyaction;
	  const short int* yyconflicts;

	  yyStateNum yystate = yystack.yytops.yystates[0]->yylrState;
	  YYDPRINTF ((stderr, "Entering state %d\n", yystate));
	  if (yystate == YYFINAL)
	    goto yyacceptlab;
	  if (yyisDefaultedState (yystate))
	    {
	      yyrule = yydefaultAction (yystate);
	      if (yyrule == 0)
		{
		  yystack.yyerror_range[1].yystate.yyloc = yylloc;
		  yyreportSyntaxError (&yystack);
		  goto yyuser_error;
		}
	      YYCHK1 (yyglrReduce (&yystack, 0, yyrule, yytrue));
	    }
	  else
	    {
	      yySymbol yytoken;
	      if (yychar == YYEMPTY)
		{
		  YYDPRINTF ((stderr, "Reading a token: "));
		  yychar = YYLEX;
		}

	      if (yychar <= YYEOF)
		{
		  yychar = yytoken = YYEOF;
		  YYDPRINTF ((stderr, "Now at end of input.\n"));
		}
	      else
		{
		  yytoken = YYTRANSLATE (yychar);
		  YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
		}

	      yygetLRActions (yystate, yytoken, &yyaction, &yyconflicts);
	      if (*yyconflicts != 0)
		break;
	      if (yyisShiftAction (yyaction))
		{
		  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);
		  yychar = YYEMPTY;
		  yyposn += 1;
		  yyglrShift (&yystack, 0, yyaction, yyposn, &yylval, &yylloc);
		  if (0 < yystack.yyerrState)
		    yystack.yyerrState -= 1;
		}
	      else if (yyisErrorAction (yyaction))
		{
		  yystack.yyerror_range[1].yystate.yyloc = yylloc;
		  yyreportSyntaxError (&yystack);
		  goto yyuser_error;
		}
	      else
		YYCHK1 (yyglrReduce (&yystack, 0, -yyaction, yytrue));
	    }
	}

      while (YYID (yytrue))
	{
	  yySymbol yytoken_to_shift;
	  size_t yys;

	  for (yys = 0; yys < yystack.yytops.yysize; yys += 1)
	    yystackp->yytops.yylookaheadNeeds[yys] = yychar != YYEMPTY;

	  /* yyprocessOneStack returns one of three things:

	      - An error flag.  If the caller is yyprocessOneStack, it
		immediately returns as well.  When the caller is finally
		yyparse, it jumps to an error label via YYCHK1.

	      - yyok, but yyprocessOneStack has invoked yymarkStackDeleted
		(&yystack, yys), which sets the top state of yys to NULL.  Thus,
		yyparse's following invocation of yyremoveDeletes will remove
		the stack.

	      - yyok, when ready to shift a token.

	     Except in the first case, yyparse will invoke yyremoveDeletes and
	     then shift the next token onto all remaining stacks.  This
	     synchronization of the shift (that is, after all preceding
	     reductions on all stacks) helps prevent double destructor calls
	     on yylval in the event of memory exhaustion.  */

	  for (yys = 0; yys < yystack.yytops.yysize; yys += 1)
	    YYCHK1 (yyprocessOneStack (&yystack, yys, yyposn));
	  yyremoveDeletes (&yystack);
	  if (yystack.yytops.yysize == 0)
	    {
	      yyundeleteLastStack (&yystack);
	      if (yystack.yytops.yysize == 0)
		yyFail (&yystack, YY_("syntax error"));
	      YYCHK1 (yyresolveStack (&yystack));
	      YYDPRINTF ((stderr, "Returning to deterministic operation.\n"));
	      yystack.yyerror_range[1].yystate.yyloc = yylloc;
	      yyreportSyntaxError (&yystack);
	      goto yyuser_error;
	    }

	  /* If any yyglrShift call fails, it will fail after shifting.  Thus,
	     a copy of yylval will already be on stack 0 in the event of a
	     failure in the following loop.  Thus, yychar is set to YYEMPTY
	     before the loop to make sure the user destructor for yylval isn't
	     called twice.  */
	  yytoken_to_shift = YYTRANSLATE (yychar);
	  yychar = YYEMPTY;
	  yyposn += 1;
	  for (yys = 0; yys < yystack.yytops.yysize; yys += 1)
	    {
	      int yyaction;
	      const short int* yyconflicts;
	      yyStateNum yystate = yystack.yytops.yystates[yys]->yylrState;
	      yygetLRActions (yystate, yytoken_to_shift, &yyaction,
			      &yyconflicts);
	      /* Note that yyconflicts were handled by yyprocessOneStack.  */
	      YYDPRINTF ((stderr, "On stack %lu, ", (unsigned long int) yys));
	      YY_SYMBOL_PRINT ("shifting", yytoken_to_shift, &yylval, &yylloc);
	      yyglrShift (&yystack, yys, yyaction, yyposn,
			  &yylval, &yylloc);
	      YYDPRINTF ((stderr, "Stack %lu now in state #%d\n",
			  (unsigned long int) yys,
			  yystack.yytops.yystates[yys]->yylrState));
	    }

	  if (yystack.yytops.yysize == 1)
	    {
	      YYCHK1 (yyresolveStack (&yystack));
	      YYDPRINTF ((stderr, "Returning to deterministic operation.\n"));
	      yycompressStack (&yystack);
	      break;
	    }
	}
      continue;
    yyuser_error:
      yyrecoverSyntaxError (&yystack);
      yyposn = yystack.yytops.yystates[0]->yyposn;
    }

 yyacceptlab:
  yyresult = 0;
  goto yyreturn;

 yybuglab:
  YYASSERT (yyfalse);
  goto yyabortlab;

 yyabortlab:
  yyresult = 1;
  goto yyreturn;

 yyexhaustedlab:
  yyerror (YY_("memory exhausted"));
  yyresult = 2;
  goto yyreturn;

 yyreturn:
  if (yychar != YYEMPTY)
    yydestruct ("Cleanup: discarding lookahead",
		YYTRANSLATE (yychar),
		&yylval, &yylloc);

  /* If the stack is well-formed, pop the stack until it is empty,
     destroying its entries as we go.  But free the stack regardless
     of whether it is well-formed.  */
  if (yystack.yyitems)
    {
      yyGLRState** yystates = yystack.yytops.yystates;
      if (yystates)
	{
	  size_t yysize = yystack.yytops.yysize;
	  size_t yyk;
	  for (yyk = 0; yyk < yysize; yyk += 1)
	    if (yystates[yyk])
	      {
		while (yystates[yyk])
		  {
		    yyGLRState *yys = yystates[yyk];
		    yystack.yyerror_range[1].yystate.yyloc = yys->yyloc;
		    if (yys->yypred != NULL)
		      yydestroyGLRState ("Cleanup: popping", yys);
		    yystates[yyk] = yys->yypred;
		    yystack.yynextFree -= 1;
		    yystack.yyspaceLeft += 1;
		  }
		break;
	      }
	}
      yyfreeGLRStack (&yystack);
    }

  /* Make sure YYID is used.  */
  return YYID (yyresult);
}

/* DEBUGGING ONLY */
#if YYDEBUG
static void yypstack (yyGLRStack* yystackp, size_t yyk)
  __attribute__ ((__unused__));
static void yypdumpstack (yyGLRStack* yystackp) __attribute__ ((__unused__));

static void
yy_yypstack (yyGLRState* yys)
{
  if (yys->yypred)
    {
      yy_yypstack (yys->yypred);
      YYFPRINTF (stderr, " -> ");
    }
  YYFPRINTF (stderr, "%d@%lu", yys->yylrState,
             (unsigned long int) yys->yyposn);
}

static void
yypstates (yyGLRState* yyst)
{
  if (yyst == NULL)
    YYFPRINTF (stderr, "<null>");
  else
    yy_yypstack (yyst);
  YYFPRINTF (stderr, "\n");
}

static void
yypstack (yyGLRStack* yystackp, size_t yyk)
{
  yypstates (yystackp->yytops.yystates[yyk]);
}

#define YYINDEX(YYX)							     \
    ((YYX) == NULL ? -1 : (yyGLRStackItem*) (YYX) - yystackp->yyitems)


static void
yypdumpstack (yyGLRStack* yystackp)
{
  yyGLRStackItem* yyp;
  size_t yyi;
  for (yyp = yystackp->yyitems; yyp < yystackp->yynextFree; yyp += 1)
    {
      YYFPRINTF (stderr, "%3lu. ",
                 (unsigned long int) (yyp - yystackp->yyitems));
      if (*(yybool *) yyp)
	{
	  YYFPRINTF (stderr, "Res: %d, LR State: %d, posn: %lu, pred: %ld",
		     yyp->yystate.yyresolved, yyp->yystate.yylrState,
		     (unsigned long int) yyp->yystate.yyposn,
		     (long int) YYINDEX (yyp->yystate.yypred));
	  if (! yyp->yystate.yyresolved)
	    YYFPRINTF (stderr, ", firstVal: %ld",
		       (long int) YYINDEX (yyp->yystate
                                             .yysemantics.yyfirstVal));
	}
      else
	{
	  YYFPRINTF (stderr, "Option. rule: %d, state: %ld, next: %ld",
		     yyp->yyoption.yyrule - 1,
		     (long int) YYINDEX (yyp->yyoption.yystate),
		     (long int) YYINDEX (yyp->yyoption.yynext));
	}
      YYFPRINTF (stderr, "\n");
    }
  YYFPRINTF (stderr, "Tops:");
  for (yyi = 0; yyi < yystackp->yytops.yysize; yyi += 1)
    YYFPRINTF (stderr, "%lu: %ld; ", (unsigned long int) yyi,
	       (long int) YYINDEX (yystackp->yytops.yystates[yyi]));
  YYFPRINTF (stderr, "\n");
}
#endif



/* Line 2634 of glr.c  */
#line 1947 "g:\\VerilogProject\\doxygen-1.5.8\\src\\\\..\\src\\verilogparser.y"

//------ ------------------------------------------------------------------------------------------------

 Entry* getCurrVerilogEntry(){return current;}
 Entry* getCurrVerilog(){return currentVerilog; }
 QCString getCurrVerilogParsingClass(){return currVerilogClass; }

 void initVerilogParser(Entry* ee,bool pc){
  identVerilog.resize(0);
  currVerilogInst.resize(0);
  currVerilogClass.resize(0);
  prevDocEntryVerilog.reset();
  currentVerilog=0;
  generateItem=false;
  currentFunctionVerilog=0;
  parseCode=pc;
  briefString.resize(0);
  briefLine=0;
if(pc) return;
  current_rootVerilog=ee;
  lastModule=0;
  current=new Entry;
  VerilogDocGen::initEntry(current);
  current_rootVerilog->name=QCString("XXX"); // dummy name for root
}

 Entry* VerilogDocGen::makeNewEntry(char* name,int sec,int spec,int line,bool add){
 
  Entry *e=current;
 
  if(e->briefLine>0 && e->brief.data())
  {
    briefLine=line;
    briefString=e->brief;
  }

  if(line==briefLine && briefString.data())
  {
   e->brief=briefString;
  }

 if(parseCode) // should not happen!
 assert(0);

if(add){ // features like 'include xxx or 'define xxx must not be inserted here
 if(lastModule)
    addSubEntry(lastModule,e); 
  else
    addSubEntry(current_rootVerilog,e); 
}
   if(line){
  	  e->bodyLine=line;
      e->startLine=line;
  }else
   {
     e->bodyLine=getVerilogPrevLine();
     e->startLine=getVerilogPrevLine();
   }
   
  e->section=sec;
  e->spec=spec;
  e->name=name;
  e->name.stripPrefix("\\");// escaped_identifier ??

  current=new Entry;
  VerilogDocGen::initEntry(current);
  
  return e;
 }

void addSubEntry(Entry* root, Entry* e) {
 if(e==NULL || root==NULL) return;
  root->addSubEntry(e);
 } 




//-------------------------------------------------------------------------

// extracts module/primitive name

void parseModule(){
 
 QCString mod(getVerilogString());
 VhdlDocGen::deleteAllChars(mod,'\n');
 VhdlDocGen::deleteAllChars(mod,' ');
 VhdlDocGen::deleteAllChars(mod,';');
 VhdlDocGen::deleteAllChars(mod,'(');
 
 QRegExp reg("[^_a-zA-Z0-9$]");

 int ll=mod.find(reg);

 if(ll>-1){
//  char c=mod.at(ll);
  QCString val=mod.remove(ll,1);

 }

//if(mod.len>80)

 if(parseCode) {
 //generateVerilogClassOrGlobalLink(mod.data());
 currVerilogClass=mod;
 return;
 }
  currentVerilog->name=mod;
 }//parseModuleName


// extracts module instances [ module_name name,module_name #(...) name]

void parseModuleInst(QCString& first, QCString& sec) {
 
if(currVerilogType==VerilogDocGen::DEFPARAM || generateItem ) return;



 VhdlDocGen::deleteAllChars(sec,'(');
 VhdlDocGen::deleteAllChars(sec,'\n');
 VhdlDocGen::deleteAllChars(sec,')');
 VhdlDocGen::deleteAllChars(sec,' ');
 VhdlDocGen::deleteAllChars(sec,',');
 VhdlDocGen::deleteAllChars(sec,';');
 QCString temp=sec;
//while(sec.stripPrefix(" "));

if(sec!=first && (sec.contains("#")==0))
{ 
 //QStringList ql=QStringList::split(first.data(),sec,false);
int oo=sec.findRev(first.data());
if(oo>0) 
 sec=sec.left(oo);
}
else
 sec=getLastLetter();

if(temp.contains("#"))
{ 
 int ii=temp.find("#");
 sec=temp.left(ii);
while(sec.stripPrefix(" "));
}


 if(parseCode){
     VhdlDocGen::deleteAllChars(sec,'\t');
   currVerilogInst=sec;
   return;
  }
 else {
  Entry* pTemp=VerilogDocGen::makeNewEntry(sec.data(),Entry::VARIABLE_SEC,VerilogDocGen::COMPONENT,moduleLine);
  pTemp->type=first;
 
 if(sec==first)return;
if(currentVerilog)
 if(!findExtendsComponent(currentVerilog->extends,sec)){	
  	BaseInfo *bb=new BaseInfo(sec,Private,Normal);
    currentVerilog->extends->append(bb);						
   }
  }
}


void parseListOfPorts() {
 
  QCString type;

 QCString mod(getVerilogString());
 
 VhdlDocGen::deleteAllChars(mod,' ');
 VhdlDocGen::deleteAllChars(mod,'\n');
 VhdlDocGen::deleteAllChars(mod,';');
 VhdlDocGen::deleteAllChars(mod,')');
 VhdlDocGen::deleteAllChars(mod,'(');
  QStringList ql=QStringList::split(",",mod,false);
  QCString name=(QCString)ql[0];
if(!parseCode) {
  for(uint j=0;j<ql.count();j++) {
  QCString name=(QCString)ql[j];
   int i=name.find('[');
  if(i > 0){
    type=mod.right(mod.length()-i);
    name=mod.left(i);
  }
  
 name.prepend(VhdlDocGen::getRecordNumber().data());
 Entry* pTemp=VerilogDocGen::makeNewEntry(name.data(),Entry::VARIABLE_SEC,VerilogDocGen::PORT,c_lloc.first_line);
  pTemp->type=type; 
   }
  return;
 }	

 }//parseListOfPorts



void parseReg(Entry* e){

// "reg"|"integer\real\event"|wire"|"tri"|"tri1"|"supply0"|"wand"|"triand"|"tri0"|"supply1"|"wor"|"trior"|"trireg"

static QCString prevType;
static QCString sigType;
static QRegExp qregg("[ \\[]");
QCString regType;
QCString qcs;

int p,l;
     

 if((generateItem || CurrState==VerilogDocGen::STATE_FUNCTION || CurrState==VerilogDocGen::STATE_TASK )) return;

QCString mod(getVerilogString());

int port_type=0;

VhdlDocGen::deleteAllChars(mod,'(');
VhdlDocGen::deleteAllChars(mod,')');
VhdlDocGen::deleteAllChars(mod,';');
VhdlDocGen::deleteAllChars(mod,'\n');
VhdlDocGen::deleteAllChars(mod,',');

if(mod.contains("="))
{
 int i=mod.find("=");
 //qcs=mod.right(mod.length()-i-1);
 VhdlDocGen::deleteAllChars(qcs,' ');
 mod=mod.left(i);
}
  
 mod=mod.simplifyWhiteSpace(); 
  
//while(mod.stripPrefix(" "));
  p=qregg.match(mod,0,&l);

 if(p>0){
  sigType=mod.left(p);
  prevType.resize(0);
  mod.stripPrefix(sigType.data());
  while(mod.stripPrefix(" "));
  if(!mod.stripPrefix("signed ")){
  if(mod.stripPrefix("signed["))
    {mod.prepend("[");sigType.append(" signed ");}
  if(mod.stripPrefix("scalared "))
   sigType.append(" scalared ");
  if(mod.stripPrefix("vectored "))
    sigType.append(" vectored ");
 }
// else
  
}

 
 while(mod.stripPrefix(" "));
 

VhdlDocGen::deleteAllChars(mod,' ');

  int i=mod.find(']');
  int h=mod.find('[');

  if(h==0){
  	prevType+=mod.left(i+1);
  	mod=mod.right(mod.length()-i-1);
  h=mod.find('[');
  }

  if(h > 0){
   if(port_type!=2){ 
	regType=mod.right(mod.length()-h);
    mod=mod.left(h);
   }
   else {
    int ii=mod.find('[');
	if(ii>0){
  	prevType=mod.mid(ii,mod.length());
   	mod=mod.left(ii);
   }
  }
 }

  QStringList ql=QStringList::split(",",mod,false);
 uint len=ql.count() ;
 for(uint j=0;j<len;j++) {
  QCString name=(QCString)ql[j];
  name.prepend(VhdlDocGen::getRecordNumber().data());
 
  Entry* pTemp=VerilogDocGen::makeNewEntry(name.data(),Entry::VARIABLE_SEC,getVerilogPrevLine());
 // pTemp->type=prevType;
 
  if((prevType.isEmpty() && len==1) || (!regType.isEmpty() && len==1))
     pTemp->type=regType;
 else
  pTemp->args=regType;
    
  pTemp->args+=sigType+prevType; 
 // if(!prevType.isEmpty() && !regType.isEmpty())
 // pTemp->args+=prevType; 

 pTemp->args+=qcs;
  pTemp->spec=VerilogDocGen::SIGNAL;//currVerilogType;
  
  regType=prevType;
  if(getVerilogToken()==SEM_TOK)
   { prevType="";sigType="";}
  
  }
} // parsReg


// extracts function/task prototype 

void parseFunction(Entry* curF)
{
  QCString mod(getVerilogString());
  QCString type; 
 
 VhdlDocGen::deleteAllChars(mod,'\n');
 VhdlDocGen::deleteAllChars(mod,';');
  while(mod.stripPrefix(" "));
 
  int i=mod.findRev(']');
  if(i > 0){
    type=mod.left(i+1);
   	mod=mod.right(mod.length()-i-1);
  }
  else {
  QStringList ql=QStringList::split(" ",mod,false);
  if(ql.count()>1) {
    type=(QCString)ql[0];
	mod=(QCString)ql[1];
  }
  }
 
 VhdlDocGen::deleteAllChars(mod,' ');
 VhdlDocGen::deleteAllChars(type,' ');

  curF->name+=mod;
  if(type.stripPrefix("automatic"))
   curF->type+="automatic "+type; 
   else
  curF->type+=type;
}
							   

// extract (local)parameter declaration 

void parseParam(Entry* e)
{
   QCString prevType,qcs;
  QRegExp regg("[ \t]");

  if((CurrState==VerilogDocGen::STATE_FUNCTION || CurrState==VerilogDocGen::STATE_TASK  || generateItem)) return;
  
  QCString mod(getVerilogString());
  VhdlDocGen::deleteAllChars(mod,';');
  VhdlDocGen::deleteAllChars(mod,'\n');
  VhdlDocGen::deleteAllChars(mod,',');

if(mod.contains("="))
{
 int i=mod.find("=");
 qcs=mod.right(mod.length()-i-1);
 while(qcs.stripPrefix(" "));
 mod=mod.left(i);
}

 while(mod.stripPrefix(" "));

 int j=mod.find(regg,0);
			 if(j>0){
			 bool bb=false;
			 QCString sem=mod.mid(0,j);
			 if(sem=="integer"){ prevType=sem;bb=true;}
			 else if(sem=="real"){prevType=sem;bb=true;}
			 else if(sem=="realtime"){prevType=sem;bb=true;}
			 else if(sem=="time"){prevType=sem;bb=true;}
			 else if(sem=="signed"){prevType=sem;bb=true;}
			 else if(sem=="wire"){prevType=sem;bb=true;}
			 if(bb)
			 mod.stripPrefix(sem.data());
			 }

 
 while(mod.stripPrefix(" "));
  
  int i=mod.find(']');
  if(i > 0){
    prevType+=" ";
	prevType+=mod.left(i+1);
   	mod=mod.right(mod.length()-i-1);
  }
 

  VhdlDocGen::deleteAllChars(mod,' ');


// each local member must get its unique number, because in Verilog
// two local variables can have the same identifier.
// ( input Q, reg Q)
  mod.prepend(VhdlDocGen::getRecordNumber().data());
 
  Entry* pTemp=VerilogDocGen::makeNewEntry(mod.data(),Entry::VARIABLE_SEC,VerilogDocGen::PARAMETER,getVerilogPrevLine());
  //pTemp->fileName+=getVerilogParsingFile();
  pTemp->type=prevType;
  pTemp->args=qcs;
  
  
}

// extract  input/output ports

void parsePortDir(Entry* e,int port)
{

static QCString prevType;
static QCString type; 

QCString mod(getVerilogString());
 VhdlDocGen::deleteAllChars(mod,'\n');
 VhdlDocGen::deleteAllChars(mod,')');
 VhdlDocGen::deleteAllChars(mod,'(');
 VhdlDocGen::deleteAllChars(mod,';');
 VhdlDocGen::deleteAllChars(mod,',');

 while(mod.stripPrefix(" "));


if(mod.stripPrefix("input"))
 prevType="";
else if(mod.stripPrefix("output"))
  prevType=""; 
else if(mod.stripPrefix("inout"))
  prevType="";
else {
             QRegExp regg("[ \\[]");
  			 int j=mod.find(regg,0);
			 if(j>0){
			 type=mod.mid(0,j);
			 mod.stripPrefix(type.data());
			 }
	 } 


while(mod.stripPrefix(" "));
 
QRegExp regg("[ \t]");
 int j=mod.find(regg,0);
			 if(j>0){
			 bool bb=false;
			 QCString sem=mod.mid(0,j);
			 if(sem=="integer"){ prevType=sem;bb=true;}
			 else if(sem=="real"){prevType=sem;bb=true;}
			 else if(sem=="realtime"){prevType=sem;bb=true;}
			 else if(sem=="time"){prevType=sem;bb=true;}
			 else if(sem=="signed"){prevType=sem;bb=true;}
			 else if(sem=="wire"){prevType=sem;bb=true;}
			 if(bb)
			 mod.stripPrefix(sem.data());
			 }

while(mod.stripPrefix(" "));
  
  int i=mod.findRev(']');
  if(i > 0){
    prevType+=" ";
	prevType+=mod.left(i+1);
   	mod=mod.right(mod.length()-i-1);
  }
  else{ 
  int j=mod.find(regg,0);
   if(j>0){
    QCString sem=mod.mid(0,j);
	if(sem=="reg"){		
     mod=mod.right(mod.length()-j-1);
     prevType+=" reg";
     }
    }
   }
  
  VhdlDocGen::deleteAllChars(mod,' ');
  mod.prepend(VhdlDocGen::getRecordNumber().data());
  if(CurrState==VerilogDocGen::STATE_MODULE){  
  Entry* pTemp=VerilogDocGen::makeNewEntry(mod.data(),Entry::VARIABLE_SEC,0,c_lloc.first_line);
  pTemp->type=prevType;
  pTemp->args=type;
   assert(currVerilogType!=0);
  pTemp->spec=currVerilogType;
//   VerilogDocGen::addSubEntry(currentVerilog,pTemp);
  }
  else
  { 
   if(CurrState==VerilogDocGen::STATE_FUNCTION){
      Argument *arg=new Argument;
      
      switch(currVerilogType) {
      
      case VerilogDocGen::INPUT: arg->type="Input";break;
      case VerilogDocGen::INOUT:arg->type="Inout";break;         
      case VerilogDocGen::OUTPUT:arg->type="Output";break;         
      default:break;
      }                           
        arg->defval=prevType;                         
        arg->name=mod;//(QCString)ql[j];	
	  currentFunctionVerilog->argList->append(arg);
	  VerilogDocGen::adjustMemberName(mod); 
	  currentFunctionVerilog->args+=mod;//(QCString)ql[j]+",";
  } 
 }
 

  if(getVerilogToken()==SEM_TOK)//end of line
  {prevType="";type="";}
}

void parseAlways(bool bBody)
{

if(currVerilogType!=VerilogDocGen::ALWAYS || generateItem) return ;

QRegExp regg1("[ \t]or[ \t]");

QCString mod(getVerilogString());
QCString type; 
QStringList ql;
bool sem=false;

 VhdlDocGen::deleteAllChars(mod,'@');
 VhdlDocGen::deleteAllChars(mod,'\n');
 VhdlDocGen::deleteAllChars(mod,'(');
 VhdlDocGen::deleteAllChars(mod,')');
 VhdlDocGen::deleteAllChars(mod,';'); 

if(mod.contains(","))
  ql=QStringList::split(",",mod,false);
 else
  ql=QStringList::split(regg1,mod,false);
 

 if(!parseCode) {
 currentFunctionVerilog=VerilogDocGen::makeNewEntry(VhdlDocGen::getProcessNumber().data(),Entry::FUNCTION_SEC,VerilogDocGen::ALWAYS);
  currentFunctionVerilog->stat=TRUE;
  currentFunctionVerilog->fileName=getVerilogParsingFile();
  if(!bBody)
  for(uint j=0;j<ql.count();j++) {
  QCString ll=(QCString)ql[j];
  if(ll=="or" || ll=="and" || ll=="xor") continue; 
  if(sem)
	  currentFunctionVerilog->args+=',';
	  Argument *arg=new Argument;
      arg->name=ll.simplifyWhiteSpace();	
	  currentFunctionVerilog->argList->append(arg);
      currentFunctionVerilog->args+=ll; 
      sem = true;
 }
 return;
}


}//parseAlways



 // sets the current parsing module (only for parsing inline_sources)             
 void VerilogDocGen::setCurrVerilogClass(QCString& cl){ currVerilogClass = cl;}
   
 //-------------------------------------------------------------------------------------------  
           
 int MyParserConv::parse(MyParserConv* conv){
  myconv=conv;
  assert(myconv);
  return c_parse();
 } 
        
int c_lex(void){
 return myconv->doLex(); 
}


void c_error(const char * err){
   if(err){// && !parseCode){
 // fprintf(stderr,"\n\nerror  at line [%d]... : in file [%s]\n\n",c_lloc.first_line,getVerilogParsingFile());
  vbufreset();
  //exit(0);
  }
  
   } 
    
int getVerilogToken(){return c_char;}
 //------------------------------------------------------------------------------------------------  

// writes a digit to the source

void writeDigit()
 {
   if(parseCode) {
     writePrevVerilogWords(identVerilog);
	 writeVerilogFont("vhdllogic",identVerilog.data());
	 printVerilogBuffer(true);
	 }
	identVerilog.resize(0);

 }// writeDigit

// prints and links the parsed identifiers  

void parseString(){				
					 				
					if(parseCode ) { 
					 //   printVerilogStringList();
						 identVerilog=identVerilog.stripWhiteSpace();
				   	  writePrevVerilogWords(identVerilog);
						 bool b=false;
					 
					 if(currVerilogType==VerilogDocGen::DEFPARAM){
				       QCString s(getVerilogString());
                       if(s.contains(".")==0)
                           b=generateVerilogMemLink(currVerilogClass,identVerilog,VerilogDocGen::COMPONENT);
				       else if(s.contains("="))
                           b=generateVerilogMemLink(currVerilogClass,identVerilog,-1);
                       else
				         b=generateVerilogMemLink(currVerilogInst,identVerilog,-1);	       
				     }
					 else if(currVerilogType==VerilogDocGen::COMPONENT){
					    QCString tt(getVerilogString());
					    if(tt.contains('('))
					     b=generateVerilogMemLink(currVerilogClass,identVerilog,VerilogDocGen::PORT);
				        else if(!b)   
				         b=generateVerilogMemLink(currVerilogInst,identVerilog,VerilogDocGen::PORT);
				        if(!b)   
				         b=generateVerilogMemLink(currVerilogClass,identVerilog,-1);    
					   }
				    /*
				      else if(currVerilogType==VerilogDocGen::NETTYPE){
                       QCString tt(getVerilogString());
                      if(tt.contains("["))
                         b=generateVerilogMemLink(currVerilogClass,identVerilog,-1);
                       else{
                      	 codifyVerilogString(identVerilog.data(),"vhdlcharacter");
				         b=true;
				          }
                      	 }
				      */
				      else if(currVerilogType==VerilogDocGen::PORT)
                        b=generateVerilogMemLink(currVerilogClass,identVerilog,VerilogDocGen::PORT);
				     else if(currVerilogType==VerilogDocGen::PARAMETER)
                        b=generateVerilogMemLink(currVerilogClass,identVerilog,VerilogDocGen::PARAMETER);
				     else if(currVerilogType==VerilogDocGen::SIGNAL)
                        b=generateVerilogMemLink(currVerilogClass,identVerilog,VerilogDocGen::SIGNAL);
				     else if(currVerilogType==VerilogDocGen::INPUT)
                        b=generateVerilogMemLink(currVerilogClass,identVerilog,VerilogDocGen::INPUT);				       
         		     else if(currVerilogType==VerilogDocGen::OUTPUT)
                        b=generateVerilogMemLink(currVerilogClass,identVerilog,VerilogDocGen::OUTPUT);
				     else if(currVerilogType==VerilogDocGen::INOUT)
                        b=generateVerilogMemLink(currVerilogClass,identVerilog,VerilogDocGen::INOUT);
				   
				     else if(currVerilogType==VerilogDocGen::ALWAYS)
                        b=generateVerilogMemLink(currVerilogClass,identVerilog,VerilogDocGen::ALWAYS);
						
				     if(!b){
					   b =  generateVerilogMemLink(currVerilogClass,identVerilog,-1); 
					   if(!b && getClass(identVerilog.data()))
                       b=generateVerilogClassOrGlobalLink(identVerilog.data());
					  if(!b){
					  const QCString*  col=VerilogDocGen::findKeyWord(identVerilog.data());
					  if(col) 
					  codifyVerilogString(identVerilog.data(),col->data());
					  else					  
					  codifyVerilogString(identVerilog.data(),"vhdlchar");
					   }   
					 }
					   printVerilogBuffer(true);
					  }
				    prevName=identVerilog;
				    identVerilog.resize(0);
				 
}// parseString

// inits the parser

 //---------------------------------------------------------------------------------------------------  


// do not include the same class twice 

bool findExtendsComponent(QList<BaseInfo> *extend,QCString& compName)
{
 for(uint j=0;j<extend->count();j++){
  BaseInfo *bb=extend->at(j);
  if(bb->name==compName)
   return true;
 }
 return false;
}// findExtendsComponent


