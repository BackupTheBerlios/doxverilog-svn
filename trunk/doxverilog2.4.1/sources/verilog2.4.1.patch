
G:\VerilogProject>diff -u -i -b -B --strip-trailing-cr doxverilog/src/util.cpp            doxygen-1.5.8/src/util.cpp  
--- doxverilog/src/util.cpp	2008-12-26 05:03:22.000000000 -0800
+++ doxygen-1.5.8/src/util.cpp	2009-12-17 18:16:04.000000000 -0800
@@ -49,6 +49,9 @@
 #include "textdocvisitor.h"
 #include "portable.h"
 #include "parserintf.h"
+#include <qstringlist.h>
+#include "verilogdocgen.h"
+
 
 #define ENABLE_TRACINGSUPPORT 0
 
@@ -4063,6 +4066,30 @@
     )
 {
   QCString tsName = name;
+   static bool verilogOpt = Config_getBool("OPTIMIZE_OUTPUT_VERILOG");
+
+   // finds links in verilog for desigunit::member
+if(verilogOpt)
+  {
+  // QCString temp=name;
+   if(tsName.contains("::"))
+   {
+	   QStringList ql=QStringList::split(QCString("::",2),tsName,false);
+	   ClassDef *cd=getClass(ql[0].data());
+
+	   if(cd){
+		   QCString memName=(QCString)ql[1];
+		   QCString className=(QCString)ql[0];
+		   MemberDef* mdd=VerilogDocGen::findMember(className,memName,-1);
+		   if(mdd){
+            *resMember=mdd;
+           return true;		  
+		   }
+     }
+   }
+  }
+
+
   bool memberScopeFirst = tsName.find('#')!=-1;
   QCString fullName = substitute(tsName,"#","::");
   fullName = removeRedundantWhiteSpace(substitute(fullName,".","::"));
@@ -4361,8 +4388,13 @@
   else // probably a member reference
   {
     MemberDef *md;
+    static bool verilogOpt = Config_getBool("OPTIMIZE_OUTPUT_VERILOG");
     bool res = resolveRef(scName,lr,inSeeBlock,resContext,&md);
-    if (md) resAnchor=md->anchor();
+    if (md)  {
+ 	 resAnchor=md->anchor();
+   if(verilogOpt)
+      *resContext=md;
+	}
     return res;
   }
 }
@@ -6406,6 +6438,7 @@
   { "c++",         "c",       SrcLangExt_Cpp    },
   { "python",      "python",  SrcLangExt_Python },
   { "fortran",     "fortran", SrcLangExt_F90    },
+  { "verilog",        "v",    SrcLangExt_VERILOG   },
   { "vhdl",        "vhdl",    SrcLangExt_VHDL   },
   { 0,             0,        (SrcLangExt)0      }
 };
@@ -6467,6 +6500,7 @@
   updateLanguageMapping(".py",    "python");
   updateLanguageMapping(".f",     "fortran");
   updateLanguageMapping(".f90",   "fortran");
+  updateLanguageMapping(".v",  "verilog");
   updateLanguageMapping(".vhd",   "vhdl");
   updateLanguageMapping(".vhdl",  "vhdl");
 }

G:\VerilogProject>diff -u -i -b -B --strip-trailing-cr doxverilog/src/util.h              doxygen-1.5.8/src/util.h   
--- doxverilog/src/util.h	2008-10-12 08:57:08.000000000 -0700
+++ doxygen-1.5.8/src/util.h	2009-12-17 18:16:04.000000000 -0800
@@ -95,7 +95,9 @@
   SrcLangExt_JS     = 0x0400,
   SrcLangExt_Python = 0x0800,
   SrcLangExt_F90    = 0x1000,
-  SrcLangExt_VHDL   = 0x2000
+  SrcLangExt_VHDL   = 0x2000,
+  SrcLangExt_VERILOG   = 0x3000,
+
 };
 
 //--------------------------------------------------------------------

G:\VerilogProject>diff -u -i -b -B --strip-trailing-cr doxverilog/src/vhdldocgen.cpp      doxygen-1.5.8/src/vhdldocgen.cpp   
--- doxverilog/src/vhdldocgen.cpp	2008-10-07 11:34:46.000000000 -0700
+++ doxygen-1.5.8/src/vhdldocgen.cpp	2010-01-08 14:11:08.000000000 -0800
@@ -42,11 +42,14 @@
 #include "definition.h"
 #include "searchindex.h"
 #include "outputlist.h"
-
+ #include "verilogdocgen.h"
 /* --------------------------------------------------------------- */
 
 //#define theTranslator_vhdlType theTranslator->trVhdlType
 #define theTranslator_vhdlType VhdlDocGen::trVhdlType
+#define COL_SIZE 100 
+
+static QCString* getColorOfWord(int col);
 
 static QDict<QCString> g_vhdlKeyDict0(17,FALSE); 
 static QDict<QCString> g_vhdlKeyDict1(17,FALSE); 
@@ -56,6 +59,8 @@
 static  QCString g_vhdltype("comment");
 static  QCString g_vhdllogic("vhdllogic");
 
+static bool checkString(QCString & qcs,OutputList& ol);
+
 // keywords
 static const char* g_vhdlKeyWordMap0[] = 
 { 
@@ -155,11 +160,39 @@
   return 0;
 }
 
+
+ bool checkString(QCString &name,OutputList& ol)
+{
+  if (name.isEmpty()) return FALSE;
+  name=name.simplifyWhiteSpace();
+  if (name.isEmpty()) return FALSE;
+  
+  int len=name.length();
+  if (name.at(0)=='"' && name.at(len-1)=='"' && len > 2)
+  {
+      VhdlDocGen::startFonts(name,"keyword",ol);     
+      return true;
+  }
+    return false;
+  }
+
+
+
 /*!
  * returns the parsed entry at line xxx
  */
 
 
+QCString* getColorOfWord(int col)
+{
+  switch(col)
+  {
+   case 1: return &g_vhdlkeyword;
+   case 2: return &g_vhdllogic;
+   default:return 0;
+  }
+}
+
 void VhdlDocGen::debugClassName(ClassSDict* mDict)
 {
   // for each class
@@ -652,6 +685,12 @@
 
 QCString VhdlDocGen::getClassTitle(const ClassDef *cd)
 {
+ 
+  static bool optVerilog = Config_getBool("OPTIMIZE_OUTPUT_VERILOG");
+  if(optVerilog)
+   return VerilogDocGen::getClassTitle(cd);
+
+
   QCString pageTitle;
   if (cd==0) return "";
   pageTitle+=cd->displayName();
@@ -982,8 +1021,15 @@
  */
 void VhdlDocGen::prepareComment(QCString& qcs)
 {
-  QCString temp;
+    static bool optVerilog       = Config_getBool("OPTIMIZE_OUTPUT_VERILOG");
   const char* s="--!";
+  
+    if(optVerilog)
+     s=vlogComment;
+     else
+    s="--!";
+
+  QCString temp;
   //const char *start="--!{";
   //const char *end="--!}";
   int index=0; 
@@ -1183,6 +1229,13 @@
 
 QCString VhdlDocGen::trTypeString(int type)
 {
+
+    static bool optVerilog       = Config_getBool("OPTIMIZE_OUTPUT_VERILOG");
+
+    if(optVerilog)
+    return VerilogDocGen::convertTypeToString(type);
+ 
+
   switch(type)
   {
     case VhdlDocGen::LIBRARY:        return "Library"; 
@@ -1234,13 +1287,15 @@
 
 void VhdlDocGen::deleteAllChars(QCString &s,char c)
 {
-  int index=s.findRev(c,-1,FALSE);
+  QString f=s.data();
+  int index=f.findRev(c,-1,FALSE);
   while (index > -1)
   {
-    QString qcs=s.remove(index,1);      
-    s=qcs;
-    index=s.findRev(c,-1,FALSE);
+    QString qcs=f.remove(index,1);      
+    f=qcs;
+    index=f.findRev(c,-1,FALSE);
   }  
+  s=f.data();
 }
 
 
@@ -1264,9 +1319,15 @@
 
 QCString VhdlDocGen::getProcessNumber()
 {
+  static bool optVerilog=Config_getBool("OPTIMIZE_OUTPUT_VERILOG");
+ 
   static int stringCounter;
   char buf[8];
-  QCString qcs("PROCESS_");
+  QCString qcs; 
+  if(optVerilog)
+     qcs="ALWAYS_";
+    else
+    qcs="PROCESS_";
   sprintf(buf,"%d",stringCounter++);
   qcs.append(&buf[0]);
   return qcs;
@@ -1278,18 +1339,19 @@
 
 void VhdlDocGen::writeFormatString(QCString& qcs,OutputList&ol,const MemberDef* mdef)
 {
-  QRegExp reg("[\\/\\:\\<\\>\\:\\s\\,\\;\\'\\+\\-\\*\\|\\&\\=\\(\\)\"]");
+  static bool optVerilog=Config_getBool("OPTIMIZE_OUTPUT_VERILOG");
+  QRegExp reg("[\\[\\]\\/\\:\\<\\>\\s\\,\\;\\+\\-\\*\\|\\&\\=\\(\\)\"\\s]");
   qcs+=QCString(" ");// parsing the last sign
-  QCString *ss;
+  const QCString *ss;
   QCString find=qcs;
   QCString temp=qcs;
+  int col=0;
+
+  bool bString=false;
   char buf[2];
   buf[1]='\0';
-
-  int j;
-  int len;
+  int j,len;
   j = reg.match(temp.data(),0,&len);
-
   ol.startBold();
   if (j>=0)
   {
@@ -1297,6 +1359,20 @@
     {
       find=find.left(j);
       buf[0]=temp[j];
+	  if(buf[0]=='"' && temp.length()>1)
+	  {
+		int i=temp.find('"',1);
+		if(i>0){
+         find=temp.left(i+1);
+         j+=i;
+         bString=true;
+		}
+	  }
+	  
+	  if(optVerilog){
+        ss=VerilogDocGen::findKeyWord(find);
+     }
+	  else
       ss=VhdlDocGen::findKeyWord(find);
       bool k=VhdlDocGen::isNumber(find); // is this a number
       if (k)
@@ -1311,19 +1387,34 @@
       {
 	if (j>0)
 	{
+         if(!checkString(find,ol))	   
 	  VhdlDocGen::writeStringLink(mdef,find,ol);
 	}
       }
+      if(!bString)
       VhdlDocGen::startFonts(&buf[0],"vhdlchar",ol);
 
+	  col+=j+1;
+      if(col>COL_SIZE)
+	  {
+		  ol.docify(". . . .");
+		  return;
+	  }
+
       QCString st=temp.remove(0,j+1);
       find=st;
       temp=st;
       j = reg.match(temp.data(),0,&len);
+	  bString=false;
     }//while
   }//if
   else
   {
+      if(checkString(find,ol))
+	  {
+        printf("found"); 
+	  }
+	  else
     VhdlDocGen::startFonts(find,"vhdlchar",ol);     
   }
   ol.endBold();
@@ -1335,13 +1426,26 @@
 
 bool VhdlDocGen::isNumber(const QCString& s)
 {
- // static bool veriOpt=Config_getBool("OPTIMIZE_OUTPUT_VERILOG");
-  static QRegExp regg("[0-9][0-9eEfFbBcCdDaA_.#-]*");
+  static bool optVerilog=Config_getBool("OPTIMIZE_OUTPUT_VERILOG");
+  static QRegExp regg("[0-9][0-9eEfFbBcCdDaA_.#-']*");
+  static QRegExp reggVerilog("[0-9]+[']*[0-9a-fA-FhHoOxXzZ._?]*");
+  static QRegExp reggVerilog1("['][0-9a-fA-FhHoOxXzZ._?]+");
  
   if (s.isEmpty()) return false;
   int j,len;
+  if(optVerilog){
+    QCString t=s;
+    VhdlDocGen::deleteAllChars(t,' ');
+     j = reggVerilog.match(t.data(),0,&len);
+     if ((j==0) && (len==(int)t.length())) return true; 
+     j = reggVerilog1.match(t.data(),0,&len);
+     if ((j==0) && (len==(int)t.length())) return true;
+     return false;
+}  
+  else 
   j = regg.match(s.data(),0,&len);
   if ((j==0) && (len==(int)s.length())) return true; 
+  
   return false;
  
   #if 0
@@ -1370,6 +1474,14 @@
 
 void VhdlDocGen::formatString(QCString & qcs, OutputList& ol,const MemberDef* mdef)
 { 
+ 
+  static bool optVerilog  = Config_getBool("OPTIMIZE_OUTPUT_VERILOG");
+
+  if(optVerilog){
+      VhdlDocGen::writeFormatString(qcs,ol,mdef);
+       return;
+  }
+  
   QCString temp(qcs.length());  
   qcs.stripPrefix(":");
   qcs.stripPrefix("is");
@@ -1387,7 +1499,7 @@
     char c=qcs[j];
     char b=c;
     if (j>0) b=qcs[j-1];
-    if (c=='"' || c==',' || c==';' || c=='\''|| c=='(' || c==')'  || c==':' ) // || (c==':' && b!='=')) // || (c=='=' && b!='>')) 
+    if (c=='[' || c==']' || c=='"' || c==',' || c==';' || c=='\''|| c=='(' || c==')'  || c==':' ) // || (c==':' && b!='=')) // || (c=='=' && b!='>')) 
     {
       if (temp.at(index-1) != ' ')
       {
@@ -1418,7 +1530,8 @@
     index=temp.length();
   }// for
   temp=temp.stripWhiteSpace();
-  // printf("\n [%s]",qcs.data());
+  
+   
   VhdlDocGen::writeFormatString(temp,ol,mdef);
 }
 
@@ -1580,6 +1693,7 @@
     const ArgumentList* al,
     bool /*type*/)
 {
+  static bool optVerilog       = Config_getBool("OPTIMIZE_OUTPUT_VERILOG"); 
   if (al==0) return;
   bool sem=FALSE;    
   ol.enableAll();
@@ -1606,14 +1720,18 @@
 	ol.docify(" ");
       } 
       // linkifyText(TextGeneratorOLImpl(ol),md->getClassDef(),md->getBodyDef(),md->name(),arg->type);
+      if(optVerilog)  
+      VerilogDocGen::adjustMemberName(arg->name);
+     
       VhdlDocGen::writeFormatString(arg->name,ol,md);
       ol.docify(" ");
-
       if (VhdlDocGen::isProcedure(md))
 	startFonts(arg->attrib,"stringliteral",ol);
-      else
+      else {
+  	   if(!optVerilog )
 	startFonts(QCString("in"),"stringliteral",ol);
     }
+   }
     ol.docify(" ");
     ol.disable(OutputGenerator::Man);
     ol.startEmphasis();
@@ -1703,7 +1821,14 @@
                         OutputList& ol,GroupDef* gd,ClassDef* cd,FileDef *fd)
 {
   static ClassDef *cdef;
-  //static GroupDef* gdef;
+  static bool optVerilog  = Config_getBool("OPTIMIZE_OUTPUT_VERILOG");
+  
+   if(optVerilog){
+       VerilogDocGen::writeVerilogDeclarations(ml,ol,0,cd);
+       return;   
+   }
+
+
   if (cd && cdef!=cd)
   { // only one inline link
     VhdlDocGen::writeInlineClassLink(cd,ol);
@@ -1757,16 +1882,26 @@
 }
 
 /* writes a vhdl type documentation */
-void VhdlDocGen::writeVHDLTypeDocumentation(const MemberDef* mdef, const Definition *d, OutputList &ol)
+void VhdlDocGen::writeVHDLTypeDocumentation( MemberDef* mdef, const Definition *d, OutputList &ol)
 {
+  
   ClassDef *cd=(ClassDef*)d;
   if (cd==0) return;
-  if ((VhdlDocGen::isVhdlFunction(mdef) || VhdlDocGen::isProcedure(mdef) || VhdlDocGen::isProcess(mdef)))
+  
+  bool bParseVerilogFunc=false;
+  static bool optVerilog  = Config_getBool("OPTIMIZE_OUTPUT_VERILOG");
+
+   if(optVerilog)
+   if(!mdef->isVariable())
+    bParseVerilogFunc=true;
+
+ if ((VhdlDocGen::isVhdlFunction(mdef) || VhdlDocGen::isProcedure(mdef) || VhdlDocGen::isProcess(mdef) || bParseVerilogFunc))
   {
+    MemberDef* memdef;
     QCString nn=mdef->typeString();
     nn=nn.stripWhiteSpace();
     QCString na=cd->name();
-    MemberDef* memdef=VhdlDocGen::findMember(na,nn);
+    memdef=VhdlDocGen::findMember(na,nn);
     if (memdef && memdef->isLinkable()) 
     { 
       ol.startBold();
@@ -1786,13 +1921,49 @@
 
   if (mdef->isVariable())
   { 
+   
+   
+	  
     //ol.docify(mdef->name().data());
+   if(optVerilog){
+      ol.startFontClass("stringliteral");
+      writeLink(mdef,ol);
+      ol.endFontClass();
+   }
+  else 
      writeLink(mdef,ol);
     ol.docify(" ");
+  
+   if(mdef->getMemberSpecifiers()==VerilogDocGen::FEATURE)
+   {
+	 QCString arg=mdef->getDefinition();
+	 int kr=arg.find("\\?");	  
+	 if(kr>=0)
+	 {
+       arg=arg.left(kr-2);
+	   arg.stripPrefix("feature");
+	   arg=arg.simplifyWhiteSpace();
+	   arg.stripPrefix(mdef->name().data());
+	   arg.append("{ . . . }");
+	   VhdlDocGen::formatString(arg,ol,mdef);
+	 }
+	 else{
+     QCString ttype=mdef->typeString();
+	 ttype.stripPrefix("feature");
+	 VhdlDocGen::formatString(ttype,ol,mdef);
+	 }
+	//VerilogDocGen::parseDefineConstruct(arg,mdef,ol);
+	return ;
+    }
+
+    if(mdef->getMemberSpecifiers()!=VerilogDocGen::FEATURE){
     QCString ttype=mdef->typeString();
     VhdlDocGen::formatString(ttype,ol,mdef);
     ol.docify(" ");
-    if (VhdlDocGen::isPort(mdef))
+    }
+
+   // if (VhdlDocGen::isPort(mdef))
+   if (VhdlDocGen::isPort(mdef)|| (optVerilog && mdef->getMemberSpecifiers()!=VerilogDocGen::SIGNAL)) 
     {
       QCString largs=mdef->argsString();
       VhdlDocGen::formatString(largs,ol,mdef);
@@ -2257,9 +2428,18 @@
   //static ClassDef *prev = 0;
   //if (prev == cd)  return TRUE;
   //if (cd != prev) prev=cd;
+   static bool optVerilog    = Config_getBool("OPTIMIZE_OUTPUT_VERILOG");
+ 
+  QCString qcs;
+  if(optVerilog){
+   if(cd->protection()==Public)
+    qcs+=" Module";
+     else
+    qcs+=" Primitive";
+  }
+  else
+   qcs = VhdlDocGen::trTypeString(cd->protection()+2);
 
-  int id=cd->protection();
-  QCString qcs = VhdlDocGen::trTypeString(id+2);
   cname=VhdlDocGen::getClassName(cd);
   ol.startBold();
   ol.writeString(qcs.data());
@@ -2271,6 +2451,10 @@
 
 QCString VhdlDocGen::trVhdlType(int type,bool sing)
 {
+    static bool optVerilog    = Config_getBool("OPTIMIZE_OUTPUT_VERILOG");
+ 
+    if(optVerilog) return VerilogDocGen::convertTypeToString(type,sing);
+
   switch(type)
   {
     case VhdlDocGen::LIBRARY:      
@@ -2371,7 +2555,14 @@
 
 QCString VhdlDocGen::trDesignUnitListDescription()
 {
+  
+  static bool optVerilog = Config_getBool("OPTIMIZE_OUTPUT_VERILOG");
+ if(optVerilog)
   return "Here is a list of all design unit members with links to "
+         "the Modules they belong to:";
+
+
+return "Here is a list of all design unit members with links to "
          "the Entities and Packages they belong to:"; 
 }
 
@@ -2387,6 +2578,9 @@
 
 QCString VhdlDocGen::trFunctionAndProc()
 {
+  if(Config_getBool("OPTIMIZE_OUTPUT_VERILOG"))
+   return "Functions/Tasks/Always Construct";
+
   return "Functions/Procedures/Processes";
 }
 
@@ -2427,13 +2621,23 @@
 
 void VhdlDocGen::writeStringLink(const MemberDef *mdef,QCString mem, OutputList& ol)
 {
+    bool optVerilog          = Config_getBool("OPTIMIZE_OUTPUT_VERILOG");
+
   if (mdef) 
   {
     ClassDef *cd=mdef->getClassDef();
     if (cd)
     { 
+      MemberDef* memdef=NULL;
       QCString n=cd->name(); 
-      MemberDef* memdef=VhdlDocGen::findMember(n,mem);
+          if(optVerilog){
+        if(mem.contains("`"))
+        memdef = findGlobalMember(mem);
+        if(memdef==0)
+        memdef=VerilogDocGen::findMember(n,mem,-1);
+      }
+      else
+        memdef=VhdlDocGen::findMember(n,mem);
       if (memdef && memdef->isLinkable()) 
       { 
 	ol.startBold();

G:\VerilogProject>diff -u -i -b -B --strip-trailing-cr doxverilog/src/vhdldocgen.h        doxygen-1.5.8/src/vhdldocgen.h 
--- doxverilog/src/vhdldocgen.h	2008-09-17 12:14:54.000000000 -0700
+++ doxygen-1.5.8/src/vhdldocgen.h	2010-01-02 14:52:24.000000000 -0800
@@ -239,7 +239,7 @@
     static QCString getProcessNumber();
     static QCString getRecordNumber();
 
-    static void writeVHDLTypeDocumentation(const MemberDef* mdef, const Definition* d, OutputList &ol);
+    static void writeVHDLTypeDocumentation( MemberDef* mdef, const Definition* d, OutputList &ol);
 
     static void writeVhdlDeclarations(MemberList*,OutputList&,GroupDef*,ClassDef*,FileDef*);
 

G:\VerilogProject>diff -u -i -b -B --strip-trailing-cr doxverilog/src/index.cpp           doxygen-1.5.8/src/index.cpp   
--- doxverilog/src/index.cpp	2008-12-25 02:53:00.000000000 -0800
+++ doxygen-1.5.8/src/index.cpp	2009-12-17 19:33:38.000000000 -0800
@@ -305,8 +305,20 @@
 
 static bool classHasVisibleChildren(ClassDef *cd)
 {
+ bool vhdl=Config_getBool("OPTIMIZE_OUTPUT_VHDL");
+
+  BaseClassList *bcl;
+
+  if(vhdl)
+  {
+    if (cd->baseClasses()==0) return FALSE;
+    bcl=cd->baseClasses();
+  }
+  else {
   if (cd->subClasses()==0) return FALSE;
-  BaseClassList *bcl=cd->subClasses();
+          bcl=cd->subClasses();
+       }
+
   BaseClassListIterator bcli(*bcl);
   for ( ; bcli.current() ; ++bcli)
   {
@@ -316,17 +328,26 @@
     }
   }
   return FALSE;
-}
+
+  }
 
 void writeClassTree(OutputList &ol,BaseClassList *bcl,bool hideSuper,int level,FTVHelp* ftv)
 {
+  bool vhdl=Config_getBool("OPTIMIZE_OUTPUT_VHDL");
+
   if (bcl==0) return;
   BaseClassListIterator bcli(*bcl);
   bool started=FALSE;
   for ( ; bcli.current() ; ++bcli)
   {
     ClassDef *cd=bcli.current()->classDef;
-    if (cd->isVisibleInHierarchy() && hasVisibleRoot(cd->baseClasses()))
+    bool b;
+	if(vhdl)
+		b=hasVisibleRoot(cd->subClasses());
+	else
+		b=hasVisibleRoot(cd->baseClasses());
+
+	if (cd->isVisibleInHierarchy() && b) // hasVisibleRoot(cd->baseClasses()))
     {
       if (!started)
       {
@@ -369,7 +390,10 @@
         //printf("Class %s at %p visited=%d\n",cd->name().data(),cd,cd->visited);
         bool wasVisited=cd->visited;
         cd->visited=TRUE;
+	  if(!vhdl)	
         writeClassTree(ol,cd->subClasses(),wasVisited,level+1,ftv);
+	  else       
+	    writeClassTree(ol,cd->baseClasses(),wasVisited,level+1,ftv);
       }
     }
   }
@@ -481,16 +505,28 @@
 
 static void writeClassTreeForList(OutputList &ol,ClassSDict *cl,bool &started,FTVHelp* ftv)
 {
+  bool vhdl=Config_getBool("OPTIMIZE_OUTPUT_VHDL");
   ClassSDict::Iterator cli(*cl);
   for (;cli.current(); ++cli)
   {
     ClassDef *cd=cli.current();
-    //printf("class %s hasVisibleRoot=%d isVisibleInHierarchy=%d\n",
-    //             cd->name().data(),
-    //              hasVisibleRoot(cd->baseClasses()),
-    //              cd->isVisibleInHierarchy()
-    //      );
-    if (!hasVisibleRoot(cd->baseClasses())) // filter on root classes
+/*   
+	fprintf(stderr,"class %s hasVisibleRoot=%d hasVisibleSubClasses=%d visChild=%d isVisibleInHierarchy=%d\n",
+                 cd->name().data(),
+                  hasVisibleRoot(cd->baseClasses()),
+                   hasVisibleRoot(cd->subClasses()),
+				   classHasVisibleChildren(cd),
+				  cd->isVisibleInHierarchy()
+          );
+*/	
+    bool b;
+
+	if(vhdl)
+		b=!hasVisibleRoot(cd->subClasses());
+	else
+		b=!hasVisibleRoot(cd->baseClasses());
+	
+	if (b)  //filter on root classes
     {
       if (cd->isVisibleInHierarchy()) // should it be visible
       {
@@ -528,7 +565,12 @@
           if (ftv)
             ftv->addContentsItem(hasChildren,cd->displayName(),0,0,0); 
         }
-        if (hasChildren) 
+        if (vhdl) 
+        {
+		  writeClassTree(ol,cd->baseClasses(),cd->visited,1,ftv);
+          cd->visited=TRUE;
+        }
+		else if(hasChildren)
         {
           writeClassTree(ol,cd->subClasses(),cd->visited,1,ftv);
           cd->visited=TRUE;
@@ -1517,9 +1560,11 @@
 {
   static bool hideFriendCompounds = Config_getBool("HIDE_FRIEND_COMPOUNDS");
   static bool vhdlOpt = Config_getBool("OPTIMIZE_OUTPUT_VHDL");
+  static bool verilogOpt = Config_getBool("OPTIMIZE_OUTPUT_VERILOG");
+  
   ClassDef *cd=0;
 
-  if (vhdlOpt && (VhdlDocGen::isRecord(md) || VhdlDocGen::isUnit(md)))
+  if (vhdlOpt && (VhdlDocGen::isRecord(md) || VhdlDocGen::isUnit(md) || verilogOpt))
   {
     VhdlDocGen::adjustRecordMember(md);
   }

G:\VerilogProject>diff -u -i -b -B --strip-trailing-cr doxverilog/src/filedef.cpp         doxygen-1.5.8/src/filedef.cpp   
--- doxverilog/src/filedef.cpp	2008-12-23 10:56:10.000000000 -0800
+++ doxygen-1.5.8/src/filedef.cpp	2009-12-17 18:16:04.000000000 -0800
@@ -34,6 +34,7 @@
 #include "parserintf.h"
 #include "portable.h"
 #include "vhdldocgen.h"
+#include "verilogdocgen.h"
 #include "debug.h"
 #include "layout.h"
 
@@ -1515,11 +1516,16 @@
 void FileDef::writeMemberDeclarations(OutputList &ol,MemberList::ListType lt,const QCString &title)
 {
   static bool optVhdl = Config_getBool("OPTIMIZE_OUTPUT_VHDL");
+  static bool optVerilog = Config_getBool("OPTIMIZE_OUTPUT_VERILOG");
+
   MemberList * ml = getMemberList(lt);
   if (ml) 
   {
     if (optVhdl) // use specific declarations function
     {
+      if(optVerilog)
+       VerilogDocGen::writeVerilogDeclarations(ml,ol,0,0,this);
+        else
       VhdlDocGen::writeVhdlDeclarations(ml,ol,0,0,this);
     }
     else

G:\VerilogProject>diff -u -i -b -B --strip-trailing-cr doxverilog/src/classdef.cpp        doxygen-1.5.8/src/classdef.cpp   
--- doxverilog/src/classdef.cpp	2008-12-10 11:55:54.000000000 -0800
+++ doxygen-1.5.8/src/classdef.cpp	2009-12-17 18:16:04.000000000 -0800
@@ -38,6 +38,7 @@
 #include "searchindex.h"
 #include "vhdldocgen.h"
 #include "layout.h"
+#include "verilogdocgen.h"
 
 //-----------------------------------------------------------------------------
 

G:\VerilogProject>diff -u -i -b -B --strip-trailing-cr doxverilog/src/groupdef.cpp        doxygen-1.5.8/src/groupdef.cpp   
--- doxverilog/src/groupdef.cpp	2008-12-24 07:22:20.000000000 -0800
+++ doxygen-1.5.8/src/groupdef.cpp	2009-12-17 18:16:04.000000000 -0800
@@ -36,7 +36,7 @@
 #include "dot.h"
 #include "vhdldocgen.h"
 #include "layout.h"
-
+#include "verilogdocgen.h"
 //---------------------------------------------------------------------------
 
 GroupDef::GroupDef(const char *df,int dl,const char *na,const char *t,
@@ -1292,10 +1292,15 @@
 void GroupDef::writeMemberDeclarations(OutputList &ol,MemberList::ListType lt,const QCString &title)
 {
    static bool optimizeVhdl = Config_getBool("OPTIMIZE_OUTPUT_VHDL");
+   static bool optVerilog = Config_getBool("OPTIMIZE_OUTPUT_VERILOG");
  
   MemberList * ml = getMemberList(lt);
     if (optimizeVhdl && ml) 
     {
+       if(optVerilog)
+        VerilogDocGen::writeVerilogDeclarations(ml,ol,this,0);
+        else
+ 
          VhdlDocGen::writeVhdlDeclarations(ml,ol,this,0,0);
         return;
     }

G:\VerilogProject>diff -u -i -b -B --strip-trailing-cr doxverilog/src/config.l            doxygen-1.5.8/src/config.l   
--- doxverilog/src/config.l	2008-12-06 03:28:48.000000000 -0800
+++ doxygen-1.5.8/src/config.l	2009-12-17 18:16:04.000000000 -0800
@@ -1296,6 +1296,7 @@
     filePatternList.append("*.f");
     filePatternList.append("*.vhd");
     filePatternList.append("*.vhdl");
+	filePatternList.append("*.v");
     if (portable_fileSystemIsCaseSensitive())
     {
       // unix => case sensitive match => also include useful uppercase versions
@@ -1317,6 +1318,7 @@
       filePatternList.append("*.F");
       filePatternList.append("*.VHD");
       filePatternList.append("*.VHDL");
+	  filePatternList.append("*.V");
     }
   }
 
@@ -1437,6 +1439,18 @@
     annotationFromBrief.append("the");
   }
 
+  if (Config_getBool("OPTIMIZE_OUTPUT_VHDL") && Config_getBool("OPTIMIZE_OUTPUT_VERILOG"))
+  {
+    fprintf(stderr,"\n Only the Verilog  files will be tailored correctly  !\n");
+  } 
+ 
+ if(Config_getBool("OPTIMIZE_OUTPUT_VERILOG") && !Config_getBool("OPTIMIZE_OUTPUT_VHDL")){
+   // must be set for parsing verilog files
+   Config::instance()->addBool("OPTIMIZE_OUTPUT_VHDL"," ",true);
+   Config::instance()->addBool("EXTRACT_ALL"," ",true);
+  }
+
+  
   // some default settings for vhdl
   if (Config_getBool("OPTIMIZE_OUTPUT_VHDL") && 
       (Config_getBool("INLINE_INHERITED_MEMB") || 

G:\VerilogProject>diff -u -i -b -B --strip-trailing-cr doxverilog/src/configoptions.cpp   doxygen-1.5.8/src/configoptions.cpp   
--- doxverilog/src/configoptions.cpp	2008-11-29 05:14:50.000000000 -0800
+++ doxygen-1.5.8/src/configoptions.cpp	2009-12-17 18:16:04.000000000 -0800
@@ -299,6 +299,14 @@
                 );
   //----
   cb = cfg->addBool(
+                  "OPTIMIZE_OUTPUT_VERILOG",
+                    "Set the OPTIMIZE_OUTPUT_VERILOG tag to YES if your project consists of Verilog \n"
+                    "sources. Doxygen will then generate output that is tailored for \n"
+		    "Verilog. \n",
+                    FALSE
+                 );  
+  //----
+  cb = cfg->addBool(
                  "OPTIMIZE_OUTPUT_VHDL",
                  "Set the OPTIMIZE_OUTPUT_VHDL tag to YES if your project consists of VHDL \n"
                  "sources. Doxygen will then generate output that is tailored for \n"

G:\VerilogProject>diff -u -i -b -B --strip-trailing-cr doxverilog/src/doxygen.cpp         doxygen-1.5.8/src/doxygen.cpp   
--- doxverilog/src/doxygen.cpp	2008-12-26 05:02:38.000000000 -0800
+++ doxygen-1.5.8/src/doxygen.cpp	2010-01-05 10:16:46.000000000 -0800
@@ -77,7 +77,9 @@
 #include "marshal.h"
 #include "portable.h"
 #include "vhdlscanner.h"
-
+#include "vhdldocgen.h"
+#include "verilogscanner.h"
+#include "preVerilog.h"
 #include "layout.h"
 
 #define RECURSE_ENTRYTREE(func,var) \
@@ -8568,13 +8570,27 @@
     QFileInfo fi(fileName);
     BufStr preBuf(fi.size()+4096);
     //BufStr *bufPtr = &preBuf;
+    const char * ss=" hallo World this true\
+					butt nothing at all\
+					it doesn not matter\
+					ok";
+
+    QCString jkl=ss;
+	int zz=jkl.contains(' ');
+	int uu=jkl.contains('\n');
+	int uuio=jkl.contains('\\');
 
     if (Config_getBool("ENABLE_PREPROCESSING") && 
         parser->needsPreprocessing(extension))
     {
       msg("Preprocessing %s...\n",s->data());
+     if(Config_getBool("OPTIMIZE_OUTPUT_VERILOG")) 
+	 {
+	   preprocessVerilogFile(fileName,preBuf,0,-1);
+	 }else{ 	 
       preprocessFile(fileName,preBuf);
     }
+    }
     else
     {
       msg("Reading %s...\n",s->data());
@@ -8595,6 +8611,7 @@
     convBuf.addChar('\0');
 
     // use language parse to parse the file
+  // fprintf(stderr,"%s",convBuf.data());   
     parser->parseInput(fileName,convBuf.data(),root);
 
     // store the Entry tree in a file and create an index to
@@ -9093,6 +9110,7 @@
   //Doxygen::symbolMap->setAutoDelete(TRUE);
 
   Doxygen::runningTime.start();
+  initVerilogPreprocessor();
   initPreprocessor();
 
   Doxygen::parserManager = new ParserManager;
@@ -9100,7 +9118,7 @@
   Doxygen::parserManager->registerParser("python",  new PythonLanguageScanner);
   Doxygen::parserManager->registerParser("fortran", new FortranLanguageScanner);
   Doxygen::parserManager->registerParser("vhdl",    new VHDLLanguageScanner);
-
+  Doxygen::parserManager->registerParser("v", new VerilogScanner);
   // register any additional parsers here...
 
   initDefaultExtensionMapping();
@@ -9157,6 +9175,7 @@
   delete Doxygen::xrefLists;
   delete Doxygen::parserManager;
   cleanUpPreprocessor();
+  cleanUpVerilogPreprocessor();
   delete theTranslator;
   delete g_outputList;
   Mappers::freeMappers();

G:\VerilogProject>diff -u -i -b -B --strip-trailing-cr doxverilog/src/memberdef.cpp       doxygen-1.5.8/src/memberdef.cpp   
--- doxverilog/src/memberdef.cpp	2008-12-25 02:31:52.000000000 -0800
+++ doxygen-1.5.8/src/memberdef.cpp	2010-01-08 13:36:04.000000000 -0800
@@ -40,6 +40,7 @@
 #include "objcache.h"
 #include "vhdlscanner.h"
 #include "vhdldocgen.h"
+#include "verilogdocgen.h"
 
 #define START_MARKER 0x4D454D5B // MEM[
 #define END_MARKER   0x4D454D5D // MEM]
@@ -490,7 +491,7 @@
   //  type.stripPrefix("union " );
   type=removeRedundantWhiteSpace(type);
   args=a;
-  args=removeRedundantWhiteSpace(args);
+  args=args.simplifyWhiteSpace();//removeRedundantWhiteSpace(args);
   if (type.isEmpty()) decl=def->name()+args; else decl=type+" "+def->name()+args;
 
   memberGroup=0;
@@ -1851,6 +1852,14 @@
     QStrList sl;
     if (optVhdl)
     {
+       static bool optVerilog       = Config_getBool("OPTIMIZE_OUTPUT_VERILOG");
+       if(optVerilog){
+       if(this->getMemberSpecifiers() != VerilogDocGen::SIGNAL)
+       sl.append(VhdlDocGen::trTypeString(getMemberSpecifiers()));
+        else
+       sl.append(argsString());
+       }
+       else  
       sl.append(VhdlDocGen::trTypeString(getMemberSpecifiers()));
     }
     else
@@ -3628,6 +3637,13 @@
   m_impl->mtype=t; 
 }
 
+
+QCString MemberDef::getDefinition()
+{ 
+ return m_impl->def; 
+}
+
+
 void MemberDef::setDefinition(const char *d)
 { 
   makeResident();

G:\VerilogProject>diff -u -i -b -B --strip-trailing-cr doxverilog/src/memberdef.h         doxygen-1.5.8/src/memberdef.h   
--- doxverilog/src/memberdef.h	2008-12-07 04:20:16.000000000 -0800
+++ doxygen-1.5.8/src/memberdef.h	2009-12-28 21:46:28.000000000 -0800
@@ -343,6 +343,7 @@
 
     void findSectionsInDocumentation();
     
+	QCString getDefinition();
     bool visited;
    
   protected:

G:\VerilogProject>diff -u -i -b -B --strip-trailing-cr doxverilog/winbuild/Doxygen.vcproj doxygen-1.5.8/winbuild/Doxygen.vcproj   
--- doxverilog/winbuild/Doxygen.vcproj	2008-12-01 14:11:36.000000000 -0800
+++ doxygen-1.5.8/winbuild/Doxygen.vcproj	2009-12-28 15:54:36.000000000 -0800
@@ -1,10 +1,11 @@
 <?xml version="1.0" encoding="Windows-1252"?>
 <VisualStudioProject
 	ProjectType="Visual C++"
-	Version="8.00"
+	Version="9,00"
 	Name="Doxygen"
 	ProjectGUID="{309C9A4A-94D2-4837-9A11-45B0A6CF35C3}"
 	RootNamespace="Doxygen"
+	TargetFrameworkVersion="131072"
 	>
 	<Platforms>
 		<Platform
@@ -61,7 +62,7 @@
 				AssemblerListingLocation=".\Debug/"
 				ObjectFile=".\Debug/"
 				ProgramDataBaseFileName=".\Debug/"
-				WarningLevel="3"
+				WarningLevel="0"
 				SuppressStartupBanner="true"
 				DebugInformationFormat="4"
 			/>
@@ -87,6 +88,8 @@
 				GenerateDebugInformation="true"
 				ProgramDatabaseFile=".\Debug/Doxygen.pdb"
 				SubSystem="1"
+				RandomizedBaseAddress="1"
+				DataExecutionPrevention="0"
 				TargetMachine="1"
 			/>
 			<Tool
@@ -110,9 +113,6 @@
 				Name="VCAppVerifierTool"
 			/>
 			<Tool
-				Name="VCWebDeploymentTool"
-			/>
-			<Tool
 				Name="VCPostBuildEventTool"
 			/>
 		</Configuration>
@@ -187,6 +187,8 @@
 				AdditionalLibraryDirectories="Release"
 				ProgramDatabaseFile=".\Release/Doxygen.pdb"
 				SubSystem="1"
+				RandomizedBaseAddress="1"
+				DataExecutionPrevention="0"
 				TargetMachine="1"
 			/>
 			<Tool
@@ -210,9 +212,6 @@
 				Name="VCAppVerifierTool"
 			/>
 			<Tool
-				Name="VCWebDeploymentTool"
-			/>
-			<Tool
 				Name="VCPostBuildEventTool"
 			/>
 		</Configuration>
@@ -1581,6 +1580,30 @@
 				</FileConfiguration>
 			</File>
 			<File
+				RelativePath="..\src\preVerilog.cpp"
+				>
+			</File>
+			<File
+				RelativePath="..\src\preVerilog.l"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="Lex"
+						CommandLine="flex -PpreYYVerilog [AllOptions] [AdditionalOptions] [inputs]"
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="Lex"
+						CommandLine="flex  -PpreYYVerilog [AllOptions] [AdditionalOptions] [inputs]"
+					/>
+				</FileConfiguration>
+			</File>
+			<File
 				RelativePath="..\src\pycode.cpp"
 				>
 			</File>
@@ -1881,6 +1904,44 @@
 				</FileConfiguration>
 			</File>
 			<File
+				RelativePath="..\src\verilogdocgen.cpp"
+				>
+			</File>
+			<File
+				RelativePath="..\src\verilogparser.cpp"
+				>
+			</File>
+			<File
+				RelativePath="..\src\verilogparser.y"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCustomBuildTool"
+						Description="Running bison on verilogparser.y"
+						CommandLine="runbison.bat $(InputDir)&#x0D;&#x0A;"
+						Outputs="$(InputDir)\..\src\verilogparser.cpp"
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\src\verilogscanner.cpp"
+				>
+			</File>
+			<File
+				RelativePath="..\src\verilogscanner.l"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="Lex"
+						CommandLine="flex -8  -PverilogScanYY [AllOptions] [AdditionalOptions] [inputs]"
+					/>
+				</FileConfiguration>
+			</File>
+			<File
 				RelativePath="..\src\version.cpp"
 				>
 				<FileConfiguration
@@ -1927,6 +1988,10 @@
 				>
 			</File>
 			<File
+				RelativePath="..\src\vhdlscanner.cpp"
+				>
+			</File>
+			<File
 				RelativePath="..\src\vhdlscanner.l"
 				>
 				<FileConfiguration
@@ -2296,6 +2361,10 @@
 				>
 			</File>
 			<File
+				RelativePath="..\src\preVerilog.h"
+				>
+			</File>
+			<File
 				RelativePath="..\src\printdocvisitor.h"
 				>
 			</File>
@@ -2560,6 +2629,18 @@
 				>
 			</File>
 			<File
+				RelativePath="..\src\verilogdocgen.h"
+				>
+			</File>
+			<File
+				RelativePath="..\src\verilogparser.hpp"
+				>
+			</File>
+			<File
+				RelativePath="..\src\verilogscanner.h"
+				>
+			</File>
+			<File
 				RelativePath="..\src\version.h"
 				>
 			</File>
@@ -2576,10 +2657,6 @@
 				>
 			</File>
 			<File
-				RelativePath="..\src\vhdlscanner.cpp"
-				>
-			</File>
-			<File
 				RelativePath="..\src\vhdlscanner.h"
 				>
 			</File>

G:\VerilogProject>diff -u -i -b -B --strip-trailing-cr doxverilog/src/libdoxygen.pro      doxygen-1.5.8/src/libdoxygen.pro   
--- doxverilog/src/libdoxygen.pro	2008-12-26 10:55:44.000000000 -0800
+++ doxygen-1.5.8/src/libdoxygen.pro	2009-12-17 18:16:04.000000000 -0800
@@ -87,6 +87,7 @@
 		perlmodgen.h \
                 pngenc.h \
 		pre.h \
+				preVerilog.h \
                 printdocvisitor.h \
                 pycode.h \
                 pyscanner.h \
@@ -149,6 +150,10 @@
 		vhdlcode.h \
 		vhdldocgen.h \
 		vhdlscanner.h \
+		verilogscanner.h \
+		verilogdocgen.h \
+		verilogparser.hpp \
+		xmldocvisitor.h \
 		xmldocvisitor.h \
                 xmlgen.h
 
@@ -212,6 +217,7 @@
 		perlmodgen.cpp \
                 pngenc.cpp \
 		pre.cpp \
+		preVerilog.cpp \
 		pycode.cpp \
 		pyscanner.cpp \    
 		qhp.cpp \
@@ -228,6 +234,9 @@
 		translator.cpp \
 		util.cpp \
 		version.cpp \
+		verilogscanner.cpp \
+		verilogparser.cpp \
+		verilogdocgen.cpp \
 		vhdlcode.cpp \
 		vhdldocgen.cpp \
 		vhdlscanner.cpp \

G:\VerilogProject>diff -u -i -b -B --strip-trailing-cr doxverilog/src/libdoxygen.t        doxygen-1.5.8/src/libdoxygen.t   
--- doxverilog/src/libdoxygen.t	2008-08-11 03:48:20.000000000 -0700
+++ doxygen-1.5.8/src/libdoxygen.t	2009-12-17 18:16:04.000000000 -0800
@@ -66,9 +66,19 @@
 #$ GenerateDep("vhdlscanner.cpp","vhdlscanner.l");
 	$(LEX) -i -PvhdlscanYY -t vhdlscanner.l | $(INCBUFSIZE) >vhdlscanner.cpp
 
+#$ GenerateDep("verilogscanner.cpp","verilogscanner.l");
+	$(LEX) -8  -PverilogScanYY -t verilogscanner.l | $(INCBUFSIZE) >verilogscanner.cpp
+
+#$ GenerateDep("verilogparser.cpp","verilogparser.y");
+	$(YACC)  -v -d verilogparser.y -o verilogparser.cpp 
+
+
 #$ GenerateDep("vhdlcode.cpp","vhdlcode.l");
 	$(LEX) -i -PvhdlcodeYY -t vhdlcode.l | $(INCBUFSIZE) >vhdlcode.cpp
 
+#$ GenerateDep("preVerilog.cpp","preVerilog.l");
+	$(LEX) -PpreYYVerilog -t preVerilog.l | $(INCBUFSIZE) >preVerilog.cpp 
+
 #$ GenerateDep("pre.cpp","pre.l");
 	$(LEX) -PpreYY -t pre.l | $(INCBUFSIZE) >pre.cpp 
 

G:\VerilogProject>diff -u -i -b -B --strip-trailing-cr doxverilog/winbuild/runbison.bat   doxygen-1.5.8/winbuild/runbison.bat   
--- doxverilog/winbuild/runbison.bat	2007-01-21 09:29:44.000000000 -0800
+++ doxygen-1.5.8/winbuild/runbison.bat	2009-12-17 18:16:04.000000000 -0800
@@ -1,3 +1,5 @@
 bison -l -d -p cppExpYY %1\..\src\constexp.y -o %1\..\src\ce_parse.c
 del %1\..\src\ce_parse.c
 bison -l -p cppExpYY %1\..\src\constexp.y -o %1\..\src\ce_parse.cpp
+bison -d -t -v %1\..\src\verilogparser.y -o %1\..\src\verilogparser.cpp
+
