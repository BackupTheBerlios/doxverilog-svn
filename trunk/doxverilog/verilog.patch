--- doxNew/src/classdef.cpp	2011-08-11 21:45:38.000000000 +0200
+++ doxy175/src/classdef.cpp	2011-12-10 11:14:28.000000000 +0100
@@ -38,6 +38,7 @@
 #include "searchindex.h"
 #include "vhdldocgen.h"
 #include "layout.h"
+#include "verilogdocgen.h"
 
 //-----------------------------------------------------------------------------
 
@@ -382,19 +383,22 @@
                                    )
 {
   //printf("insertInternalMember(%s) isHidden()=%d\n",md->name().data(),md->isHidden());
+  static bool optVerilog    = Config_getBool("OPTIMIZE_OUTPUT_VHDL");
+ 
   if (md->isHidden()) return;
 
-  if (getLanguage()==SrcLangExt_VHDL)
-  {
-    QCString title=VhdlDocGen::trVhdlType(md->getMemberSpecifiers(),FALSE);
-    if (!m_impl->vhdlSummaryTitles.find(title))
-    {
-      m_impl->vhdlSummaryTitles.append(title,new QCString(title));
-    }
-  }
-
-  if (1 /*!isReference()*/) // changed to 1 for showing members of external
-                            // classes when HAVE_DOT and UML_LOOK are enabled.
+  if(optVerilog)
+	  {
+	  QCString tti=VhdlDocGen::trVhdlType(md->getMemberSpecifiers(),false);
+      //  VhdlDocGen::deleteAllChars(tti,' '); // Always Construct
+  
+        QStringList qsl=this->getList();
+        int i=qsl.findIndex(tti);
+        if(i<0)
+          this->addListType(tti);
+	  }
+  
+  if (!isReference())
   {
     static bool extractPrivate = Config_getBool("EXTRACT_PRIVATE");
 
@@ -2241,7 +2245,7 @@
           ol.startTypewriter();
           ol.docify(" [");
           QStrList sl;
-          if (lang==SrcLangExt_VHDL) 
+          if (lang==SrcLangExt_VHDL || lang==SrcLangExt_VERILOG) 
           {
             sl.append(VhdlDocGen::trVhdlType(md->getMemberSpecifiers())); //append vhdl type
           }

--- doxNew/src/config.l	2011-11-12 17:06:02.000000000 +0100
+++ doxy175/src/config.l	2011-12-09 17:20:42.000000000 +0100
@@ -1484,8 +1484,21 @@
     Config_getBool("INHERIT_DOCS")          = FALSE;
     Config_getBool("HIDE_SCOPE_NAMES")      = TRUE;
     Config_getBool("EXTRACT_PRIVATE")       = TRUE;
+  } 
+
+if (Config_getBool("OPTIMIZE_OUTPUT_VHDL") && Config_getBool("OPTIMIZE_OUTPUT_VERILOG"))
+  {
+      fprintf(stderr,"\n Only the Verilog  files will be tailored correctly  !\n");
+  } 
+ 
+ if(Config_getBool("OPTIMIZE_OUTPUT_VERILOG") && !Config_getBool("OPTIMIZE_OUTPUT_VHDL")){
+   // must be set for parsing verilog files
+   Config::instance()->addBool("OPTIMIZE_OUTPUT_VHDL"," ",true);
+   Config::instance()->addBool("EXTRACT_ALL"," ",true);
+   
   }
 
+
 }
 
 void Config::init()

C:\.Trash-1000>diff -u doxNew/src/index.cpp doxy175/src/index.cpp 
--- doxNew/src/index.cpp	2011-08-01 16:24:24.000000000 +0200
+++ doxy175/src/index.cpp	2011-11-12 20:29:36.000000000 +0100
@@ -42,8 +42,8 @@
 #include "pagedef.h"
 #include "dirdef.h"
 #include "vhdldocgen.h"
+#include "verilogdocgen.h"
 #include "layout.h"
-
 #define MAX_ITEMS_BEFORE_MULTIPAGE_INDEX 200
 #define MAX_ITEMS_BEFORE_QUICK_INDEX 30
 
@@ -1518,6 +1518,11 @@
   }
   LayoutNavEntry *lne = LayoutDocManager::instance().rootNavEntry()->find(LayoutNavEntry::ClassAnnotated);
   QCString title = lne->title();
+  if(Config_getBool("OPTIMIZE_OUTPUT_VHDL")) 
+  {
+	  VhdlDocGen::findConstraintFile(lne);
+       title="Module List";
+  }
   startFile(ol,"annotated",0,title,HLI_Annotated);
   startTitle(ol,0);
   //QCString longTitle = title;
@@ -1697,8 +1702,7 @@
   static bool hideFriendCompounds = Config_getBool("HIDE_FRIEND_COMPOUNDS");
   ClassDef *cd=0;
 
-  if (md->getLanguage()==SrcLangExt_VHDL && 
-      (VhdlDocGen::isRecord(md) || VhdlDocGen::isUnit(md)))
+  if (md->getLanguage()==SrcLangExt_VHDL || md->getLanguage()==SrcLangExt_VERILOG) // &&  (VhdlDocGen::isRecord(md) || VhdlDocGen::isUnit(md)))
   {
     VhdlDocGen::adjustRecordMember(md);
   }
@@ -2429,6 +2433,8 @@
          MemberDef *md)
 {
   static bool hideFriendCompounds = Config_getBool("HIDE_FRIEND_COMPOUNDS");
+  static bool optVerilog    = Config_getBool("OPTIMIZE_OUTPUT_VERILOG");
+  
   bool isLinkable = md->isLinkable();
   ClassDef *cd=0;
   NamespaceDef *nd=0;
@@ -2438,6 +2444,8 @@
       cd->isLinkable()       &&
       cd->templateMaster()==0)
   {
+ if(optVerilog) 
+  VhdlDocGen::adjustRecordMember(md); 
     QCString n = md->name();
     uchar charCode = (uchar)n.at(0);
     uint letter = charCode<128 ? tolower(charCode) : charCode;
@@ -2543,11 +2551,18 @@
   }
 }
 
-static QCString searchId(const QCString &s)
+static QCString searchId(const QCString &str)
 {
-  int c;
+  
+ static bool optVerilog    = Config_getBool("OPTIMIZE_OUTPUT_VERILOG");
+ 
+int c;
   uint i;
   QCString result;
+  QCString s=str;
+  if(optVerilog) 
+	  VerilogDocGen::adjustMemberName(s); 
+
   for (i=0;i<s.length();i++)
   {
     c=s.at(i);

C:\.Trash-1000>diff -u doxNew/src/util.cpp doxy175/src/util.cpp 
--- doxNew/src/util.cpp	2011-08-14 00:43:12.000000000 +0200
+++ doxy175/src/util.cpp	2011-11-12 17:06:04.000000000 +0100
@@ -6264,6 +6264,11 @@
   { "python",      "python",  SrcLangExt_Python  },
   { "fortran",     "fortran", SrcLangExt_Fortran },
   { "vhdl",        "vhdl",    SrcLangExt_VHDL    },
+  { "ucf",        "vhd",    SrcLangExt_VHDL   },
+  { "qsf",        "vhd",    SrcLangExt_VHDL   },
+  { "ucf",        "v",    SrcLangExt_VERILOG   },
+  { "qsf",        "v",    SrcLangExt_VERILOG   },
+  { "v",        "v",    SrcLangExt_VERILOG    },
   { "dbusxml",     "dbusxml", SrcLangExt_XML     },
   { "tcl",         "tcl",     SrcLangExt_Tcl     },
   { 0,             0,        (SrcLangExt)0       }
@@ -6329,6 +6334,11 @@
   updateLanguageMapping(".f90",   "fortran");
   updateLanguageMapping(".vhd",   "vhdl");
   updateLanguageMapping(".vhdl",  "vhdl");
+  updateLanguageMapping(".ucf",  "vhdl");
+  updateLanguageMapping(".qsf",  "vhdl");
+  updateLanguageMapping(".ucf",  "v");
+  updateLanguageMapping(".qsf",  "v");
+  updateLanguageMapping(".v",  "v");
   updateLanguageMapping(".tcl",   "tcl");
   //updateLanguageMapping(".xml",   "dbusxml");
 }

C:\.Trash-1000>diff -u doxNew/src/util.h doxy175/src/util.h 
--- doxNew/src/util.h	2011-08-08 19:38:00.000000000 +0200
+++ doxy175/src/util.h	2011-11-12 17:06:04.000000000 +0100
@@ -102,7 +102,8 @@
   SrcLangExt_Fortran = 0x1000,
   SrcLangExt_VHDL    = 0x2000,
   SrcLangExt_XML     = 0x4000,
-  SrcLangExt_Tcl     = 0x8000
+  SrcLangExt_Tcl     = 0x8000,
+  SrcLangExt_VERILOG = 0x10000
 };
 
 QCString langToString(SrcLangExt lang);

C:\.Trash-1000>diff -u doxNew/src/vhdldocgen.cpp doxy175/src/vhdldocgen.cpp 
--- doxNew/src/vhdldocgen.cpp	2011-08-01 10:30:56.000000000 +0200
+++ doxy175/src/vhdldocgen.cpp	2011-11-13 16:44:26.000000000 +0100
@@ -42,11 +42,13 @@
 #include "definition.h"
 #include "searchindex.h"
 #include "outputlist.h"
-#include "parserintf.h"
+ #include "verilogdocgen.h"
+
 /* --------------------------------------------------------------- */
 
 //#define theTranslator_vhdlType theTranslator->trVhdlType
 #define theTranslator_vhdlType VhdlDocGen::trVhdlType
+#define COL_SIZE 80 
 
 static QDict<QCString> g_vhdlKeyDict0(17,FALSE); 
 static QDict<QCString> g_vhdlKeyDict1(17,FALSE); 
@@ -56,6 +58,9 @@
 static  QCString g_vhdltype("comment");
 static  QCString g_vhdllogic("vhdllogic");
 
+static void initUCF(Entry* root,const char* type,QCString &  qcs,int line,QCString & fileName,QCString & brief);
+//static void writeUCFLink(const MemberDef* mdef,OutputList &ol);
+
 // keywords
 static const char* g_vhdlKeyWordMap0[] = 
 { 
@@ -155,11 +160,33 @@
   return 0;
 }
 
-/*!
- * returns the parsed entry at line xxx
- */
+
+ bool checkString(QCString &name,OutputList& ol)
+{
+  if (name.isEmpty()) return FALSE;
+  name=name.simplifyWhiteSpace();
+  if (name.isEmpty()) return FALSE;
+  
+  int len=name.length();
+  if (name.at(0)=='"' && name.at(len-1)=='"' && len > 2)
+  {
+      VhdlDocGen::startFonts(name,"keyword",ol);     
+      return true;
+  }
+    return false;
+  }
 
 
+QCString* getColorOfWord(int col)
+{
+  switch(col)
+  {
+   case 1: return &g_vhdlkeyword;
+   case 2: return &g_vhdllogic;
+   default:return 0;
+  }
+}
+
 void VhdlDocGen::debugClassName(ClassSDict* mDict)
 {
   // for each class
@@ -637,6 +664,13 @@
 
 QCString VhdlDocGen::getClassTitle(const ClassDef *cd)
 {
+ 
+   static bool optVerilog = Config_getBool("OPTIMIZE_OUTPUT_VERILOG");
+  if(optVerilog)
+   return VerilogDocGen::getClassTitle(cd);
+
+
+
   QCString pageTitle;
   if (cd==0) return "";
   pageTitle+=cd->displayName();
@@ -967,10 +1001,16 @@
 void VhdlDocGen::prepareComment(QCString& qcs)
 {
   QCString temp;
+     static bool optVerilog       = Config_getBool("OPTIMIZE_OUTPUT_VERILOG");
+
   const char* s="--!";
   //const char *start="--!{";
   //const char *end="--!}";
   int index=0; 
+  if(optVerilog)
+     s=vlogComment;
+     else
+    s="--!";
 
 #if 0
   index=qcs.find(start,0,TRUE);
@@ -1168,6 +1208,13 @@
 
 QCString VhdlDocGen::getProtectionName(int prot)
 {
+ static bool optVerilog    = Config_getBool("OPTIMIZE_OUTPUT_VERILOG");
+ if(optVerilog)
+	 {
+       if(prot==Public) return "Module";
+		   return "Primitive";
+	 }
+
   if (prot==VhdlDocGen::ENTITYCLASS)
     return "entity";
   else if (prot==VhdlDocGen::ARCHITECTURECLASS)
@@ -1182,6 +1229,13 @@
 
 QCString VhdlDocGen::trTypeString(int type)
 {
+  
+      static bool optVerilog       = Config_getBool("OPTIMIZE_OUTPUT_VERILOG");
+
+    if(optVerilog)
+    return VerilogDocGen::convertTypeToString(type);
+ 
+  
   switch(type)
   {
     case VhdlDocGen::LIBRARY:        return "Library"; 
@@ -1264,9 +1318,16 @@
 
 QCString VhdlDocGen::getProcessNumber()
 {
+   static bool optVerilog=Config_getBool("OPTIMIZE_OUTPUT_VERILOG");
+
   static int stringCounter;
+  QCString qcs;
   char buf[8];
-  QCString qcs("PROCESS_");
+    if(optVerilog)
+     qcs="ALWAYS_";
+    else
+    qcs="PROCESS_";
+
   sprintf(buf,"%d",stringCounter++);
   qcs.append(&buf[0]);
   return qcs;
@@ -1278,16 +1339,18 @@
 
 void VhdlDocGen::writeFormatString(QCString& qcs,OutputList&ol,const MemberDef* mdef)
 {
-  QRegExp reg("[\\/\\:\\<\\>\\:\\s\\,\\;\\'\\+\\-\\*\\|\\&\\=\\(\\)\"]");
+  static bool optVerilog=Config_getBool("OPTIMIZE_OUTPUT_VERILOG");
+  QRegExp reg("[\\[\\]\\/\\:\\<\\>\\s\\,\\;\\+\\-\\*\\|\\&\\=\\(\\)\"\\s]");
   qcs+=QCString(" ");// parsing the last sign
-  QCString *ss;
+  const QCString *ss;
   QCString find=qcs;
   QCString temp=qcs;
   char buf[2];
   buf[1]='\0';
-
   int j;
   int len;
+    int col=0;
+ 
   j = reg.match(temp.data(),0,&len);
 
   ol.startBold();
@@ -1295,8 +1358,24 @@
   {
     while (j>=0)
     {
+     bool bString=false;
+    
       find=find.left(j);
       buf[0]=temp[j];
+	  if(buf[0]=='"' && temp.length()>1)
+	  {
+		int i=temp.find('"',1);
+		if(i>0){
+         find=temp.left(i+1);
+         j+=i;
+         bString=true;
+		}
+	  }
+	  
+	  if(optVerilog){
+        ss=VerilogDocGen::findKeyWord(find);
+     }
+	  else
       ss=VhdlDocGen::findKeyWord(find);
       bool k=VhdlDocGen::isNumber(find); // is this a number
       if (k)
@@ -1313,19 +1392,33 @@
       {
 	if (j>0)
 	{
+         if(!checkString(find,ol))	   
 	  VhdlDocGen::writeStringLink(mdef,find,ol);
 	}
       }
+      if(!bString)
       VhdlDocGen::startFonts(&buf[0],"vhdlchar",ol);
+      col+=j+1;
+      if( col > COL_SIZE)
+	  {
+		  ol.docify(". . . .");
+		  return;
+	  }
 
       QCString st=temp.remove(0,j+1);
       find=st;
       temp=st;
       j = reg.match(temp.data(),0,&len);
+	  bString=false;
     }//while
   }//if
   else
   {
+      if(checkString(find,ol))
+	  {
+        printf("found"); 
+	  }
+	  else
     VhdlDocGen::startFonts(find,"vhdlchar",ol);     
   }
   ol.endBold();
@@ -1337,10 +1430,24 @@
 
 bool VhdlDocGen::isNumber(const QCString& s)
 {
+    static bool optVerilog=Config_getBool("OPTIMIZE_OUTPUT_VERILOG");
+
   static QRegExp regg("[0-9][0-9eEfFbBcCdDaA_.#-]*");
+  static QRegExp reggVerilog("[0-9]+[']*[0-9a-fA-FhHoOxXzZ._?]*");
+  static QRegExp reggVerilog1("['][0-9a-fA-FhHoOxXzZ._?]+");
  
   if (s.isEmpty()) return FALSE;
   int j,len;
+    if(optVerilog){
+    QCString t=s;
+    VhdlDocGen::deleteAllChars(t,' ');
+     j = reggVerilog.match(t.data(),0,&len);
+     if ((j==0) && (len==(int)t.length())) return true; 
+     j = reggVerilog1.match(t.data(),0,&len);
+     if ((j==0) && (len==(int)t.length())) return true;
+     return false;
+}  
+  else 
   j = regg.match(s.data(),0,&len);
   if ((j==0) && (len==(int)s.length())) return TRUE; 
   return FALSE;
@@ -1371,6 +1478,15 @@
 
 void VhdlDocGen::formatString(QCString & qcs, OutputList& ol,const MemberDef* mdef)
 { 
+  
+    static bool optVerilog  = Config_getBool("OPTIMIZE_OUTPUT_VERILOG");
+
+  if(optVerilog){
+      VhdlDocGen::writeFormatString(qcs,ol,mdef);
+       return;
+  }
+
+  
   QCString temp(qcs.length());  
   qcs.stripPrefix(":");
   qcs.stripPrefix("is");
@@ -1581,6 +1697,8 @@
     const ArgumentList* al,
     bool /*type*/)
 {
+   static bool optVerilog       = Config_getBool("OPTIMIZE_OUTPUT_VERILOG"); 
+
   if (al==0) return;
   bool sem=FALSE;    
   ol.enableAll();
@@ -1598,37 +1716,47 @@
   for (;(arg=ali.current());++ali)
   { 
     ol.startParameterType(first,"");  
-    //if (first) ol.writeChar('(');
-    if (VhdlDocGen::isProcedure(md))
+   // if (first) ol.writeChar('(');
+    if (!VhdlDocGen::isProcess(md))
     {
-      startFonts(arg->defval,"keywordtype",ol);
+      if (TRUE) //VhdlDocGen::isProcedure(md))
+      {
+	startFonts(arg->defval,"keywordtype",ol);
+	ol.docify(" ");
+      } 
+      // linkifyText(TextGeneratorOLImpl(ol),md->getClassDef(),md->getBodyDef(),md->name(),arg->type);
+         if(optVerilog)  
+      VerilogDocGen::adjustMemberName(arg->name);
+   
+      VhdlDocGen::writeFormatString(arg->name,ol,md);
       ol.docify(" ");
-    } 
+    
     ol.endParameterType();
-
-    ol.startParameterName(TRUE);
-    VhdlDocGen::writeFormatString(arg->name,ol,md);
-    ol.docify(" ");
-
-    if (VhdlDocGen::isProcedure(md))
-      startFonts(arg->attrib,"stringliteral",ol);
-    else if (VhdlDocGen::isVhdlFunction(md))
-      startFonts(QCString("in"),"stringliteral",ol);
-
-
+ ol.startParameterName(true);
+	
+      if (VhdlDocGen::isProcedure(md))
+	   {
+  	  	   if(!optVerilog )
+	startFonts(arg->attrib,"stringliteral",ol);
+      else
+	startFonts(QCString("in"),"stringliteral",ol);
+    }
+	
     ol.docify(" ");
     ol.disable(OutputGenerator::Man);
     ol.startEmphasis();
     ol.enable(OutputGenerator::Man);
     if (!VhdlDocGen::isProcess(md))
       startFonts(arg->type,"vhdlkeyword",ol);
+    else
+      startFonts(arg->name,"vhdlkeyword",ol);
     ol.disable(OutputGenerator::Man);
     ol.endEmphasis();
     ol.enable(OutputGenerator::Man);
 
     if (--index) 
     {
-      ol.docify(" , ");    
+   //   ol.docify(" , ");    
       ol.endParameterName(FALSE,FALSE,FALSE);
     }
     else
@@ -1639,8 +1767,9 @@
 
     sem=TRUE;        
     first=FALSE;
+    }
   }
-  //ol.endParameterList(); 
+  ol.endParameterList(); 
 
 } // writeDocFunProc
 
@@ -1711,6 +1840,14 @@
 {
   static ClassDef *cdef;
   //static GroupDef* gdef;
+  static bool optVerilog  = Config_getBool("OPTIMIZE_OUTPUT_VERILOG");
+  
+   if(optVerilog){
+       VerilogDocGen::writeVerilogDeclarations(ml,ol,0,cd);
+       return;   
+   }
+
+ 
   if (cd && cdef!=cd)
   { // only one inline link
     VhdlDocGen::writeInlineClassLink(cd,ol);
@@ -1745,7 +1882,8 @@
   VhdlDocGen::writeVHDLDeclarations(ml,ol,cd,0,0,gd,theTranslator_vhdlType(VhdlDocGen::COMPONENT_INST,FALSE),0,FALSE,VhdlDocGen::COMPONENT_INST);
   VhdlDocGen::writeVHDLDeclarations(ml,ol,cd,0,0,gd,theTranslator_vhdlType(VhdlDocGen::ALIAS,FALSE),0,FALSE,VhdlDocGen::ALIAS);
   VhdlDocGen::writeVHDLDeclarations(ml,ol,cd,0,0,gd,theTranslator_vhdlType(VhdlDocGen::MISCELLANEOUS),0,FALSE,VhdlDocGen::MISCELLANEOUS);
-  
+  VhdlDocGen::writeVHDLDeclarations(ml,ol,cd,0,fd,gd,theTranslator_vhdlType(VhdlDocGen::UCF_CONST,FALSE),0,FALSE,VhdlDocGen::UCF_CONST);
+
   // configurations must be added to global file definitions.  
   VhdlDocGen::writeVHDLDeclarations(ml,ol,cd,0,fd,gd,theTranslator_vhdlType(VhdlDocGen::CONFIG,FALSE),0,FALSE,VhdlDocGen::CONFIG);
 }
@@ -1773,6 +1911,10 @@
     {
       mdd->setMemberSpecifiers(VhdlDocGen::MISCELLANEOUS);        
     } 
+    else if (stricmp(mdd->typeString(),"ucf_const")==0)
+    {
+		mdd->setMemberSpecifiers(VhdlDocGen::UCF_CONST);        
+    } 
   }
 }
 
@@ -1780,8 +1922,18 @@
 void VhdlDocGen::writeVHDLTypeDocumentation(const MemberDef* mdef, const Definition *d, OutputList &ol)
 {
   ClassDef *cd=(ClassDef*)d;
-  if (cd==0) return;
-  if ((VhdlDocGen::isVhdlFunction(mdef) || VhdlDocGen::isProcedure(mdef) || VhdlDocGen::isProcess(mdef)))
+   bool bParseVerilogFunc=false;
+  static bool optVerilog  = Config_getBool("OPTIMIZE_OUTPUT_VERILOG");
+
+  if(optVerilog)
+   if(!mdef->isVariable())
+    bParseVerilogFunc=true;
+
+
+  if (cd==0)
+	  return;
+ // if ((VhdlDocGen::isVhdlFunction(mdef) || VhdlDocGen::isProcedure(mdef) || VhdlDocGen::isProcess(mdef)))
+ if ((VhdlDocGen::isVhdlFunction(mdef) || VhdlDocGen::isProcedure(mdef) || VhdlDocGen::isProcess(mdef) || bParseVerilogFunc))
   {
     QCString nn=mdef->typeString();
     nn=nn.stripWhiteSpace();
@@ -1815,12 +1967,64 @@
   if (mdef->isVariable())
   { 
     //ol.docify(mdef->name().data());
-    writeLink(mdef,ol);
+      if(optVerilog)
+      {
+     
+      
+  if (VhdlDocGen::isConstraint(mdef))
+  {
+      	if(mdef->name().contains("dummy")==0)
+        writeLink(mdef,ol);
+           ol.docify(" ");     
+		  QCString largs(mdef->argsString());
+      QCString  ttype = VhdlDocGen::splitString(largs, '#');		
+		ttype=largs;
+		 VhdlDocGen::formatString(ttype,ol,mdef);
+		 return;
+  } else{
+   ol.startFontClass("stringliteral");
+      writeLink(mdef,ol);
+      ol.endFontClass();
+      }
+      
+      }
+  else 
+     writeLink(mdef,ol);
     ol.docify(" ");
+      
+      
+      
+   if(mdef->getMemberSpecifiers()==VerilogDocGen::FEATURE)
+   {
+	 QCString arg=mdef->getDefinition();
+	 int kr=arg.find("\\?");	  
+	 if(kr>=0)
+	 {
+       arg=arg.left(kr-2);
+	   arg.stripPrefix("feature");
+	   arg=arg.simplifyWhiteSpace();
+	   arg.stripPrefix(mdef->name().data());
+	   arg.append("{ . . . }");
+	   VhdlDocGen::formatString(arg,ol,mdef);
+	 }
+	
+	 else{
+     QCString ttype=mdef->typeString();
+	 ttype.stripPrefix("feature");
+	 VhdlDocGen::formatString(ttype,ol,mdef);
+	 }
+	//VerilogDocGen::parseDefineConstruct(arg,mdef,ol);
+	return ;
+    }
+
+	
+	if(mdef->getMemberSpecifiers()!=VerilogDocGen::FEATURE){
     QCString ttype=mdef->typeString();
     VhdlDocGen::formatString(ttype,ol,mdef);
     ol.docify(" ");
-    if (VhdlDocGen::isPort(mdef))
+    }  
+   // if (VhdlDocGen::isPort(mdef))
+      if (VhdlDocGen::isPort(mdef)|| (optVerilog && mdef->getMemberSpecifiers()!=VerilogDocGen::SIGNAL)) 
     {
       QCString largs=mdef->argsString();
       VhdlDocGen::formatString(largs,ol,mdef);
@@ -2012,9 +2216,10 @@
       writeLink(mdef,ol);
       ol.docify(" ");
       ol.insertMemberAlign();
-      if (mm==VhdlDocGen::GENERIC)
+      if (false)
       {
 	ol.startBold();
+	ol.docify(" ");
 	VhdlDocGen::formatString(ltype,ol,mdef);
 	ol.endBold();
       }
@@ -2022,7 +2227,7 @@
       {
 	ol.docify(" ");
 	ol.startBold();
-	ol.docify(mdef->typeString());
+	 VhdlDocGen::formatString(ltype,ol,mdef);
 	ol.endBold();
 	ol.docify(" ");
 	VhdlDocGen::formatString(largs,ol,mdef);
@@ -2305,6 +2510,7 @@
   {
     nn=nn.mid(j,nn.length());
     mdef->setName(nn.data());
+	mdef->setLocalName(nn);
   }
 }//adjustRecordMember
 
@@ -2313,8 +2519,22 @@
 bool VhdlDocGen::writeClassType( ClassDef * cd,
                                  OutputList &ol ,QCString & cname)
 {
+  //static ClassDef *prev = 0;
+  //if (prev == cd)  return TRUE;
+  //if (cd != prev) prev=cd;
+  static bool optVerilog    = Config_getBool("OPTIMIZE_OUTPUT_VERILOG");
+
+  QCString qcs;
+  if(optVerilog){
+   if(cd->protection()==Public)
+    qcs+=" Module";
+     else
+    qcs+=" Primitive";
+  }
+  else{
   int id=cd->protection();
-  QCString qcs = VhdlDocGen::trTypeString(id+2);
+       qcs = VhdlDocGen::trTypeString(id+2);
+	  }
   cname=VhdlDocGen::getClassName(cd);
   ol.startBold();
   ol.writeString(qcs.data());
@@ -2325,6 +2545,10 @@
 
 QCString VhdlDocGen::trVhdlType(int type,bool sing)
 {
+   static bool optVerilog    = Config_getBool("OPTIMIZE_OUTPUT_VERILOG");
+ 
+   if(optVerilog) return VerilogDocGen::convertTypeToString(type,sing);
+
   switch(type)
   {
     case VhdlDocGen::LIBRARY:      
@@ -2426,6 +2650,12 @@
 
 QCString VhdlDocGen::trDesignUnitListDescription()
 {
+
+ static bool optVerilog = Config_getBool("OPTIMIZE_OUTPUT_VERILOG");
+ if(optVerilog)
+  return "Here is a list of all design unit members with links to "
+         "the Modules they belong to:";
+
   return "Here is a list of all design unit members with links to "
          "the Entities and Packages they belong to:"; 
 }
@@ -2442,6 +2672,9 @@
 
 QCString VhdlDocGen::trFunctionAndProc()
 {
+ if(Config_getBool("OPTIMIZE_OUTPUT_VERILOG"))
+   return "Functions/Tasks/Always Construct";
+ 
   return "Functions/Procedures/Processes";
 }
 
@@ -2482,13 +2715,25 @@
 
 void VhdlDocGen::writeStringLink(const MemberDef *mdef,QCString mem, OutputList& ol)
 {
+  bool optVerilog          = Config_getBool("OPTIMIZE_OUTPUT_VERILOG");
+
   if (mdef) 
   {
     ClassDef *cd=mdef->getClassDef();
     if (cd)
     { 
+        MemberDef* memdef=NULL;
+
       QCString n=cd->name(); 
-      MemberDef* memdef=VhdlDocGen::findMember(n,mem);
+	     if(optVerilog){
+        if(mem.contains("`"))
+        memdef = findGlobalMember(mem);
+        if(memdef==0)
+        memdef=VerilogDocGen::findMember(n,mem,-1);
+      }
+      else
+        memdef=VhdlDocGen::findMember(n,mem);
+
       if (memdef && memdef->isLinkable()) 
       { 
 	ol.startBold();
@@ -2507,9 +2752,11 @@
   //  Definition d=(Definition)mdef;
   //	QCString fdd=mdef->getDefFileExtension();
   //	QCString scope=mdef->getScopeString();
+  //assert(false);
   QCString codeFragment=mdef->documentation();
   //FileDef *fd=mdef->getFileDef();
-
+fprintf(stderr,"%s",codeFragment.data());
+//assert(false);
   //int start=mdef->getStartBodyLine();
   //int end=mdef->getEndBodyLine();
   QStringList qsl=QStringList::split("\n",codeFragment);
@@ -2536,36 +2783,238 @@
 void VhdlDocGen::writeSource(MemberDef *mdef,OutputList& ol,QCString & cname)
 {
   //  Definition d=(Definition)mdef;
+  //static bool optVerilog = Config_getBool("OPTIMIZE_OUTPUT_VERILOG");
+ 
   QCString fdd=mdef->getDefFileExtension();
   QCString scope=mdef->getScopeString();
   QCString codeFragment=mdef->documentation();
-  FileDef *fd=mdef->getFileDef();
-  int start=mdef->getStartBodyLine();
+ int start=mdef->getStartBodyLine();
   int end=mdef->getEndBodyLine();
   QStringList qsl=QStringList::split("\n",codeFragment);
-
-  ParserInterface *pIntf = Doxygen::parserManager->getParser(fdd.data());
-  pIntf->resetCodeParserState();
-
-  ol.startParagraph();
+  
+  //fprintf(stderr,"\n <<%s %s %d %d>>\n\n",codeFragment.data(),scope.data(),start,end);
+  //assert(false);
+  //ol.startParagraph();
   ol.startCodeFragment();
-  pIntf->parseCode(ol,               // codeOutIntf
-                   scope,            // scope
-                   codeFragment,     // input
-                   FALSE,            // isExample
-                   0,                // exampleName
-                   fd,               // fileDef
-                   start,            // startLine
-                   end,              // endLine
-                   TRUE,             // inlineFragment
-                   mdef,             // memberDef
-                   FALSE             // show line numbers
-                   );
+ int len = qsl.count();	
+  QCString lineNumber;
+  int j;
+  for (j=0;j<len;j++)
+  {
+    lineNumber.sprintf("%05d",start++);
+    lineNumber+=" ";
+    ol.startBold();
+    ol.docify(lineNumber.data());
+    ol.endBold();
+    ol.insertMemberAlign();
+    QCString q=(QCString)qsl[j];
+    VhdlDocGen::writeFormatString(q,ol,mdef);
+	ol.docify("\n"); 
+  }
   ol.endCodeFragment();
-  ol.endParagraph();
+  //ol.endParagraph();
 
   mdef->writeSourceDef(ol,cname);
   mdef->writeSourceRefs(ol,cname);
   mdef->writeSourceReffedBy(ol,cname);
 }
 
+ void VhdlDocGen::parseUCF(const char*  input,  Entry* entity,QCString fileName,bool altera)
+ {
+   QCString ucFile(input);
+   int lineNo=0;
+   QCString  newLine="\n";
+   QCString comment("##");
+   QCString brief;
+
+   while(!ucFile.isEmpty())
+   {
+	   int i=ucFile.find("\n"); 
+	   if(i<0) break;
+       lineNo++;
+	   QCString temp=ucFile.left(i);
+	   temp=temp.stripWhiteSpace();
+	   bool bb=temp.stripPrefix("//");
+	   if(!temp.isEmpty())
+	   {
+		   if(temp.stripPrefix("##")  )
+		   {
+		    brief+=temp;
+			brief.append("\\n");
+		   }
+	      else if(!temp.stripPrefix("#") && !bb)
+		   {	      
+		  if(altera)
+		  {
+			  int i=temp.find("-name");
+			  if(i>0)
+			  temp=temp.remove(0,i+5);
+
+			  temp.stripPrefix("set_location_assignment");
+
+               initUCF(entity,0,temp,lineNo,fileName,brief);
+		  }
+		  else{			  
+			  QRegExp ee("[\\s=]");
+			  int i=temp.find(ee);
+			  QCString ff=temp.left(i);			  
+			  temp.stripPrefix(ff.data());
+			   ff.append("#");			  		  
+			   if(!temp.isEmpty())
+			  {
+				  initUCF(entity,ff.data(),temp,lineNo,fileName,brief);
+		      }
+		  }
+		   }
+	   }//temp
+	   
+	   ucFile=ucFile.remove(0,i+1);
+   }// while 
+ }
+
+static void initUCF(Entry* root,const char*  type,QCString &  qcs,int line,QCString & fileName,QCString & brief)
+{
+	if(qcs.isEmpty())return; 
+  QRegExp sp("\\s");
+  QRegExp reg("[\\s=]");
+ QCString n;
+ // bool bo=(stricmp(type,qcs.data())==0);
+
+  VhdlDocGen::deleteAllChars(qcs,';');
+   qcs=qcs.stripWhiteSpace();  
+  
+  int i= qcs.find(reg); 
+	   if(i<0) return;
+  if(i==0)
+  { 
+	  n=type;
+	  VhdlDocGen::deleteAllChars(n,'#');
+	  type="";
+  }  
+  else
+	  n=qcs.left(i);
+	  qcs=qcs.remove(0,i+1);
+	 //  qcs.prepend("|");
+
+  qcs.stripPrefix("=");
+
+  Entry* current=new Entry;
+
+  current->spec=VhdlDocGen::UCF_CONST;
+  current->section=Entry::VARIABLE_SEC;
+   current->bodyLine=line;
+  current->fileName=fileName;
+  current->type="ucf_const";
+//if(!bo) 
+  //current->args=type;
+  current->args+=qcs;
+  current->lang=  SrcLangExt_VHDL ;
+ 
+  // adding dummy name for constraints like VOLTAGE=5,TEMPERATURE=20 C 
+  if(n.isEmpty())
+  {
+	  n="dummy";
+	  n+=VhdlDocGen::getRecordNumber();
+  }
+
+  current->name= n+"_";
+	current->name.append(VhdlDocGen::getRecordNumber().data());
+	
+   if(!brief.isEmpty())
+   {
+   current->brief=brief;
+   current->briefLine=line;
+   current->briefFile=fileName;
+   brief.resize(0);
+   }
+
+  root->addSubEntry(current);
+}
+
+
+void VhdlDocGen::writeUCFLink(const MemberDef* mdef,OutputList &ol)
+{
+	
+  QCString largs(mdef->argsString());
+  QCString n= VhdlDocGen::splitString(largs, '#');
+ // VhdlDocGen::adjustRecordMember(mdef);
+  bool equ=(n.length()==largs.length());
+
+  if(!equ)
+  {
+         ol.writeString(n.data());
+	     ol.docify(" ");
+         ol.insertMemberAlign();
+  }
+		
+         if(mdef->name().contains("dummy")==0)
+           VhdlDocGen::writeLink(mdef,ol);
+           if(equ)
+              ol.insertMemberAlign();
+		   ol.docify(" ");
+           VhdlDocGen::formatString(largs,ol,mdef);
+}
+ 
+QCString VhdlDocGen::splitString(QCString& str,  char c)
+{
+	QCString n=str;
+      int i=str.find(c);
+	  if(i>0) 
+	  {
+		   n=str.left(i);
+		   str=str.remove(0,i+1);
+	  }
+return n;
+}
+
+bool VhdlDocGen::findConstraintFile(LayoutNavEntry *lne)
+{
+  
+	static  bool findConst=false;
+
+   if(findConst) return false;
+	FileName *fn=Doxygen::inputNameList->first();
+   //LayoutNavEntry *cc = LayoutDocManager::instance().rootNavEntry()->find(LayoutNavEntry::Files);
+  
+  LayoutNavEntry *kk = lne->parent();//   find(LayoutNavEntry::Files);
+ // LayoutNavEntry *kks = kk->parent();//   find(LayoutNavEntry::Files);
+   QCString file;
+  QCString co("Constraints");
+  while (fn)
+  {
+    FileDef *fd=fn->first();
+	if(fd->name().contains(".ucf") || fd->name().contains(".qsf"))
+	{
+	 file = convertNameToFile(fd->name().data(),false,false);
+	 LayoutNavEntry *ucf=new LayoutNavEntry(lne,LayoutNavEntry::MainPage,true,file,co,"");  
+     kk->addChild(ucf);
+	 findConst=true;
+     break;
+  }
+	fn=Doxygen::inputNameList->next();
+  }
+
+	return  false;
+}
+
+void VhdlDocGen::writeCodeFragment (OutputList& ol,int start, QCString & codeFragment,const MemberDef* mdef)
+{
+   QStringList qsl=QStringList::split("\n",codeFragment);
+ ol.startCodeFragment();
+ int len = qsl.count();	
+  QCString lineNumber;
+  int j;
+  for (j=0;j<len;j++)
+  {
+    lineNumber.sprintf("%05d",start++);
+    lineNumber+=" ";
+    ol.startBold();
+    ol.docify(lineNumber.data());
+    ol.endBold();
+    ol.insertMemberAlign();
+    QCString q=(QCString)qsl[j];
+    VhdlDocGen::writeFormatString(q,ol,mdef);
+	ol.docify("\n"); 
+  }
+  ol.endCodeFragment();
+}
\ No newline at end of file

C:\.Trash-1000>diff -u doxNew/src/vhdldocgen.h doxy175/src/vhdldocgen.h 
--- doxNew/src/vhdldocgen.h	2011-03-06 10:24:14.000000000 +0100
+++ doxy175/src/vhdldocgen.h	2011-11-13 11:41:54.000000000 +0100
@@ -27,6 +27,7 @@
 #include <qcstring.h>
 
 #include "memberlist.h"
+#include "layout.h"
 
 class QStringList;
 class Entry;
@@ -76,7 +77,8 @@
       SHAREDVARIABLE,
       CONFIG,
       ALIAS,
-      MISCELLANEOUS
+      MISCELLANEOUS,
+      UCF_CONST
     };
 
     VhdlDocGen();
@@ -138,6 +140,8 @@
                                      OutputList &ol);
 
     //static void writeVhdlComponentList(OutputList &ol,int type);
+       static bool isConstraint(const MemberDef *mdef) 
+    { return mdef->getMemberSpecifiers()==VhdlDocGen::UCF_CONST; }   
      static bool isMisc(const MemberDef *mdef) 
     { return mdef->getMemberSpecifiers()==VhdlDocGen::MISCELLANEOUS; }   
     static bool isConfig(const MemberDef *mdef) 
@@ -268,14 +272,22 @@
     static bool isNumber(const QCString& s);
     static QCString getProtectionName(int prot);
 	static void writeSource(MemberDef *mdef,OutputList& ol,QCString &);
-  private:
+	static QCString splitString(QCString & str,  char c);
+    static void parseUCF(const char*  input,Entry* entity,QCString f,bool vendor);
+	
+	
+    static bool findConstraintFile( LayoutNavEntry *lne);
+    static void writeUCFLink(const MemberDef* mdef,OutputList &ol);
+    static void writeCodeFragment(MemberDef *mdef,OutputList& ol);
+    static void writeCodeFragment(OutputList& ol,int actualStart, QCString & codeFragment,const MemberDef* mdef);
+  
+private:
     static void getFuncParams(QList<Argument>&, const char* str);
     static bool compareArgList(ArgumentList*,ArgumentList*);
     static void writeVhdlLink(const ClassDef* cdd ,OutputList& ol,QCString& type,QCString& name,QCString& beh);
     static void findAllArchitectures(QList<QCString>& ql,const ClassDef *cd);
     static void writeStringLink(const MemberDef *mdef,QCString mem,OutputList& ol);
-     static void writeCodeFragment(MemberDef *mdef,OutputList& ol);
-
+   
 };
 
 #endif

C:\.Trash-1000>diff -u doxNew/src/memberdef.cpp doxy175/src/memberdef.cpp 
--- doxNew/src/memberdef.cpp	2011-08-14 12:01:26.000000000 +0200
+++ doxy175/src/memberdef.cpp	2011-11-12 20:15:44.000000000 +0100
@@ -41,7 +41,7 @@
 #include "objcache.h"
 #include "vhdlscanner.h"
 #include "vhdldocgen.h"
-
+#include "verilogdocgen.h"
 #define START_MARKER 0x4D454D5B // MEM[
 #define END_MARKER   0x4D454D5D // MEM]
 
@@ -1768,7 +1768,9 @@
   bool hasParameterList = FALSE;
   bool inFile = container->definitionType()==Definition::TypeFile;
   bool hasDocs = isDetailedSectionVisible(inGroup,inFile);
-
+  //static bool optVhdl          = Config_getBool("OPTIMIZE_OUTPUT_VHDL");
+   static bool optVerilog       = Config_getBool("OPTIMIZE_OUTPUT_VERILOG");
+    
   //printf("MemberDef::writeDocumentation(): name=`%s' hasDocs=`%d' containerType=%d inGroup=%d\n",
   //    name().data(),hasDocs,container->definitionType(),inGroup);
 
@@ -1777,7 +1779,7 @@
 
   makeResident();
   SrcLangExt lang = getLanguage();
-  bool optVhdl = lang==SrcLangExt_VHDL;
+  bool optVhdl =( lang==SrcLangExt_VHDL || lang==SrcLangExt_VERILOG);
   LockingPtr<MemberDef> lock(this,this);
 
   QCString scopeName = scName;
@@ -2016,6 +2018,16 @@
     QStrList sl;
     if (optVhdl)
     {
+       if(optVerilog){
+       if(this->getMemberSpecifiers() != VerilogDocGen::SIGNAL)
+          sl.append(VhdlDocGen::trTypeString(getMemberSpecifiers()));
+	   else
+		   {
+		   QCString largs=this->argsString();
+		   sl.append(largs);
+		   }
+	   }
+       else  
       sl.append(VhdlDocGen::trTypeString(getMemberSpecifiers()));
     }
     else
@@ -2155,9 +2167,9 @@
       !inbodyDocumentation().isEmpty())
   { 
     // write vhdl inline code with or without option INLINE_SOURCE
-    if (optVhdl && VhdlDocGen::isMisc(this)) 
+    if (optVhdl && (VhdlDocGen::isMisc(this)   ) )
     {
-      VhdlDocGen::writeSource(this,ol,cname);
+    	    VhdlDocGen::writeSource(this,ol,cname);
       return;
     }
     else
@@ -3948,6 +3960,11 @@
   m_isLinkableCached = 0;
 }
 
+QCString MemberDef::getDefinition() const
+{ 
+ return m_impl->def; 
+}
+
 void MemberDef::setDefinition(const char *d)
 { 
   makeResident();

C:\.Trash-1000>diff -u doxNew/src/memberdef.h doxy175/src/memberdef.h 
--- doxNew/src/memberdef.h	2011-08-08 11:19:02.000000000 +0200
+++ doxy175/src/memberdef.h	2011-11-12 17:06:04.000000000 +0100
@@ -363,7 +363,7 @@
     void findSectionsInDocumentation();
     
     bool visited;
-   
+    QCString getDefinition() const;
   protected:
     void flushToDisk() const;
     void loadFromDisk() const;

C:\.Trash-1000>diff -u doxNew/src/definition.cpp doxy175/src/definition.cpp 
--- doxNew/src/definition.cpp	2011-08-03 13:26:56.000000000 +0200
+++ doxy175/src/definition.cpp	2011-11-13 12:40:24.000000000 +0100
@@ -37,7 +37,8 @@
 #include "parserintf.h"
 #include "marshal.h"
 #include "debug.h"
-
+#include "verilogdocgen.h"
+#include "vhdldocgen.h"
 #define START_MARKER 0x4445465B // DEF[
 #define END_MARKER   0x4445465D // DEF]
 
@@ -305,6 +306,15 @@
   }
 }
 
+
+void Definition::addListType(QCString q)
+	{
+      qsl.append(q);
+	}
+
+QStringList& Definition::getList() {return qsl;}
+   
+
 void Definition::setName(const char *name)
 {
   if (name==0) return;
@@ -544,6 +554,7 @@
                       int &startLine,int &endLine,QCString &result)
 {
   static bool filterSourceFiles = Config_getBool("FILTER_SOURCE_FILES");
+  static bool vhdlOpt           = Config_getBool("OPTIMIZE_OUTPUT_VHDL");
   //printf("readCodeFragment(%s,%d,%d)\n",fileName,startLine,endLine);
   if (fileName==0 || fileName[0]==0) return FALSE; // not a valid file name
   QCString filter = getFileFilter(fileName,TRUE);
@@ -560,7 +571,7 @@
     Debug::print(Debug::ExtCmd,0,"Executing popen(`%s`)\n",cmd.data());
     f = portable_popen(cmd,"r");
   }
-  bool found = lang==SrcLangExt_VHDL   || 
+  bool found = lang==SrcLangExt_VHDL   || SrcLangExt_VERILOG   || 
                lang==SrcLangExt_Tcl    || 
                lang==SrcLangExt_Python || 
                lang==SrcLangExt_Fortran;  
@@ -867,8 +878,17 @@
       //printf("Read:\n`%s'\n\n",codeFragment.data());
       MemberDef *thisMd = 0;
       if (definitionType()==TypeMember) thisMd = (MemberDef *)this;
-      ol.startCodeFragment();
-      pIntf->parseCode(ol,               // codeOutIntf
+      
+	  if(this->getLanguage()==SrcLangExt_VHDL || this->getLanguage()==SrcLangExt_VERILOG)
+	  {
+       if(thisMd)		 
+		  VhdlDocGen::writeCodeFragment(ol,actualStart,codeFragment,thisMd);
+		  return;
+	  }
+	  
+	  ol.startCodeFragment();
+     
+	  pIntf->parseCode(ol,               // codeOutIntf
                        scopeName,        // scope
                        codeFragment,     // input
                        FALSE,            // isExample

C:\.Trash-1000>diff -u doxNew/src/definition.h doxy175/src/definition.h 
--- doxNew/src/definition.h	2011-07-30 12:08:40.000000000 +0200
+++ doxy175/src/definition.h	2011-11-12 17:06:02.000000000 +0100
@@ -21,6 +21,7 @@
 #include "qtbc.h"
 #include <qlist.h>
 #include <qdict.h>
+#include "qstringlist.h"
 #include <sys/types.h>
 
 #include "lockingptr.h"
@@ -315,15 +316,18 @@
     virtual void writeQuickMemberLinks(OutputList &,MemberDef *) const {}
     virtual void writeSummaryLinks(OutputList &) {}
     QCString pathFragment() const;
+	void addListType(QCString q);
+    
 
+	QStringList& getList();
     /*! Writes the documentation anchors of the definition to 
      *  the Doxygen::tagFile stream.
      */
     void writeDocAnchorsToTagFile();
+  void setLocalName(const QCString name);
 
   protected:
-    void setLocalName(const QCString name);
-
+  
     virtual void flushToDisk() const;
     virtual void loadFromDisk() const;
     virtual void makeResident() const;
@@ -348,6 +352,7 @@
     QCString m_name;
     bool m_isSymbol;
     QCString m_symbolName;
+	QStringList qsl;
 
 };
 
C:\.Trash-1000>diff -u doxNew/src/classdef.h doxy175/src/classdef.h 

C:\.Trash-1000>diff -u doxNew/src/doxygen_css.h doxy175/src/doxygen_css.h 
--- doxNew/src/doxygen_css.h	2011-07-26 21:43:12.000000000 +0200
+++ doxy175/src/doxygen_css.h	2011-11-13 09:37:52.000000000 +0100
@@ -944,3 +944,12 @@
 "  }\n"
 "}\n"
 "\n"
+".pre {white-space: pre;}\n"
+".nowrap {white-space: nowrap;}\n"
+".pre-wrap {white-space: pre-wrap;}\n"
+".pre-line {white-space: pre-line;}\n"
+"\n"
+"span.undoc { \n"
+"	color: #a5a5a5 \n"
+"}\n"
+"\n"
\ No newline at end of file

C:\.Trash-1000>diff -u doxNew/src/doxygen.cpp doxy175/src/doxygen.cpp 
--- doxNew/src/doxygen.cpp	2011-08-11 12:21:54.000000000 +0200
+++ doxy175/src/doxygen.cpp	2011-11-12 17:06:02.000000000 +0100
@@ -80,8 +80,9 @@
 #include "vhdlscanner.h"
 #include "vhdldocgen.h"
 #include "eclipsehelp.h"
+#include "verilogscanner.h"
+#include "preVerilog.h"
 #include "cite.h"
-
 #include "layout.h"
 
 #define RECURSE_ENTRYTREE(func,var) \
@@ -1175,6 +1176,29 @@
         fullName.data(),root->section,root->tArgLists ? (int)root->tArgLists->count() : -1);
     cd->setDocumentation(root->doc,root->docFile,root->docLine); // copy docs to definition
     cd->setBriefDescription(root->brief,root->briefFile,root->briefLine);
+    cd->setLanguage(root->lang);    
+    cd->setHidden(root->hidden);        
+    cd->setArtificial(root->artificial);        
+    cd->setTypeConstraints(root->typeConstr);   
+    //printf("new ClassDef %s tempArgList=%p specScope=%s\n",fullName.data(),root->tArgList,root->scopeSpec.data());    
+
+    ArgumentList *tArgList =    
+      getTemplateArgumentsFromName(fullName,root->tArgLists);   
+    //printf("class %s template args=%s\n",fullName.data(),     
+    //    tArgList ? tempArgListToString(tArgList).data() : "<none>");          
+    cd->setTemplateArguments(tArgList);         
+    cd->setProtection(root->protection);        
+    cd->setIsStatic(root->stat);        
+
+    // file definition containing the class cd          
+    cd->setBodySegment(root->bodyLine,root->endBodyLine);       
+    cd->setBodyDef(fd);         
+
+    // see if the class is found inside a namespace     
+    //bool found=addNamespace(root,cd);         
+
+    // the empty string test is needed for extract all case     
+    cd->setBriefDescription(root->brief,root->briefFile,root->briefLine);    
     cd->insertUsedFile(root->fileName);
 
     // add class to the list
@@ -8876,8 +8900,16 @@
     {
       BufStr inBuf(fi.size()+4096);
       msg("Preprocessing %s...\n",s->data());
+     if(Config_getBool("OPTIMIZE_OUTPUT_VERILOG")) 
+	 {
+	//   readInputFile(fileName,preBuf);
+	   preprocessVerilogFile(fileName,preBuf,0,-1);
+	 }
+	 else 
+	 {
       readInputFile(fileName,inBuf);
       preprocessFile(fileName,inBuf,preBuf);
+      }
     }
     else // no preprocessing
     {
@@ -9410,6 +9442,7 @@
   //Doxygen::symbolMap->setAutoDelete(TRUE);
 
   Doxygen::runningTime.start();
+  initVerilogPreprocessor();
   initPreprocessor();
 
   Doxygen::parserManager = new ParserManager;
@@ -9418,8 +9451,7 @@
   Doxygen::parserManager->registerParser("fortran", new FortranLanguageScanner);
   Doxygen::parserManager->registerParser("vhdl",    new VHDLLanguageScanner);
   Doxygen::parserManager->registerParser("dbusxml", new DBusXMLScanner);
-  Doxygen::parserManager->registerParser("tcl",     new TclLanguageScanner);
-
+   Doxygen::parserManager->registerParser("v", new VerilogScanner);
   // register any additional parsers here...
 
   initDefaultExtensionMapping();
@@ -9479,6 +9511,7 @@
   delete Doxygen::xrefLists;
   delete Doxygen::parserManager;
   cleanUpPreprocessor();
+  cleanUpVerilogPreprocessor();
   delete theTranslator;
   delete g_outputList;
   Mappers::freeMappers();
@@ -10354,7 +10387,7 @@
 
   /**************************************************************************
    *             Gather information                                         * 
-   **************************************************************************/
+   ***************************+#include "qstringlist.h"***********************************************/
   
   msg("Building group list...\n");
   buildGroupList(rootNav);

C:\.Trash-1000>diff -u doxNew/src/filedef.cpp doxy175/src/filedef.cpp 
--- doxNew/src/filedef.cpp	2011-08-08 19:44:00.000000000 +0200
+++ doxy175/src/filedef.cpp	2011-11-12 17:06:04.000000000 +0100
@@ -36,6 +36,7 @@
 #include "vhdldocgen.h"
 #include "debug.h"
 #include "layout.h"
+#include "verilogdocgen.h"
 
 //---------------------------------------------------------------------------
 
@@ -1619,11 +1620,16 @@
 void FileDef::writeMemberDeclarations(OutputList &ol,MemberList::ListType lt,const QCString &title)
 {
   static bool optVhdl = Config_getBool("OPTIMIZE_OUTPUT_VHDL");
+    static bool optVerilog = Config_getBool("OPTIMIZE_OUTPUT_VERILOG");
+
   MemberList * ml = getMemberList(lt);
   if (ml) 
   {
     if (optVhdl) // use specific declarations function
     {
+        if(optVerilog)
+       VerilogDocGen::writeVerilogDeclarations(ml,ol,0,0,this);
+        else 
       VhdlDocGen::writeVhdlDeclarations(ml,ol,0,0,this);
     }
     else

C:\.Trash-1000>diff -u doxNew/src/layout.cpp doxy175/src/layout.cpp 

C:\.Trash-1000>diff -u doxNew/src/groupdef.cpp doxy175/src/groupdef.cpp 

C:\.Trash-1000>diff -u doxNew/src/config.l doxy175/src/config.l 
--- doxNew/src/config.l	2011-08-03 12:37:54.000000000 +0200
+++ doxy175/src/config.l	2011-11-12 17:06:02.000000000 +0100
@@ -1325,7 +1325,8 @@
     filePatternList.append("*.for");
     filePatternList.append("*.vhd");
     filePatternList.append("*.vhdl");
-    filePatternList.append("*.tcl");
+    filePatternList.append("*.v");
+    
     if (portable_fileSystemIsCaseSensitive())
     {
       // unix => case sensitive match => also include useful uppercase versions
@@ -1347,7 +1348,7 @@
       filePatternList.append("*.F");
       filePatternList.append("*.VHD");
       filePatternList.append("*.VHDL");
-      filePatternList.append("*.TCL");
+      filePatternList.append("*.v"); 
     }
   }
 

C:\.Trash-1000>diff -u doxNew/src/configoptions.cpp doxy175/src/configoptions.cpp 
--- doxNew/src/configoptions.cpp	2011-08-03 15:54:50.000000000 +0200
+++ doxy175/src/configoptions.cpp	2011-11-12 17:06:04.000000000 +0100
@@ -327,6 +327,14 @@
                  FALSE
                 );
   //----
+    cb = cfg->addBool(
+                  "OPTIMIZE_OUTPUT_VERILOG",
+                    "Set the OPTIMIZE_OUTPUT_VERILOG tag to YES if your project consists of Verilog \n"
+                    "sources. Doxygen will then generate output that is tailored for \n"
+					"Verilog. \n",
+                    FALSE
+                 );  
+  //----
   cl = cfg->addList(
                  "EXTENSION_MAPPING",
                  "Doxygen selects the parser to use depending on the extension of the files it\n"

C:\.Trash-1000>diff -u doxNew/src/libdoxygen.pro.in doxy175/src/libdoxygen.pro.in 
--- doxNew/src/libdoxygen.pro.in	2011-08-03 12:28:25.000000000 +0100
+++ doxy175/src/libdoxygen.pro.in	2011-11-12 17:06:04.000000000 +0000
@@ -101,6 +101,7 @@
                 fortrancode.h \
                 fortranscanner.h \
                 dbusxmlscanner.h \
+                preVerilog.h \
 		qhp.h \
 		qhpxmlwriter.h \
 		qtbc.h \
@@ -161,6 +162,9 @@
 		unistd.h \
 		util.h \
 		version.h \
+		verilogscanner.h \
+		verilogdocgen.h \
+		verilogparser.hpp \
 		vhdlcode.h \
 		vhdldocgen.h \
 		vhdlscanner.h \
@@ -231,6 +235,7 @@
 		pagedef.cpp \
 		perlmodgen.cpp \
 		pre.cpp \
+		preVerilog.cpp \
 		pycode.cpp \
 		pyscanner.cpp \    
 		qhp.cpp \
@@ -248,6 +253,9 @@
 		translator.cpp \
 		util.cpp \
 		version.cpp \
+		verilogscanner.cpp \
+		verilogparser.cpp \
+		verilogdocgen.cpp \
 		vhdlcode.cpp \
 		vhdldocgen.cpp \
 		vhdlscanner.cpp \
C:\.Trash-1000>diff -u doxNew/src/libdoxygen.t doxy175/src/libdoxygen.t 
--- doxNew/src/libdoxygen.t	2011-08-03 12:37:56.000000000 +0200
+++ doxy175/src/libdoxygen.t	2011-11-12 17:06:04.000000000 +0100
@@ -100,7 +100,15 @@
 	$(YACC) -l -d -p cppExpYY constexp.y -o ce_parse.c 
 	-rm ce_parse.c	
 
-#$ GenerateDep("layout.cpp","layout_default.h");
+
+#$ GenerateDep("verilogscanner.cpp","verilogscanner.l");
+	$(LEX) -d -8  -PverilogScanYY -t verilogscanner.l | $(INCBUFSIZE) >verilogscanner.cpp
+
+#$ GenerateDep("verilogparser.cpp","verilogparser.y");
+	$(YACC)  -v -d verilogparser.y -o verilogparser.cpp 
+
+#$ GenerateDep("preVerilog.cpp","preVerilog.l");
+	$(LEX) -PpreYYVerilog -t preVerilog.l | $(INCBUFSIZE) >preVerilog.cpp 
 
 TO_C_CMD=sed -e "s/\\\\/\\\\\\\\/g" -e "s/\"/\\\\\"/g" -e "s/^/\"/g" -e "s/$$/\\\\n\"/g"
 

C:\.Trash-1000>diff -u doxNew/winbuild/Doxygen.vcproj doxy175/winbuild/Doxygen.vcproj 
--- doxNew/winbuild/Doxygen.vcproj	2011-08-04 19:42:24.000000000 +0200
+++ doxy175/winbuild/Doxygen.vcproj	2011-11-13 11:12:52.000000000 +0100
@@ -1584,6 +1584,30 @@
 				</FileConfiguration>
 			</File>
 			<File
+				RelativePath="..\src\preVerilog.cpp"
+				>
+			</File>
+			<File
+				RelativePath="..\src\preVerilog.l"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="Lex"
+						CommandLine="flex -PpreYYVerilog [AllOptions] [AdditionalOptions] [inputs]"
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="Lex"
+						CommandLine="flex  -PpreYYVerilog [AllOptions] [AdditionalOptions] [inputs]"
+					/>
+				</FileConfiguration>
+			</File>
+			<File
 				RelativePath="..\src\pycode.cpp"
 				>
 			</File>
@@ -1900,6 +1924,48 @@
 				</FileConfiguration>
 			</File>
 			<File
+				RelativePath="..\src\verilogdocgen.cpp"
+				>
+			</File>
+			<File
+				RelativePath="..\src\verilogparser.cpp"
+				>
+			</File>
+			<File
+				RelativePath="..\src\verilogparser.hpp"
+				>
+			</File>
+			<File
+				RelativePath="..\src\verilogparser.y"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCustomBuildTool"
+						Description="Running bison on verilogparser.y"
+						CommandLine="runbison.bat $(InputDir)&#x0D;&#x0A;"
+						Outputs="$(InputDir)\..\src\verilogparser.cpp"
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\src\verilogscanner.cpp"
+				>
+			</File>
+			<File
+				RelativePath="..\src\verilogscanner.l"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="Lex"
+						CommandLine="flex -8  -PverilogScanYY [AllOptions] [AdditionalOptions] [inputs]"
+					/>
+				</FileConfiguration>
+			</File>
+			<File
 				RelativePath="..\src\version.cpp"
 				>
 				<FileConfiguration
@@ -2343,6 +2409,10 @@
 				>
 			</File>
 			<File
+				RelativePath="..\src\preVerilog.h"
+				>
+			</File>
+			<File
 				RelativePath="..\src\printdocvisitor.h"
 				>
 			</File>
@@ -2623,6 +2693,14 @@
 				>
 			</File>
 			<File
+				RelativePath="..\src\verilogdocgen.h"
+				>
+			</File>
+			<File
+				RelativePath="..\src\verilogscanner.h"
+				>
+			</File>
+			<File
 				RelativePath="..\src\version.h"
 				>
 			</File>

C:\.Trash-1000>diff -u doxNew/winbuild/runbison.bat doxy175/winbuild/runbison.bat 
--- doxNew/winbuild/runbison.bat	2007-01-21 18:29:44.000000000 +0100
+++ doxy175/winbuild/runbison.bat	2011-11-12 17:37:08.000000000 +0100
@@ -1,3 +1,4 @@
 bison -l -d -p cppExpYY %1\..\src\constexp.y -o %1\..\src\ce_parse.c
 del %1\..\src\ce_parse.c
 bison -l -p cppExpYY %1\..\src\constexp.y -o %1\..\src\ce_parse.cpp
+bison -d -t -v %1\..\src\verilogparser.y -o %1\..\src\verilogparser.cpp
\ No newline at end of file
