
G:\dox17>diff -i -u -b -B  oldsrc170/src/doxygen_css.h doxygen-1.7.0/src/doxygen_css.h 
--- oldsrc170/src/doxygen_css.h	2010-05-23 11:08:58.000000000 -0700
+++ doxygen-1.7.0/src/doxygen_css.h	2010-06-18 12:56:30.000000000 -0700
@@ -242,6 +242,10 @@
 "\n"
 "/* @group Code Colorization */\n"
 "\n"
+"span.undoc { \n"
+"	color: #a5a5a5 \n"
+"}\n"
+"\n"
 "span.keyword {\n"
 "	color: #008000\n"
 "}\n"
@@ -654,3 +658,8 @@
 "	padding: 5px 5px 5px 10px;\n"
 "}\n"
 "\n"
+".pre {white-space: pre;}\n"
+".nowrap {white-space: nowrap;}\n"
+".pre-wrap {white-space: pre-wrap;}\n"
+".pre-line {white-space: pre-line;}\n"
+"\n"

G:\dox17>diff -i -u -b -B  oldsrc170/src/definition.cpp doxygen-1.7.0/src/definition.cpp 
--- oldsrc170/src/definition.cpp	2010-06-10 04:50:16.000000000 -0700
+++ doxygen-1.7.0/src/definition.cpp	2010-06-18 12:56:30.000000000 -0700
@@ -1,6 +1,6 @@
 /******************************************************************************
  *
- * $Id: index.cpp,v 1.30 1999/03/06 22:15:39 root Exp $
+ * 
  *
  * Copyright (C) 1997-2010 by Dimitri van Heesch.
  *
@@ -37,6 +37,7 @@
 #include "parserintf.h"
 #include "marshal.h"
 #include "debug.h"
+#include "verilogdocgen.h"
 
 #define START_MARKER 0x4445465B // DEF[
 #define END_MARKER   0x4445465D // DEF]
@@ -115,6 +116,8 @@
   if (name!="<globalScope>") 
   {
     //extractNamespaceName(m_name,m_localName,ns);
+  QCString z(stripScope(n));
+  VerilogDocGen::adjustMemberName(z);
     localName=stripScope(n);
   }
   else
@@ -303,6 +306,15 @@
   }
 }
 
+
+void Definition::addListType(QCString q)
+	{
+      qsl.append(q);
+	}
+
+QStringList& Definition::getList() {return qsl;}
+   
+
 void Definition::setName(const char *name)
 {
   if (name==0) return;
@@ -532,7 +544,7 @@
   bool usePipe = !filter.isEmpty() && filterSourceFiles;
   if (!usePipe) // no filter given or wanted
   {
-    f = portable_fopen(fileName,"r");
+    f = fopen(fileName,"r");
   }
   else // use filter
   {

G:\dox17>diff -i -u -b -B  oldsrc170/src/definition.h doxygen-1.7.0/src/definition.h 
--- oldsrc170/src/definition.h	2010-03-27 12:09:30.000000000 -0700
+++ doxygen-1.7.0/src/definition.h	2010-06-18 14:44:46.000000000 -0700
@@ -1,6 +1,6 @@
 /******************************************************************************
  *
- * $Id: definition.h,v 1.21 2001/03/19 19:27:40 root Exp $
+ * 
  *
  * Copyright (C) 1997-2010 by Dimitri van Heesch.
  *
@@ -21,6 +21,7 @@
 #include "qtbc.h"
 #include <qlist.h>
 #include <qdict.h>
+#include "qstringlist.h"
 #include <sys/types.h>
 
 #include "lockingptr.h"
@@ -309,14 +310,17 @@
     virtual void writeQuickMemberLinks(OutputList &,MemberDef *) const {}
     virtual void writeSummaryLinks(OutputList &) {}
     QCString pathFragment() const;
+	void addListType(QCString q);
+    
 
+	QStringList& getList();
     /*! Writes the documentation anchors of the definition to 
      *  the Doxygen::tagFile stream.
      */
     void writeDocAnchorsToTagFile();
+    void setLocalName(const QCString name);
 
   protected:
-    void setLocalName(const QCString name);
 
     virtual void flushToDisk() const;
     virtual void loadFromDisk() const;
@@ -342,6 +346,7 @@
     QCString m_name;
     bool m_isSymbol;
     QCString m_symbolName;
+	QStringList qsl;
 
 };
 

G:\dox17>diff -i -u -b -B  oldsrc170/src/index.cpp doxygen-1.7.0/src/index.cpp 
--- oldsrc170/src/index.cpp	2010-06-10 14:29:52.000000000 -0700
+++ doxygen-1.7.0/src/index.cpp	2010-06-18 14:48:02.000000000 -0700
@@ -1,6 +1,6 @@
 /******************************************************************************
  *
- * $Id: index.cpp,v 1.63 2001/03/19 19:27:40 root Exp $
+ * 
  *
  * Copyright (C) 1997-2010 by Dimitri van Heesch.
  *
@@ -42,6 +42,7 @@
 #include "pagedef.h"
 #include "dirdef.h"
 #include "vhdldocgen.h"
+#include "verilogdocgen.h"
 
 #define MAX_ITEMS_BEFORE_MULTIPAGE_INDEX 200
 #define MAX_ITEMS_BEFORE_QUICK_INDEX 30
@@ -1646,9 +1647,11 @@
 {
   static bool hideFriendCompounds = Config_getBool("HIDE_FRIEND_COMPOUNDS");
   static bool vhdlOpt = Config_getBool("OPTIMIZE_OUTPUT_VHDL");
+ static bool verilogOpt = Config_getBool("OPTIMIZE_OUTPUT_VERILOG");
+ 
   ClassDef *cd=0;
 
-  if (vhdlOpt && (VhdlDocGen::isRecord(md) || VhdlDocGen::isUnit(md)))
+  if (vhdlOpt && (VhdlDocGen::isRecord(md) || VhdlDocGen::isUnit(md) || verilogOpt))
   {
     VhdlDocGen::adjustRecordMember(md);
   }
@@ -2320,6 +2323,8 @@
          MemberDef *md)
 {
   static bool hideFriendCompounds = Config_getBool("HIDE_FRIEND_COMPOUNDS");
+  static bool optVerilog    = Config_getBool("OPTIMIZE_OUTPUT_VERILOG");
+  
   bool isLinkable = md->isLinkable();
   ClassDef *cd=0;
   NamespaceDef *nd=0;
@@ -2329,7 +2334,17 @@
       cd->isLinkable()       &&
       cd->templateMaster()==0)
   {
+ if(optVerilog) 
+  VhdlDocGen::adjustRecordMember(md); 
     QCString n = md->name();
+  /*
+  if(optVerilog)
+	  {
+       QRegExp ep("[a-zA-Z_]");
+	   int k=n.find(ep);
+	   if(
+	  }
+*/	
     uchar charCode = (uchar)n.at(0);
     uint letter = charCode<128 ? tolower(charCode) : charCode;
     if (!n.isEmpty()) 
@@ -2434,11 +2449,18 @@
   }
 }
 
-static QCString searchId(const QCString &s)
+static QCString searchId(const QCString &str)
 {
-  int c;
+  
+ static bool optVerilog    = Config_getBool("OPTIMIZE_OUTPUT_VERILOG");
+ 
+int c;
   uint i;
   QCString result;
+  QCString s=str;
+  if(optVerilog) 
+	  VerilogDocGen::adjustMemberName(s); 
+
   for (i=0;i<s.length();i++)
   {
     c=s.at(i);
@@ -2626,7 +2648,6 @@
           for (li.toFirst();(dl=li.current());++li)
           {
             Definition *d = dl->first();
-            QCString id = d->localName();
             t << "<div class=\"SRResult\" id=\"SR_"
               << searchId(d->localName()) << "\">" << endl;
             t << " <div class=\"SREntry\">\n";

G:\dox17>diff -i -u -b -B  oldsrc170/src/util.cpp doxygen-1.7.0/src/util.cpp 
--- oldsrc170/src/util.cpp	2010-06-14 02:15:32.000000000 -0700
+++ doxygen-1.7.0/src/util.cpp	2010-06-18 12:56:32.000000000 -0700
@@ -50,6 +50,8 @@
 #include "portable.h"
 #include "parserintf.h"
 #include "bufstr.h"
+#include <qstringlist.h>
+#include "verilogdocgen.h"
 
 #define ENABLE_TRACINGSUPPORT 0
 
@@ -4131,7 +4133,34 @@
     )
 {
   QCString tsName = name;
+
+    static bool verilogOpt = Config_getBool("OPTIMIZE_OUTPUT_VERILOG");
+
+   // finds links in verilog for desigunit::member
+if(verilogOpt)
+  {
+  // QCString temp=name;
+   if(tsName.contains("::"))
+   {
+	   QStringList ql=QStringList::split(QCString("::",2),tsName,false);
+	   ClassDef *cd=getClass(ql[0].data());
+
+	   if(cd){
+		   QCString memName=(QCString)ql[1];
+		   QCString className=(QCString)ql[0];
+		   MemberDef* mdd=VerilogDocGen::findMember(className,memName,-1);
+		   if(mdd){
+            *resMember=mdd;
+           return true;		  
+		   }
+     }
+   }
+  }
+
+  bool memberScopeFirst = tsName.find('#')!=-1;
+
   //bool memberScopeFirst = tsName.find('#')!=-1;
+
   QCString fullName = substitute(tsName,"#","::");
   fullName = removeRedundantWhiteSpace(substitute(fullName,".","::"));
 
@@ -4448,8 +4477,15 @@
   else // probably a member reference
   {
     MemberDef *md;
+	   static bool verilogOpt = Config_getBool("OPTIMIZE_OUTPUT_VERILOG");
+
     bool res = resolveRef(scName,lr,inSeeBlock,resContext,&md);
-    if (md) resAnchor=md->anchor();
+     if (md)  {
+ 	 resAnchor=md->anchor();
+   if(verilogOpt)
+      *resContext=md;
+	}
+
     return res;
   }
 }
@@ -6392,6 +6428,7 @@
   { "fortran",     "fortran", SrcLangExt_F90    },
   { "vhdl",        "vhdl",    SrcLangExt_VHDL   },
   { "dbusxml",     "dbusxml", SrcLangExt_XML    },
+   { "verilog",        "v",    SrcLangExt_VERILOG   },
   { 0,             0,        (SrcLangExt)0      }
 };
 
@@ -6452,6 +6489,7 @@
   updateLanguageMapping(".py",    "python");
   updateLanguageMapping(".f",     "fortran");
   updateLanguageMapping(".f90",   "fortran");
+  updateLanguageMapping(".v",  "verilog");
   updateLanguageMapping(".vhd",   "vhdl");
   updateLanguageMapping(".vhdl",  "vhdl");
   //updateLanguageMapping(".xml",   "dbusxml");
@@ -6560,15 +6598,19 @@
   delete visitor;
   delete root;
   QCString result = s.data();
+  //fprintf(stderr,"%s : %d",result.data(),result.length());
   int i=0;
   if (result.length()>80)
   {
+     result.append(" ");
     for (i=80;i<100;i++) // search for nice truncation point
     {
-      if (isspace(result.at(i)) || 
-          result.at(i)==',' || 
-          result.at(i)=='.' || 
-          result.at(i)=='?')
+	//fprintf(stderr,"\n %d %d %c ",result.at(i),i,result.at(i));
+	char cc=result.at(i);
+	 if (isspace(cc) || 
+          cc==',' || 
+          cc=='.' || 
+          cc=='?')
       {
         break;
       }

G:\dox17>diff -i -u -b -B  oldsrc170/src/util.h doxygen-1.7.0/src/util.h 
--- oldsrc170/src/util.h	2010-06-01 12:37:46.000000000 -0700
+++ doxygen-1.7.0/src/util.h	2010-06-18 12:56:32.000000000 -0700
@@ -1,6 +1,6 @@
 /******************************************************************************
  *
- * $Id: util.h,v 1.49 2001/03/19 19:27:42 root Exp $
+ * 
  *
  * Copyright (C) 1997-2010 by Dimitri van Heesch.
  *
@@ -100,6 +100,7 @@
   SrcLangExt_Python = 0x0800,
   SrcLangExt_F90    = 0x1000,
   SrcLangExt_VHDL   = 0x2000,
+  SrcLangExt_VERILOG   = 0x3000,
   SrcLangExt_XML    = 0x4000
 };
 

G:\dox17>diff -i -u -b -B  oldsrc170/src/doxygen.cpp doxygen-1.7.0/src/doxygen.cpp 
--- oldsrc170/src/doxygen.cpp	2010-06-11 05:04:28.000000000 -0700
+++ doxygen-1.7.0/src/doxygen.cpp	2010-06-18 12:56:32.000000000 -0700
@@ -77,6 +77,8 @@
 #include "vhdlscanner.h"
 #include "vhdldocgen.h"
 #include "eclipsehelp.h"
+#include "verilogscanner.h"
+#include "preVerilog.h"
 
 #include "layout.h"
 
@@ -6964,6 +6966,8 @@
 static void computeMemberRelations()
 {
   MemberNameSDict::Iterator mnli(*Doxygen::memberNameSDict);
+ // fprintf(stderr," [\n  members %d ]\n",Doxygen::memberNameSDict->count());
+  int ii=Doxygen::memberNameSDict->count();
   MemberName *mn;
   for ( ; (mn=mnli.current()) ; ++mnli ) // for each member name
   {
@@ -8566,16 +8570,24 @@
     ParserInterface *parser = Doxygen::parserManager->getParser(extension);
 
     QFileInfo fi(fileName);
-    BufStr preBuf(fi.size()+4096);
+    BufStr preBuf(fi.size()+1024);
 
     if (Config_getBool("ENABLE_PREPROCESSING") && 
         parser->needsPreprocessing(extension))
     {
       BufStr inBuf(fi.size()+4096);
       msg("Preprocessing %s...\n",s->data());
+     if(Config_getBool("OPTIMIZE_OUTPUT_VERILOG")) 
+	 {
+	//   readInputFile(fileName,preBuf);
+	   preprocessVerilogFile(fileName,preBuf,0,-1);
+	 }
+	 else 
+	 {
       readInputFile(fileName,inBuf);
       preprocessFile(fileName,inBuf,preBuf);
     }
+	}
     else // no preprocessing
     {
       msg("Reading %s...\n",s->data());
@@ -8590,7 +8602,7 @@
     convBuf.addChar('\0');
 
     // use language parse to parse the file
-    parser->parseInput(fileName,convBuf.data(),root);
+    parser->parseInput(fileName,preBuf.data(),root);
 
     // store the Entry tree in a file and create an index to
     // navigate/load entries
@@ -9093,6 +9105,7 @@
   //Doxygen::symbolMap->setAutoDelete(TRUE);
 
   Doxygen::runningTime.start();
+  initVerilogPreprocessor();
   initPreprocessor();
 
   Doxygen::parserManager = new ParserManager;
@@ -9101,7 +9114,7 @@
   Doxygen::parserManager->registerParser("fortran", new FortranLanguageScanner);
   Doxygen::parserManager->registerParser("vhdl",    new VHDLLanguageScanner);
   Doxygen::parserManager->registerParser("dbusxml", new DBusXMLScanner);
-
+   Doxygen::parserManager->registerParser("v", new VerilogScanner);
   // register any additional parsers here...
 
   initDefaultExtensionMapping();
@@ -9158,6 +9171,7 @@
   delete Doxygen::xrefLists;
   delete Doxygen::parserManager;
   cleanUpPreprocessor();
+  cleanUpVerilogPreprocessor();
   delete theTranslator;
   delete g_outputList;
   Mappers::freeMappers();

G:\dox17>diff -i -u -b -B  oldsrc170/src/vhdldocgen.cpp doxygen-1.7.0/src/vhdldocgen.cpp 
--- oldsrc170/src/vhdldocgen.cpp	2010-03-20 15:57:12.000000000 -0700
+++ doxygen-1.7.0/src/vhdldocgen.cpp	2010-06-18 14:27:26.000000000 -0700
@@ -42,11 +42,13 @@
 #include "definition.h"
 #include "searchindex.h"
 #include "outputlist.h"
+ #include "verilogdocgen.h"
 
 /* --------------------------------------------------------------- */
 
 //#define theTranslator_vhdlType theTranslator->trVhdlType
 #define theTranslator_vhdlType VhdlDocGen::trVhdlType
+#define COL_SIZE 100 
 
 static QDict<QCString> g_vhdlKeyDict0(17,FALSE); 
 static QDict<QCString> g_vhdlKeyDict1(17,FALSE); 
@@ -55,7 +57,8 @@
 static  QCString g_vhdlkeyword("vhdlkeyword");
 static  QCString g_vhdltype("comment");
 static  QCString g_vhdllogic("vhdllogic");
-
+static bool checkString(QCString & qcs,OutputList& ol);
+static QCString* getColorOfWord(int col);
 // keywords
 static const char* g_vhdlKeyWordMap0[] = 
 { 
@@ -75,7 +78,7 @@
   "range", "record", "register", "reject", "report", "return","select", 
   "severity", "shared", "signal", "subtype", "then", "to", "transport", 
   "type","unaffected", "units", "until", "use","variable", "wait", "when", 
-  "while", "with","true","false","protected",0
+  "while", "with","true","false","protected","context","force","release",0
 };
 
 // type
@@ -83,7 +86,7 @@
 { 
   "natural","unsigned","signed","string","boolean", "bit","character",
   "std_ulogic","std_ulogic_vector","sTd_logic","std_logic_vector","integer",
-  "real","zzz",0
+  "real","sfixed","ufixed"," UNRESOLVED_ufixed"," UNRESOLVED_sfixed",0
 };
 
 // logic
@@ -155,10 +158,32 @@
   return 0;
 }
 
-/*!
- * returns the parsed entry at line xxx
- */
 
+ bool checkString(QCString &name,OutputList& ol)
+{
+  if (name.isEmpty()) return FALSE;
+  name=name.simplifyWhiteSpace();
+  if (name.isEmpty()) return FALSE;
+  
+  int len=name.length();
+  if (name.at(0)=='"' && name.at(len-1)=='"' && len > 2)
+  {
+      VhdlDocGen::startFonts(name,"keyword",ol);     
+      return true;
+  }
+    return false;
+  }
+
+
+QCString* getColorOfWord(int col)
+{
+  switch(col)
+  {
+   case 1: return &g_vhdlkeyword;
+   case 2: return &g_vhdllogic;
+   default:return 0;
+  }
+}
 
 void VhdlDocGen::debugClassName(ClassSDict* mDict)
 {
@@ -635,6 +660,13 @@
 
 QCString VhdlDocGen::getClassTitle(const ClassDef *cd)
 {
+ 
+   static bool optVerilog = Config_getBool("OPTIMIZE_OUTPUT_VERILOG");
+  if(optVerilog)
+   return VerilogDocGen::getClassTitle(cd);
+
+
+
   QCString pageTitle;
   if (cd==0) return "";
   pageTitle+=cd->displayName();
@@ -841,13 +873,38 @@
   QCString qmem;
   QCString temp(str);
   QCString st(str);
-
-  //QRegExp semi(",");
-  //QRegExp r(":");
+  QRegExp re("[\\s:(]");
+  QStringList strList;
 
   // colon position
   j = temp.find(':');
-  if (j < 0) return FALSE; // no input definition
+      VhdlDocGen::deleteAllChars(st,';');
+      strList=QStringList::split(re,st);
+	  assert(strList.count()>1);
+      QCString key=(QCString)strList[0];	 
+	  QCString* ss=VhdlDocGen::findKeyWord(key);
+      if(ss)
+		  {
+           QCString typeName=(QCString)strList[1];
+		   QStringList q1=QStringList::split(',',typeName);
+		    for(uint ii=0;ii<q1.count();ii++)
+		    ql.insert(0,new QCString((QCString)q1[ii]));          
+		
+		    ql.insert(0,new QCString(key));
+		     if(strList.count()>2)
+			   {
+			   int i=st.find(typeName.data())+typeName.length();
+			   st.remove(0,i);
+			   buffer+=st;
+			   }
+			 return true;
+		  }
+  
+  
+  if (j < 0)
+	  {
+		  return FALSE;
+	  }// no input definition
   st=st.left(j); // name only
   index=st.find(signal,0,FALSE);
   if (index > -1) // found "signal "
@@ -967,10 +1024,16 @@
 void VhdlDocGen::prepareComment(QCString& qcs)
 {
   QCString temp;
+     static bool optVerilog       = Config_getBool("OPTIMIZE_OUTPUT_VERILOG");
+
   const char* s="--!";
   //const char *start="--!{";
   //const char *end="--!}";
   int index=0; 
+  if(optVerilog)
+     s=vlogComment;
+     else
+    s="--!";
 
 #if 0
   index=qcs.find(start,0,TRUE);
@@ -1168,6 +1231,13 @@
 
 QCString VhdlDocGen::getProtectionName(int prot)
 {
+ static bool optVerilog    = Config_getBool("OPTIMIZE_OUTPUT_VERILOG");
+ if(optVerilog)
+	 {
+       if(prot==Public) return "Module";
+		   return "Primitive";
+	 }
+
   if (prot==VhdlDocGen::ENTITYCLASS)
     return "entity";
   else if (prot==VhdlDocGen::ARCHITECTURECLASS)
@@ -1182,6 +1252,13 @@
 
 QCString VhdlDocGen::trTypeString(int type)
 {
+  
+      static bool optVerilog       = Config_getBool("OPTIMIZE_OUTPUT_VERILOG");
+
+    if(optVerilog)
+    return VerilogDocGen::convertTypeToString(type);
+ 
+  
   switch(type)
   {
     case VhdlDocGen::LIBRARY:        return "Library"; 
@@ -1211,6 +1288,8 @@
     case VhdlDocGen::COMPONENT_INST: return "Component Instantiation"; 
     case VhdlDocGen::ALIAS:          return "Alias";
     case VhdlDocGen::CONFIG:         return "Configuration";                                     
+    case VhdlDocGen::CONTEXT:        return "Context Declaration"; 
+	case VhdlDocGen::PROTECT:        return "Protect Declaration"; 
     default:                         return "";
   }
 } // convertType
@@ -1221,7 +1300,8 @@
 
 bool VhdlDocGen::deleteCharRev(QCString &s,char c)
 {
-  int index=s.findRev(c,-1,FALSE);
+c=c & 0x7f;
+int index=s.findRev(c,-1,FALSE);
   if (index > -1)
   {
     QString qcs=s.remove(index,1);
@@ -1233,6 +1313,7 @@
 
 void VhdlDocGen::deleteAllChars(QCString &s,char c)
 {
+ c=c & 0x7f; 
   int index=s.findRev(c,-1,FALSE);
   while (index > -1)
   {
@@ -1263,9 +1344,16 @@
 
 QCString VhdlDocGen::getProcessNumber()
 {
+   static bool optVerilog=Config_getBool("OPTIMIZE_OUTPUT_VERILOG");
+
   static int stringCounter;
+  QCString qcs;
   char buf[8];
-  QCString qcs("PROCESS_");
+    if(optVerilog)
+     qcs="ALWAYS_";
+    else
+    qcs="PROCESS_";
+
   sprintf(buf,"%d",stringCounter++);
   qcs.append(&buf[0]);
   return qcs;
@@ -1277,18 +1365,19 @@
 
 void VhdlDocGen::writeFormatString(QCString& qcs,OutputList&ol,const MemberDef* mdef)
 {
-  QRegExp reg("[\\/\\:\\<\\>\\:\\s\\,\\;\\'\\+\\-\\*\\|\\&\\=\\(\\)\"]");
+  static bool optVerilog=Config_getBool("OPTIMIZE_OUTPUT_VERILOG");
+  QRegExp reg("[\\[\\]\\/\\:\\<\\>\\s\\,\\;\\+\\-\\*\\|\\&\\=\\(\\)\"\\s]");
   qcs+=QCString(" ");// parsing the last sign
-  QCString *ss;
+  const QCString *ss;
   QCString find=qcs;
   QCString temp=qcs;
+  int col=0;
+
+  bool bString=false;
   char buf[2];
   buf[1]='\0';
-
-  int j;
-  int len;
+  int j,len;
   j = reg.match(temp.data(),0,&len);
-
   ol.startBold();
   if (j>=0)
   {
@@ -1296,6 +1385,20 @@
     {
       find=find.left(j);
       buf[0]=temp[j];
+	  if(buf[0]=='"' && temp.length()>1)
+	  {
+		int i=temp.find('"',1);
+		if(i>0){
+         find=temp.left(i+1);
+         j+=i;
+         bString=true;
+		}
+	  }
+	  
+	  if(optVerilog){
+        ss=VerilogDocGen::findKeyWord(find);
+     }
+	  else
       ss=VhdlDocGen::findKeyWord(find);
       bool k=VhdlDocGen::isNumber(find); // is this a number
       if (k)
@@ -1310,19 +1413,34 @@
       {
 	if (j>0)
 	{
+         if(!checkString(find,ol))	   
 	  VhdlDocGen::writeStringLink(mdef,find,ol);
 	}
       }
+      if(!bString)
       VhdlDocGen::startFonts(&buf[0],"vhdlchar",ol);
 
+	  col+=j+1;
+      if(col>COL_SIZE)
+	  {
+		  ol.docify(". . . .");
+		  return;
+	  }
+
       QCString st=temp.remove(0,j+1);
       find=st;
       temp=st;
       j = reg.match(temp.data(),0,&len);
+	  bString=false;
     }//while
   }//if
   else
   {
+      if(checkString(find,ol))
+	  {
+        printf("found"); 
+	  }
+	  else
     VhdlDocGen::startFonts(find,"vhdlchar",ol);     
   }
   ol.endBold();
@@ -1334,12 +1452,26 @@
 
 bool VhdlDocGen::isNumber(const QCString& s)
 {
- // static bool veriOpt=Config_getBool("OPTIMIZE_OUTPUT_VERILOG");
+    static bool optVerilog=Config_getBool("OPTIMIZE_OUTPUT_VERILOG");
+
   static QRegExp regg("[0-9][0-9eEfFbBcCdDaA_.#-]*");
+  static QRegExp reggVerilog("[0-9]+[']*[0-9a-fA-FhHoOxXzZ._?]*");
+  static QRegExp reggVerilog1("['][0-9a-fA-FhHoOxXzZ._?]+");
  
   if (s.isEmpty()) return false;
   int j,len;
+    if(optVerilog){
+    QCString t=s;
+    VhdlDocGen::deleteAllChars(t,' ');
+     j = reggVerilog.match(t.data(),0,&len);
+     if ((j==0) && (len==(int)t.length())) return true; 
+     j = reggVerilog1.match(t.data(),0,&len);
+     if ((j==0) && (len==(int)t.length())) return true;
+     return false;
+}  
+  else 
   j = regg.match(s.data(),0,&len);
+  
   if ((j==0) && (len==(int)s.length())) return true; 
   return false;
  
@@ -1369,6 +1501,15 @@
 
 void VhdlDocGen::formatString(QCString & qcs, OutputList& ol,const MemberDef* mdef)
 { 
+  
+    static bool optVerilog  = Config_getBool("OPTIMIZE_OUTPUT_VERILOG");
+
+  if(optVerilog){
+      VhdlDocGen::writeFormatString(qcs,ol,mdef);
+       return;
+  }
+
+  
   QCString temp(qcs.length());  
   qcs.stripPrefix(":");
   qcs.stripPrefix("is");
@@ -1579,6 +1720,8 @@
     const ArgumentList* al,
     bool /*type*/)
 {
+   static bool optVerilog       = Config_getBool("OPTIMIZE_OUTPUT_VERILOG"); 
+
   if (al==0) return;
   bool sem=FALSE;    
   ol.enableAll();
@@ -1605,14 +1748,20 @@
 	ol.docify(" ");
       } 
       // linkifyText(TextGeneratorOLImpl(ol),md->getClassDef(),md->getBodyDef(),md->name(),arg->type);
+         if(optVerilog)  
+      VerilogDocGen::adjustMemberName(arg->name);
+   
       VhdlDocGen::writeFormatString(arg->name,ol,md);
       ol.docify(" ");
 
       if (VhdlDocGen::isProcedure(md))
+	   {
+  	   if(!optVerilog )
 	startFonts(arg->attrib,"stringliteral",ol);
       else
 	startFonts(QCString("in"),"stringliteral",ol);
     }
+	}
     ol.docify(" ");
     ol.disable(OutputGenerator::Man);
     ol.startEmphasis();
@@ -1705,19 +1854,21 @@
 {
   static ClassDef *cdef;
   //static GroupDef* gdef;
+  static bool optVerilog  = Config_getBool("OPTIMIZE_OUTPUT_VERILOG");
+  
+   if(optVerilog){
+       VerilogDocGen::writeVerilogDeclarations(ml,ol,0,cd);
+       return;   
+   }
+
+ 
   if (cd && cdef!=cd)
   { // only one inline link
     VhdlDocGen::writeInlineClassLink(cd,ol);
     cdef=cd;
   }
 
-  /*
-  if (gd && gdef==gd) return;
-  if (gd && gdef!=gd)
-  {
-    gdef=gd;
-  }
-*/
+ 
   VhdlDocGen::writeVHDLDeclarations(ml,ol,cd,0,0,gd,theTranslator_vhdlType(VhdlDocGen::LIBRARY,FALSE),0,FALSE,VhdlDocGen::LIBRARY);
   VhdlDocGen::writeVHDLDeclarations(ml,ol,cd,0,0,gd,theTranslator_vhdlType(VhdlDocGen::USE,FALSE),0,FALSE,VhdlDocGen::USE);
   VhdlDocGen::writeVHDLDeclarations(ml,ol,cd,0,0,gd,theTranslator_vhdlType(VhdlDocGen::FUNCTION,FALSE),0,FALSE,VhdlDocGen::FUNCTION);
@@ -1739,6 +1890,11 @@
   VhdlDocGen::writeVHDLDeclarations(ml,ol,cd,0,0,gd,theTranslator_vhdlType(VhdlDocGen::COMPONENT_INST,FALSE),0,FALSE,VhdlDocGen::COMPONENT_INST);
   VhdlDocGen::writeVHDLDeclarations(ml,ol,cd,0,0,gd,theTranslator_vhdlType(VhdlDocGen::ALIAS,FALSE),0,FALSE,VhdlDocGen::ALIAS);
   
+  VhdlDocGen::writeVHDLDeclarations(ml,ol,cd,0,0,gd,theTranslator_vhdlType(VhdlDocGen::PROTECT,FALSE),0,FALSE,VhdlDocGen::PROTECT);
+ 
+   // context must be added to global file definitions.  
+   VhdlDocGen::writeVHDLDeclarations(ml,ol,cd,0,fd,gd,theTranslator_vhdlType(VhdlDocGen::CONTEXT,FALSE),0,FALSE,VhdlDocGen::CONTEXT);
+ 
   // configurations must be added to global file definitions.  
   VhdlDocGen::writeVHDLDeclarations(ml,ol,cd,0,fd,gd,theTranslator_vhdlType(VhdlDocGen::CONFIG,FALSE),0,FALSE,VhdlDocGen::CONFIG);
 }
@@ -1754,6 +1910,10 @@
     {
       mdd->setMemberSpecifiers(VhdlDocGen::CONFIG);        
     }
+    else if (strcmp(mdd->typeString(),"context")==0)
+    {
+  	 mdd->setMemberSpecifiers(VhdlDocGen::CONTEXT);        
+    }
     else if (strcmp(mdd->typeString(),"library")==0)
     {
       mdd->setMemberSpecifiers(VhdlDocGen::LIBRARY);        
@@ -1769,8 +1929,18 @@
 void VhdlDocGen::writeVHDLTypeDocumentation(const MemberDef* mdef, const Definition *d, OutputList &ol)
 {
   ClassDef *cd=(ClassDef*)d;
-  if (cd==0) return;
-  if ((VhdlDocGen::isVhdlFunction(mdef) || VhdlDocGen::isProcedure(mdef) || VhdlDocGen::isProcess(mdef)))
+   bool bParseVerilogFunc=false;
+  static bool optVerilog  = Config_getBool("OPTIMIZE_OUTPUT_VERILOG");
+
+  if(optVerilog)
+   if(!mdef->isVariable())
+    bParseVerilogFunc=true;
+
+
+  if (cd==0)
+	  return;
+ // if ((VhdlDocGen::isVhdlFunction(mdef) || VhdlDocGen::isProcedure(mdef) || VhdlDocGen::isProcess(mdef)))
+ if ((VhdlDocGen::isVhdlFunction(mdef) || VhdlDocGen::isProcedure(mdef) || VhdlDocGen::isProcess(mdef) || bParseVerilogFunc))
   {
     QCString nn=mdef->typeString();
     nn=nn.stripWhiteSpace();
@@ -1796,12 +1966,50 @@
   if (mdef->isVariable())
   { 
     //ol.docify(mdef->name().data());
+      if(optVerilog){
+      ol.startFontClass("stringliteral");
+      writeLink(mdef,ol);
+      ol.endFontClass();
+   }
+  else 
      writeLink(mdef,ol);
     ol.docify(" ");
+      
+   if(mdef->getMemberSpecifiers()==VerilogDocGen::FEATURE)
+   {
+	 QCString arg=mdef->getDefinition();
+	 int kr=arg.find("\\?");	  
+	 if(kr>=0)
+	 {
+       arg=arg.left(kr-2);
+	   arg.stripPrefix("feature");
+	   arg=arg.simplifyWhiteSpace();
+	   arg.stripPrefix(mdef->name().data());
+	   arg.append("{ . . . }");
+	   VhdlDocGen::formatString(arg,ol,mdef);
+	 }
+	 else if(mdef->getMemberSpecifiers()==VhdlDocGen::CONTEXT)
+		 {
+		   QCString arg=mdef->argsString();
+		   VhdlDocGen::formatString(arg,ol,mdef);
+		 }
+	 else{
+     QCString ttype=mdef->typeString();
+	 ttype.stripPrefix("feature");
+	 VhdlDocGen::formatString(ttype,ol,mdef);
+	 }
+	//VerilogDocGen::parseDefineConstruct(arg,mdef,ol);
+	return ;
+    }
+
+	
+	if(mdef->getMemberSpecifiers()!=VerilogDocGen::FEATURE){
     QCString ttype=mdef->typeString();
     VhdlDocGen::formatString(ttype,ol,mdef);
     ol.docify(" ");
-    if (VhdlDocGen::isPort(mdef))
+    }  
+   // if (VhdlDocGen::isPort(mdef))
+      if (VhdlDocGen::isPort(mdef)|| (optVerilog && mdef->getMemberSpecifiers()!=VerilogDocGen::SIGNAL)) 
     {
       QCString largs=mdef->argsString();
       VhdlDocGen::formatString(largs,ol,mdef);
@@ -1987,7 +2195,7 @@
     case VhdlDocGen::PORT:
       writeLink(mdef,ol);
       ol.insertMemberAlign();
-      if (mm==VhdlDocGen::GENERIC)
+      if (false)
       {
 	ol.startBold();
 	ol.docify(" ");
@@ -1998,7 +2206,7 @@
       {
 	ol.docify(" ");
 	ol.startBold();
-	ol.docify(mdef->typeString());
+	 VhdlDocGen::formatString(ltype,ol,mdef);
 	ol.endBold();
 	ol.docify(" ");
 	VhdlDocGen::formatString(largs,ol,mdef);
@@ -2055,6 +2263,7 @@
       } 
       break;
     case VhdlDocGen::SIGNAL:
+	case VhdlDocGen::PROTECT:
     case VhdlDocGen::ATTRIBUTE:
     case VhdlDocGen::TYPE:
     case VhdlDocGen::SUBTYPE:
@@ -2086,6 +2295,14 @@
 	VhdlDocGen::formatString(ltype,ol,mdef);
       ol.endBold();    
       break;
+	  	case VhdlDocGen::CONTEXT:
+        ol.startBold();
+        writeLink(mdef,ol);
+        if (largs.isEmpty()) ol.docify("     : ");    
+        ol.insertMemberAlign();
+      if (!largs.isEmpty())
+	   VhdlDocGen::formatString(largs,ol,mdef);
+      ol.endBold();    
     default: break;
   }
 
@@ -2220,7 +2437,7 @@
 
   if (title) 
   {
-    ol.startMemberHeader(ml->listTypeAsString());
+    ol.startMemberHeader(title);
     ol.parseText(title);
     ol.endMemberHeader();
     ol.docify(" ");
@@ -2277,6 +2494,7 @@
   {
     nn=nn.mid(j,nn.length());
     mdef->setName(nn.data());
+	mdef->setLocalName(nn);
   }
 }//adjustRecordMember
 
@@ -2288,9 +2506,19 @@
   //static ClassDef *prev = 0;
   //if (prev == cd)  return TRUE;
   //if (cd != prev) prev=cd;
+  static bool optVerilog    = Config_getBool("OPTIMIZE_OUTPUT_VERILOG");
 
+  QCString qcs;
+  if(optVerilog){
+   if(cd->protection()==Public)
+    qcs+=" Module";
+     else
+    qcs+=" Primitive";
+  }
+  else{
   int id=cd->protection();
-  QCString qcs = VhdlDocGen::trTypeString(id+2);
+       qcs = VhdlDocGen::trTypeString(id+2);
+	  }
   cname=VhdlDocGen::getClassName(cd);
   ol.startBold();
   ol.writeString(qcs.data());
@@ -2302,6 +2530,10 @@
 
 QCString VhdlDocGen::trVhdlType(int type,bool sing)
 {
+   static bool optVerilog    = Config_getBool("OPTIMIZE_OUTPUT_VERILOG");
+ 
+   if(optVerilog) return VerilogDocGen::convertTypeToString(type,sing);
+
   switch(type)
   {
     case VhdlDocGen::LIBRARY:      
@@ -2379,7 +2611,10 @@
     case VhdlDocGen::CONFIG:        
       if (sing) return "Configuration";       
       return "Configurations";
-      
+   case VhdlDocGen::PROTECT:
+	  return "Protect Directives";
+   case VhdlDocGen::CONTEXT:
+	  return "Context Declaration";
     default:                       
       return "Class";
   }
@@ -2402,6 +2637,12 @@
 
 QCString VhdlDocGen::trDesignUnitListDescription()
 {
+
+ static bool optVerilog = Config_getBool("OPTIMIZE_OUTPUT_VERILOG");
+ if(optVerilog)
+  return "Here is a list of all design unit members with links to "
+         "the Modules they belong to:";
+
   return "Here is a list of all design unit members with links to "
          "the Entities and Packages they belong to:"; 
 }
@@ -2418,6 +2659,9 @@
 
 QCString VhdlDocGen::trFunctionAndProc()
 {
+ if(Config_getBool("OPTIMIZE_OUTPUT_VERILOG"))
+   return "Functions/Tasks/Always Construct";
+ 
   return "Functions/Procedures/Processes";
 }
 
@@ -2458,13 +2702,25 @@
 
 void VhdlDocGen::writeStringLink(const MemberDef *mdef,QCString mem, OutputList& ol)
 {
+  bool optVerilog          = Config_getBool("OPTIMIZE_OUTPUT_VERILOG");
+
   if (mdef) 
   {
     ClassDef *cd=mdef->getClassDef();
     if (cd)
     { 
+        MemberDef* memdef=NULL;
+
       QCString n=cd->name(); 
-      MemberDef* memdef=VhdlDocGen::findMember(n,mem);
+	     if(optVerilog){
+        if(mem.contains("`"))
+        memdef = findGlobalMember(mem);
+        if(memdef==0)
+        memdef=VerilogDocGen::findMember(n,mem,-1);
+      }
+      else
+        memdef=VhdlDocGen::findMember(n,mem);
+
       if (memdef && memdef->isLinkable()) 
       { 
 	ol.startBold();

G:\dox17>diff -i -u -b -B  oldsrc170/src/vhdldocgen.h doxygen-1.7.0/src/vhdldocgen.h 
--- oldsrc170/src/vhdldocgen.h	2010-02-19 12:09:48.000000000 -0800
+++ doxygen-1.7.0/src/vhdldocgen.h	2010-06-18 12:56:32.000000000 -0700
@@ -1,6 +1,6 @@
 /******************************************************************************
  *
- * $Id: vhdlscanner.h,v 1.9 2001/03/19 19:27:39 root Exp $
+ * 
  *
  * Copyright (C) 1997-2010 by Dimitri van Heesch.
  *
@@ -66,6 +66,7 @@
       USE,
       PROCESS,
       PORT,
+	  PROTECT,
       DOCUMENT, //18 0x12
       UNITS,	  
       GENERIC,
@@ -75,7 +76,8 @@
       VFILE,   
       SHAREDVARIABLE,
       CONFIG,
-      ALIAS
+      ALIAS,
+	  CONTEXT=0x199
     };
 
     VhdlDocGen();
@@ -188,6 +190,10 @@
     { return mdef->getMemberSpecifiers()==VhdlDocGen::GROUP; }
     static bool isCompInst(const MemberDef *mdef) 
     { return mdef->getMemberSpecifiers()==VhdlDocGen::COMPONENT_INST; }
+     static bool isProtect(const MemberDef *mdef) 
+		 { return mdef->getMemberSpecifiers()==VhdlDocGen::PROTECT; }
+     static bool isContext(const MemberDef *mdef) 
+		 { return mdef->getMemberSpecifiers()==VhdlDocGen::CONTEXT; }
 
     //-----------------------------------------------------
     // translatable items

G:\dox17>diff -i -u -b -B  oldsrc170/src/filedef.cpp doxygen-1.7.0/src/filedef.cpp 
--- oldsrc170/src/filedef.cpp	2010-06-04 08:54:24.000000000 -0700
+++ doxygen-1.7.0/src/filedef.cpp	2010-06-18 12:56:32.000000000 -0700
@@ -1,6 +1,6 @@
 /******************************************************************************
  *
- * $Id: filedef.cpp,v 1.55 2001/03/19 19:27:40 root Exp $
+ * 
  *
  * Copyright (C) 1997-2010 by Dimitri van Heesch.
  *
@@ -36,6 +36,7 @@
 #include "vhdldocgen.h"
 #include "debug.h"
 #include "layout.h"
+#include "verilogdocgen.h"
 
 //---------------------------------------------------------------------------
 
@@ -842,6 +843,10 @@
 /*! Adds member definition \a md to the list of all members of this file */
 void FileDef::insertMember(MemberDef *md)
 {
+ 
+ static bool optVerilog       = Config_getBool("OPTIMIZE_OUTPUT_VERILOG");
+
+
   if (md->isHidden()) return;
   //printf("%s:FileDef::insertMember(%s (=%p) list has %d elements)\n",
   //    name().data(),md->name().data(),md,allMemberList.count());
@@ -880,8 +885,10 @@
     case MemberDef::EnumValue:    // enum values are shown inside their enums
       break;
     case MemberDef::Define:       
+		if(!optVerilog){
       addMemberToList(MemberList::decDefineMembers,md);
       addMemberToList(MemberList::docDefineMembers,md);
+			}     
       break;
     default:
        err("FileDef::insertMembers(): "
@@ -1577,11 +1584,16 @@
 void FileDef::writeMemberDeclarations(OutputList &ol,MemberList::ListType lt,const QCString &title)
 {
   static bool optVhdl = Config_getBool("OPTIMIZE_OUTPUT_VHDL");
+    static bool optVerilog = Config_getBool("OPTIMIZE_OUTPUT_VERILOG");
+
   MemberList * ml = getMemberList(lt);
   if (ml) 
   {
     if (optVhdl) // use specific declarations function
     {
+        if(optVerilog)
+       VerilogDocGen::writeVerilogDeclarations(ml,ol,0,0,this);
+        else 
       VhdlDocGen::writeVhdlDeclarations(ml,ol,0,0,this);
     }
     else

G:\dox17>diff -i -u -b -B  oldsrc170/src/layout.cpp doxygen-1.7.0/src/layout.cpp 
--- oldsrc170/src/layout.cpp	2010-05-02 09:37:02.000000000 -0700
+++ doxygen-1.7.0/src/layout.cpp	2010-06-18 12:56:32.000000000 -0700
@@ -1,6 +1,6 @@
 /******************************************************************************
  *
- * $Id: layout.cpp,v 1.2 2001/03/19 19:27:41 root Exp $
+ * 
  *
  *
  * Copyright (C) 1997-2010 by Dimitri van Heesch.

G:\dox17>diff -i -u -b -B  oldsrc170/src/classdef.cpp doxygen-1.7.0/src/classdef.cpp 
--- oldsrc170/src/classdef.cpp	2010-06-11 13:28:48.000000000 -0700
+++ doxygen-1.7.0/src/classdef.cpp	2010-06-18 16:05:36.000000000 -0700
@@ -1,6 +1,6 @@
 /******************************************************************************
  *
- * $Id: classdef.cpp,v 1.54 2001/03/19 19:27:39 root Exp $
+ * 
  *
  * Copyright (C) 1997-2010 by Dimitri van Heesch.
  *
@@ -38,6 +38,7 @@
 #include "searchindex.h"
 #include "vhdldocgen.h"
 #include "layout.h"
+#include "verilogdocgen.h"
 
 //-----------------------------------------------------------------------------
 
@@ -361,8 +362,21 @@
                                    )
 {
   //printf("insertInternalMember(%s) isHidden()=%d\n",md->name().data(),md->isHidden());
+  static bool optVerilog    = Config_getBool("OPTIMIZE_OUTPUT_VHDL");
+ 
   if (md->isHidden()) return;
 
+  if(optVerilog)
+	  {
+	  QCString tti=VhdlDocGen::trVhdlType(md->getMemberSpecifiers(),false);
+      //  VhdlDocGen::deleteAllChars(tti,' '); // Always Construct
+  
+        QStringList qsl=this->getList();
+        int i=qsl.findIndex(tti);
+        if(i<0)
+          this->addListType(tti);
+	  }
+  
   if (!isReference())
   {
     static bool extractPrivate = Config_getBool("EXTRACT_PRIVATE");
@@ -1362,12 +1376,15 @@
 
 void ClassDef::writeSummaryLinks(OutputList &ol)
 {
+   static bool vhdlOpt    = Config_getBool("OPTIMIZE_OUTPUT_VHDL");
+ 
   ol.pushGeneratorState();
   ol.disableAllBut(OutputGenerator::Html);
   QListIterator<LayoutDocEntry> eli(
       LayoutDocManager::instance().docEntries(LayoutDocManager::Class));
   LayoutDocEntry *lde;
   bool first=TRUE;
+  if(!vhdlOpt){
   for (eli.toFirst();(lde=eli.current());++eli)
   {
     if (lde->kind()==LayoutDocEntry::ClassNestedClasses && 
@@ -1387,6 +1404,17 @@
         writeSummaryLink(ol,ml->listTypeAsString(),lmd->title,first);
       }
     }
+  }// for
+	  }// if
+  else
+	  {
+	  QStringList qsl=this->getList();
+	  uint len=qsl.count();
+	  for(uint i=0;i<len;i++)
+		  {
+		  QCString qq=(QCString)qsl[i];
+		  writeSummaryLink(ol,qq.data(),qq.data(),first);
+		  }
   }
   if (!first)
   {

G:\dox17>diff -i -u -b -B  oldsrc170/src/groupdef.cpp doxygen-1.7.0/src/groupdef.cpp 
--- oldsrc170/src/groupdef.cpp	2010-04-24 04:05:12.000000000 -0700
+++ doxygen-1.7.0/src/groupdef.cpp	2010-06-18 12:56:32.000000000 -0700
@@ -1,6 +1,6 @@
 /******************************************************************************
  *
- * $Id: groupdef.cpp,v 1.29 2001/03/19 19:27:40 root Exp $
+ * 
  *
  * Copyright (C) 1997-2010 by Dimitri van Heesch.
  *
@@ -36,6 +36,7 @@
 #include "dot.h"
 #include "vhdldocgen.h"
 #include "layout.h"
+#include "verilogdocgen.h"
 
 //---------------------------------------------------------------------------
 
@@ -1362,10 +1363,14 @@
 void GroupDef::writeMemberDeclarations(OutputList &ol,MemberList::ListType lt,const QCString &title)
 {
   static bool optimizeVhdl = Config_getBool("OPTIMIZE_OUTPUT_VHDL");
+   static bool optVerilog = Config_getBool("OPTIMIZE_OUTPUT_VERILOG");
 
   MemberList * ml = getMemberList(lt);
   if (optimizeVhdl && ml) 
   {
+      if(optVerilog)
+        VerilogDocGen::writeVerilogDeclarations(ml,ol,this,0);
+        else
     VhdlDocGen::writeVhdlDeclarations(ml,ol,this,0,0);
     return;
   }

G:\dox17>diff -i -u -b -B  oldsrc170/src/config.l doxygen-1.7.0/src/config.l 
--- oldsrc170/src/config.l	2010-06-10 04:49:58.000000000 -0700
+++ doxygen-1.7.0/src/config.l	2010-06-18 12:56:32.000000000 -0700
@@ -1,6 +1,6 @@
 /******************************************************************************
  *
- * $Id: config_templ.l,v 1.8 2001/01/01 10:15:16 root Exp $
+ * 
  *
  * Copyright (C) 1997-2010 by Dimitri van Heesch.
  *
@@ -1305,6 +1305,8 @@
     filePatternList.append("*.f");
     filePatternList.append("*.vhd");
     filePatternList.append("*.vhdl");
+    filePatternList.append("*.v");
+    
     if (portable_fileSystemIsCaseSensitive())
     {
       // unix => case sensitive match => also include useful uppercase versions
@@ -1326,6 +1328,7 @@
       filePatternList.append("*.F");
       filePatternList.append("*.VHD");
       filePatternList.append("*.VHDL");
+      filePatternList.append("*.v"); 
     }
   }
 
@@ -1434,6 +1437,20 @@
     annotationFromBrief.append("the");
   }
 
+  
+  if (Config_getBool("OPTIMIZE_OUTPUT_VHDL") && Config_getBool("OPTIMIZE_OUTPUT_VERILOG"))
+  {
+    fprintf(stderr,"\n Only the Verilog  files will be tailored correctly  !\n");
+  } 
+ 
+ if(Config_getBool("OPTIMIZE_OUTPUT_VERILOG") && !Config_getBool("OPTIMIZE_OUTPUT_VHDL")){
+   // must be set for parsing verilog files
+   Config::instance()->addBool("OPTIMIZE_OUTPUT_VHDL"," ",true);
+   Config::instance()->addBool("EXTRACT_ALL"," ",true);
+  }
+
+
+  
   // some default settings for vhdl
   if (Config_getBool("OPTIMIZE_OUTPUT_VHDL") && 
       (Config_getBool("INLINE_INHERITED_MEMB") || 

G:\dox17>diff -i -u -b -B  oldsrc170/src/configoptions.cpp doxygen-1.7.0/src/configoptions.cpp 
--- oldsrc170/src/configoptions.cpp	2010-06-04 08:49:32.000000000 -0700
+++ doxygen-1.7.0/src/configoptions.cpp	2010-06-18 12:56:32.000000000 -0700
@@ -310,6 +310,14 @@
                  FALSE
                 );
   //----
+    cb = cfg->addBool(
+                  "OPTIMIZE_OUTPUT_VERILOG",
+                    "Set the OPTIMIZE_OUTPUT_VERILOG tag to YES if your project consists of Verilog \n"
+                    "sources. Doxygen will then generate output that is tailored for \n"
+					"Verilog. \n",
+                    FALSE
+                 );  
+  //----
   cl = cfg->addList(
                  "EXTENSION_MAPPING",
                  "Doxygen selects the parser to use depending on the extension of the files it\n"

G:\dox17>diff -i -u -b -B  oldsrc170/src/memberdef.cpp doxygen-1.7.0/src/memberdef.cpp 
--- oldsrc170/src/memberdef.cpp	2010-05-13 03:11:22.000000000 -0700
+++ doxygen-1.7.0/src/memberdef.cpp	2010-06-18 12:56:32.000000000 -0700
@@ -40,7 +40,7 @@
 #include "objcache.h"
 #include "vhdlscanner.h"
 #include "vhdldocgen.h"
-
+#include "verilogdocgen.h"
 #define START_MARKER 0x4D454D5B // MEM[
 #define END_MARKER   0x4D454D5D // MEM]
 
@@ -1683,6 +1683,8 @@
   bool inFile = container->definitionType()==Definition::TypeFile;
   bool hasDocs = isDetailedSectionVisible(inGroup,inFile);
   static bool optVhdl          = Config_getBool("OPTIMIZE_OUTPUT_VHDL");
+   static bool optVerilog       = Config_getBool("OPTIMIZE_OUTPUT_VERILOG");
+    
   //printf("MemberDef::writeDocumentation(): name=`%s' hasDocs=`%d' containerType=%d inGroup=%d\n",
   //    name().data(),hasDocs,container->definitionType(),inGroup);
   if ( !hasDocs ) return;
@@ -1921,6 +1923,16 @@
     QStrList sl;
     if (optVhdl)
     {
+       if(optVerilog){
+       if(this->getMemberSpecifiers() != VerilogDocGen::SIGNAL)
+          sl.append(VhdlDocGen::trTypeString(getMemberSpecifiers()));
+	   else
+		   {
+		   QCString largs=this->argsString();
+		   sl.append(largs);
+		   }
+	   }
+       else  
       sl.append(VhdlDocGen::trTypeString(getMemberSpecifiers()));
     }
     else
@@ -3715,6 +3727,11 @@
   m_isLinkableCached = 0;
 }
 
+QCString MemberDef::getDefinition() const
+{ 
+ return m_impl->def; 
+}
+
 void MemberDef::setDefinition(const char *d)
 { 
   makeResident();

G:\dox17>diff -i -u -b -B  oldsrc170/src/memberdef.h doxygen-1.7.0/src/memberdef.h 
--- oldsrc170/src/memberdef.h	2010-04-24 04:05:12.000000000 -0700
+++ doxygen-1.7.0/src/memberdef.h	2010-06-18 12:56:32.000000000 -0700
@@ -353,7 +353,7 @@
     void findSectionsInDocumentation();
     
     bool visited;
-   
+    QCString getDefinition() const;
   protected:
     void flushToDisk() const;
     void loadFromDisk() const;

G:\dox17>diff -i -u -b -B  oldsrc170/src/libdoxygen.pro doxygen-1.7.0/src/libdoxygen.pro 
--- oldsrc170/src/libdoxygen.pro	2010-06-14 14:07:20.000000000 -0700
+++ doxygen-1.7.0/src/libdoxygen.pro	2010-06-18 12:56:32.000000000 -0700
@@ -1,5 +1,5 @@
 #
-# This file was generated from libdoxygen.pro.in on Mon Jun 14 23:07:20 CEST 2010
+# This file was generated from libdoxygen.pro.in on Tue Feb 16 22:05:51 CET 2010
 #
 
 #
@@ -52,7 +52,6 @@
 		filedef.h \
 		filename.h \
 		formula.h \
-		ftextstream.h \
 		ftvhelp.h \
 		groupdef.h \
 		htags.h \
@@ -89,6 +88,7 @@
 		perlmodgen.h \
 		lodepng.h \
 		pre.h \
+        		preVerilog.h \        
                 printdocvisitor.h \
                 pycode.h \
                 pyscanner.h \
@@ -150,6 +150,9 @@
 		translator_za.h \
 		unistd.h \
 		util.h \
+		verilogscanner.h \
+		verilogdocgen.h \
+		verilogparser.hpp \
 		version.h \
 		vhdlcode.h \
 		vhdldocgen.h \
@@ -184,7 +187,6 @@
 		filedef.cpp \
 		filename.cpp \
 		formula.cpp \
-		ftextstream.cpp \
 		ftvhelp.cpp \
 		fortrancode.cpp \
 		fortranscanner.cpp \    
@@ -219,6 +221,7 @@
 		pagedef.cpp \
 		perlmodgen.cpp \
 		pre.cpp \
+		preVerilog.cpp \
 		pycode.cpp \
 		pyscanner.cpp \    
 		qhp.cpp \
@@ -234,6 +237,9 @@
                 textdocvisitor.cpp \
 		translator.cpp \
 		util.cpp \
+		verilogscanner.cpp \
+		verilogparser.cpp \
+		verilogdocgen.cpp \
 		version.cpp \
 		vhdlcode.cpp \
 		vhdldocgen.cpp \
@@ -256,4 +262,4 @@
 TARGET                     =  doxygen
 OBJECTS_DIR                =  ../objects
 
-TMAKE_MOC = /usr/bin/moc
+TMAKE_MOC = /Developer/qt/bin/moc

G:\dox17>diff -i -u -b -B  oldsrc170/src/libdoxygen.pro.in doxygen-1.7.0/src/libdoxygen.pro.in 
--- oldsrc170/src/libdoxygen.pro.in	2010-04-30 03:45:26.000000000 -0700
+++ doxygen-1.7.0/src/libdoxygen.pro.in	2010-06-18 12:56:32.000000000 -0700
@@ -1,5 +1,5 @@
 #
-# $Id: libdoxygen.pro.in,v 1.1 2001/03/19 19:27:41 root Exp $
+# 
 #
 # Copyright (C) 1997-2010 by Dimitri van Heesch.
 #
@@ -91,6 +91,7 @@
                 fortrancode.h \
                 fortranscanner.h \
                 dbusxmlscanner.h \
+                preVerilog.h \
 		qhp.h \
 		qhpxmlwriter.h \
 		qtbc.h \
@@ -147,6 +148,9 @@
 		unistd.h \
 		util.h \
 		version.h \
+		verilogscanner.h \
+		verilogdocgen.h \
+		verilogparser.hpp \
 		vhdlcode.h \
 		vhdldocgen.h \
 		vhdlscanner.h \
@@ -215,6 +219,7 @@
 		pagedef.cpp \
 		perlmodgen.cpp \
 		pre.cpp \
+		preVerilog.cpp \
 		pycode.cpp \
 		pyscanner.cpp \    
 		qhp.cpp \
@@ -231,6 +236,9 @@
 		translator.cpp \
 		util.cpp \
 		version.cpp \
+		verilogscanner.cpp \
+		verilogparser.cpp \
+		verilogdocgen.cpp \
 		vhdlcode.cpp \
 		vhdldocgen.cpp \
 		vhdlscanner.cpp \

G:\dox17>diff -i -u -b -B  oldsrc170/src/libdoxygen.t doxygen-1.7.0/src/libdoxygen.t 
--- oldsrc170/src/libdoxygen.t	2010-01-01 03:53:12.000000000 -0800
+++ doxygen-1.7.0/src/libdoxygen.t	2010-06-18 12:56:32.000000000 -0700
@@ -1,5 +1,5 @@
 #
-# $Id: libdoxygen.t,v 1.1 2001/03/19 19:27:41 root Exp $
+# 
 #
 # Copyright (C) 1997-2010 by Dimitri van Heesch.
 #
@@ -97,6 +97,16 @@
 	$(YACC) -l -d -p cppExpYY constexp.y -o ce_parse.c 
 	-rm ce_parse.c	
 
+
+#$ GenerateDep("verilogscanner.cpp","verilogscanner.l");
+	$(LEX) -8  -PverilogScanYY -t verilogscanner.l | $(INCBUFSIZE) >verilogscanner.cpp
+
+#$ GenerateDep("verilogparser.cpp","verilogparser.y");
+	$(YACC)  -v -d verilogparser.y -o verilogparser.cpp 
+
+#$ GenerateDep("preVerilog.cpp","preVerilog.l");
+	$(LEX) -PpreYYVerilog -t preVerilog.l | $(INCBUFSIZE) >preVerilog.cpp 
+
 TO_C_CMD=sed -e "s/\\\\/\\\\\\\\/g" -e "s/\"/\\\\\"/g" -e "s/^/\"/g" -e "s/$$/\\\\n\"/g"
 
 index_xsd.h: index.xsd

G:\dox17>diff -i -u -b -B  oldsrc170/winbuild/Doxygen.vcproj doxygen-1.7.0/winbuild/Doxygen.vcproj 
--- oldsrc170/winbuild/Doxygen.vcproj	2010-06-10 04:36:16.000000000 -0700
+++ doxygen-1.7.0/winbuild/Doxygen.vcproj	2010-06-18 12:56:32.000000000 -0700
@@ -53,7 +53,7 @@
 				Name="VCCLCompilerTool"
 				AdditionalOptions="/Zm200 "
 				Optimization="0"
-				AdditionalIncludeDirectories="..\src,..\qtools,..\libpng,..\libmd5,."
+				AdditionalIncludeDirectories="..\src;..\qtools;..\libpng;..\libmd5;.;&quot;G:\dox163\doxygen-svn\winbuild\Debug&quot;"
 				PreprocessorDefinitions="_CONSOLE;WIN32;_DEBUG;_CRT_SECURE_NO_DEPRECATE;LIBICONV_STATIC;CHARSET_STATIC"
 				MinimalRebuild="true"
 				BasicRuntimeChecks="3"
@@ -1578,6 +1578,30 @@
 				</FileConfiguration>
 			</File>
 			<File
+				RelativePath="..\src\preVerilog.cpp"
+				>
+			</File>
+			<File
+				RelativePath="..\src\preVerilog.l"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="Lex"
+						CommandLine="flex -PpreYYVerilog [AllOptions] [AdditionalOptions] [inputs]"
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="Lex"
+						CommandLine="flex  -PpreYYVerilog [AllOptions] [AdditionalOptions] [inputs]"
+					/>
+				</FileConfiguration>
+			</File>
+			<File
 				RelativePath="..\src\pycode.cpp"
 				>
 			</File>
@@ -1878,6 +1902,48 @@
 				</FileConfiguration>
 			</File>
 			<File
+				RelativePath="..\src\verilogdocgen.cpp"
+				>
+			</File>
+			<File
+				RelativePath="..\src\verilogparser.cpp"
+				>
+			</File>
+			<File
+				RelativePath="..\src\verilogparser.hpp"
+				>
+			</File>
+			<File
+				RelativePath="..\src\verilogparser.y"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCustomBuildTool"
+						Description="Running bison on verilogparser.y"
+						CommandLine="runbison.bat $(InputDir)&#x0D;&#x0A;"
+						Outputs="$(InputDir)\..\src\verilogparser.cpp"
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\src\verilogscanner.cpp"
+				>
+			</File>
+			<File
+				RelativePath="..\src\verilogscanner.l"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="Lex"
+						CommandLine="flex -8  -PverilogScanYY [AllOptions] [AdditionalOptions] [inputs]"
+					/>
+				</FileConfiguration>
+			</File>
+			<File
 				RelativePath="..\src\version.cpp"
 				>
 				<FileConfiguration
@@ -2305,6 +2371,10 @@
 				>
 			</File>
 			<File
+				RelativePath="..\src\preVerilog.h"
+				>
+			</File>
+			<File
 				RelativePath="..\src\printdocvisitor.h"
 				>
 			</File>
@@ -2577,6 +2647,14 @@
 				>
 			</File>
 			<File
+				RelativePath="..\src\verilogdocgen.h"
+				>
+			</File>
+			<File
+				RelativePath="..\src\verilogscanner.h"
+				>
+			</File>
+			<File
 				RelativePath="..\src\version.h"
 				>
 			</File>

G:\dox17>diff -i -u -b -B  oldsrc170/winbuild/runbison.bat doxygen-1.7.0/winbuild/runbison.bat 
--- oldsrc170/winbuild/runbison.bat	2007-01-21 09:29:44.000000000 -0800
+++ doxygen-1.7.0/winbuild/runbison.bat	2010-06-18 12:56:34.000000000 -0700
@@ -1,3 +1,4 @@
 bison -l -d -p cppExpYY %1\..\src\constexp.y -o %1\..\src\ce_parse.c
 del %1\..\src\ce_parse.c
 bison -l -p cppExpYY %1\..\src\constexp.y -o %1\..\src\ce_parse.cpp
+bison -d -t -v %1\..\src\verilogparser.y -o %1\..\src\verilogparser.cpp
