
/* A Bison parser, made by GNU Bison 2.4.1.  */

/* Skeleton implementation for Bison GLR parsers in C
   
      Copyright (C) 2002, 2003, 2004, 2005, 2006 Free Software Foundation, Inc.
   
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.
   
   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C GLR parser skeleton written by Paul Hilfinger.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.4.1"

/* Skeleton name.  */
#define YYSKELETON_NAME "glr.c"

/* Pure parsers.  */
#define YYPURE 0

/* Using locations.  */
#define YYLSP_NEEDED 1


/* Substitute the variable and function names.  */
#define yyparse c_parse
#define yylex   c_lex
#define yyerror c_error
#define yylval  c_lval
#define yychar  c_char
#define yydebug c_debug
#define yynerrs c_nerrs
#define yylloc  c_lloc

/* Copy the first part of user declarations.  */

/* Line 172 of glr.c  */
#line 33 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"


#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "verilogdocgen.h"
#include "membergroup.h"
//#include "verilogparser.hpp"
#include "vhdldocgen.h"
#include "doxygen.h"
#include "searchindex.h"
#include "verilogscanner.h"
#include "commentscan.h"

#define YYMAXDEPTH 15000

static MyParserConv* myconv=0;

static int CurrState;
static bool generateItem=false;
static int          currVerilogType;
static Entry*       current=0;
static Entry*		current_rootVerilog  ;
static Entry*		currentVerilog=0  ;
static Entry*       currentFunctionVerilog=0;
static Entry*       lastModule=0;


static bool         parseCode=FALSE; 

static QCString     currVerilogClass;
static QCString     identVerilog; // last written word
static QCString     currVerilogInst;
static QCString     prevName; // stores the last parsed word
static QCString     moduleParamName; // stores name of  module xxx#(paramList) xxx ();
static int          moduleLine=0;

static int briefLine;
static QCString briefString;

int c_lex (void);
void c_error (char const *);


// functions for  verilog parser ---------------------

static void parseString();
static void writeDigit();
static void initVerilogParser();
static void parseModule();
static void parseFunction(Entry* e);
static void parseReg(Entry* e);
static void parsePortDir(Entry* e,int type);
static void parseParam(Entry* e);
static void parseListOfPorts();
static void parseAlways(bool b=false);
static void parseModuleInst(QCString& first,QCString& sec);


bool findExtendsComponent(QList<BaseInfo> *extend,QCString& compName);
void addSubEntry(Entry* root, Entry* e);


/* Line 172 of glr.c  */
#line 131 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.cpp"



#include "verilogparser.hpp"

/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 1
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* Enabling the token table.  */
#ifndef YYTOKEN_TABLE
# define YYTOKEN_TABLE 0
#endif

/* Default (constant) value used for initialization for null
   right-hand sides.  Unlike the standard yacc.c template,
   here we set the default value of $$ to a zeroed-out value.
   Since the default value is undefined, this behavior is
   technically correct.  */
static YYSTYPE yyval_default;

/* Copy the second part of user declarations.  */


/* Line 243 of glr.c  */
#line 166 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.cpp"

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#ifndef YY_
# if YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(e) ((void) (e))
#else
# define YYUSE(e) /* empty */
#endif

/* Identity function, used to suppress warnings about constant conditions.  */
#ifndef lint
# define YYID(n) (n)
#else
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static int
YYID (int i)
#else
static int
YYID (i)
    int i;
#endif
{
  return i;
}
#endif

#ifndef YYFREE
# define YYFREE free
#endif
#ifndef YYMALLOC
# define YYMALLOC malloc
#endif
#ifndef YYREALLOC
# define YYREALLOC realloc
#endif

#define YYSIZEMAX ((size_t) -1)

#ifdef __cplusplus
   typedef bool yybool;
#else
   typedef unsigned char yybool;
#endif
#define yytrue 1
#define yyfalse 0

#ifndef YYSETJMP
# include <setjmp.h>
# define YYJMP_BUF jmp_buf
# define YYSETJMP(env) setjmp (env)
# define YYLONGJMP(env, val) longjmp (env, val)
#endif

/*-----------------.
| GCC extensions.  |
`-----------------*/

#ifndef __attribute__
/* This feature is available in gcc versions 2.5 and later.  */
# if (! defined __GNUC__ || __GNUC__ < 2 \
      || (__GNUC__ == 2 && __GNUC_MINOR__ < 5) || __STRICT_ANSI__)
#  define __attribute__(Spec) /* empty */
# endif
#endif

#define YYOPTIONAL_LOC(Name) Name

#ifndef YYASSERT
# define YYASSERT(condition) ((void) ((condition) || (abort (), 0)))
#endif

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  14
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   5177

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  136
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  322
/* YYNRULES -- Number of rules.  */
#define YYNRULES  805
/* YYNRULES -- Number of states.  */
#define YYNSTATES  1755
/* YYMAXRHS -- Maximum number of symbols on right-hand side of rule.  */
#define YYMAXRHS 25
/* YYMAXLEFT -- Maximum number of symbols to the left of a handle
   accessed by $0, $-1, etc., in any rule.  */
#define YYMAXLEFT 1

/* YYTRANSLATE(X) -- Bison symbol number corresponding to X.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   390

#define YYTRANSLATE(YYX)						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const unsigned char yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const unsigned short int yyprhs[] =
{
       0,     0,     3,     5,     6,     9,    12,    14,    16,    18,
      20,    22,    25,    27,    29,    35,    39,    46,    52,    58,
      60,    64,    68,    70,    73,    77,    81,    85,    89,    93,
      95,    98,   101,   104,   106,   109,   113,   114,   117,   119,
     121,   123,   129,   134,   141,   148,   155,   162,   169,   177,
     185,   193,   195,   197,   199,   202,   203,   206,   208,   211,
     212,   218,   223,   224,   229,   230,   237,   238,   240,   242,
     245,   246,   251,   255,   259,   261,   265,   267,   272,   278,
     280,   284,   288,   290,   292,   294,   299,   304,   307,   310,
     313,   316,   318,   321,   325,   328,   331,   334,   337,   340,
     343,   346,   349,   352,   355,   358,   361,   364,   366,   368,
     370,   372,   374,   376,   378,   380,   382,   384,   385,   390,
     394,   395,   401,   402,   408,   409,   414,   415,   421,   422,
     429,   433,   434,   439,   440,   446,   447,   454,   455,   461,
     462,   468,   472,   473,   479,   480,   485,   489,   490,   496,
     497,   504,   510,   517,   518,   524,   525,   532,   538,   545,
     546,   551,   552,   556,   557,   560,   565,   569,   575,   580,
     582,   584,   586,   588,   590,   592,   595,   598,   601,   603,
     607,   611,   615,   619,   623,   627,   634,   641,   649,   657,
     666,   674,   682,   690,   699,   707,   711,   712,   714,   716,
     718,   722,   726,   727,   732,   736,   742,   747,   751,   752,
     757,   761,   763,   766,   772,   778,   782,   786,   790,   794,
     799,   802,   804,   808,   810,   812,   814,   816,   818,   822,
     825,   830,   832,   836,   838,   842,   844,   846,   850,   852,
     856,   859,   861,   863,   867,   869,   873,   877,   881,   883,
     889,   895,   905,   918,   930,   934,   936,   937,   939,   941,
     943,   945,   947,   948,   950,   951,   953,   955,   958,   960,
     963,   966,   970,   978,   985,   996,  1006,  1010,  1012,  1015,
    1017,  1020,  1022,  1024,  1027,  1029,  1033,  1035,  1041,  1045,
    1050,  1057,  1065,  1066,  1068,  1069,  1071,  1072,  1074,  1078,
    1082,  1086,  1090,  1092,  1096,  1101,  1107,  1111,  1115,  1122,
    1130,  1136,  1140,  1142,  1144,  1146,  1148,  1151,  1154,  1157,
    1160,  1163,  1166,  1169,  1172,  1177,  1183,  1187,  1189,  1193,
    1195,  1198,  1203,  1207,  1212,  1218,  1222,  1226,  1228,  1232,
    1234,  1238,  1245,  1251,  1256,  1260,  1263,  1265,  1267,  1269,
    1270,  1271,  1278,  1279,  1284,  1286,  1290,  1295,  1301,  1303,
    1305,  1307,  1311,  1313,  1315,  1319,  1325,  1330,  1335,  1340,
    1344,  1347,  1349,  1351,  1353,  1357,  1360,  1362,  1366,  1369,
    1370,  1375,  1379,  1381,  1384,  1386,  1388,  1390,  1392,  1394,
    1396,  1398,  1404,  1412,  1419,  1421,  1424,  1428,  1432,  1435,
    1449,  1453,  1459,  1463,  1467,  1473,  1484,  1495,  1497,  1499,
    1503,  1507,  1509,  1513,  1517,  1519,  1522,  1525,  1528,  1531,
    1534,  1538,  1543,  1550,  1554,  1558,  1562,  1566,  1570,  1572,
    1576,  1580,  1585,  1590,  1592,  1595,  1600,  1607,  1613,  1617,
    1619,  1621,  1623,  1626,  1629,  1633,  1638,  1643,  1645,  1647,
    1649,  1651,  1653,  1655,  1657,  1659,  1665,  1670,  1674,  1676,
    1680,  1687,  1693,  1695,  1701,  1706,  1710,  1715,  1717,  1721,
    1725,  1728,  1732,  1733,  1737,  1741,  1746,  1750,  1754,  1757,
    1763,  1768,  1773,  1776,  1779,  1782,  1785,  1788,  1792,  1794,
    1797,  1801,  1808,  1814,  1819,  1822,  1824,  1827,  1831,  1835,
    1842,  1848,  1851,  1856,  1860,  1861,  1866,  1872,  1877,  1880,
    1884,  1888,  1891,  1893,  1896,  1900,  1903,  1906,  1909,  1912,
    1915,  1919,  1922,  1926,  1929,  1932,  1935,  1938,  1940,  1942,
    1946,  1949,  1952,  1955,  1958,  1961,  1964,  1966,  1969,  1972,
    1977,  1979,  1981,  1982,  1989,  1993,  1996,  2001,  2004,  2009,
    2013,  2018,  2020,  2023,  2026,  2028,  2032,  2036,  2039,  2045,
    2051,  2059,  2067,  2072,  2078,  2086,  2091,  2098,  2105,  2112,
    2116,  2123,  2127,  2129,  2132,  2136,  2140,  2143,  2146,  2152,
    2158,  2168,  2171,  2177,  2183,  2193,  2199,  2205,  2208,  2210,
    2214,  2217,  2219,  2223,  2226,  2230,  2232,  2235,  2237,  2239,
    2241,  2243,  2245,  2249,  2253,  2257,  2261,  2265,  2269,  2272,
    2275,  2278,  2282,  2289,  2295,  2302,  2304,  2308,  2310,  2314,
    2318,  2320,  2325,  2330,  2332,  2336,  2338,  2344,  2352,  2366,
    2392,  2394,  2398,  2402,  2409,  2415,  2426,  2436,  2442,  2450,
    2452,  2454,  2456,  2462,  2468,  2471,  2473,  2475,  2477,  2479,
    2481,  2483,  2485,  2487,  2489,  2491,  2493,  2495,  2497,  2509,
    2519,  2531,  2541,  2555,  2567,  2579,  2589,  2594,  2606,  2616,
    2620,  2634,  2646,  2658,  2668,  2680,  2690,  2702,  2712,  2724,
    2738,  2750,  2758,  2766,  2776,  2778,  2782,  2784,  2786,  2788,
    2790,  2795,  2798,  2802,  2804,  2806,  2808,  2810,  2812,  2817,
    2820,  2823,  2826,  2829,  2831,  2835,  2837,  2839,  2843,  2850,
    2854,  2856,  2860,  2865,  2870,  2874,  2876,  2878,  2882,  2887,
    2891,  2896,  2898,  2902,  2907,  2912,  2914,  2918,  2921,  2926,
    2932,  2934,  2937,  2941,  2943,  2945,  2947,  2949,  2952,  2956,
    2958,  2962,  2967,  2973,  2975,  2981,  2983,  2985,  2987,  2989,
    2991,  2993,  2995,  2998,  3000,  3002,  3005,  3007,  3009,  3011,
    3013,  3016,  3020,  3023,  3027,  3029,  3031,  3033,  3035,  3038,
    3041,  3044,  3047,  3049,  3051,  3053,  3055,  3057,  3059,  3061,
    3063,  3066,  3070,  3074,  3079,  3082,  3084,  3086,  3088,  3090,
    3092,  3094,  3097,  3101,  3105,  3106,  3110,  3114,  3116,  3120,
    3124,  3126,  3128,  3132,  3134,  3136
};

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
static const short int yyrhs[] =
{
     137,     0,    -1,   138,    -1,    -1,   139,   156,    -1,   138,
     156,    -1,   180,    -1,   141,    -1,   144,    -1,   142,    -1,
     145,    -1,   109,    10,    -1,   455,    -1,     7,    -1,   112,
      23,   143,    24,    10,    -1,   112,     1,    10,    -1,   110,
     146,    10,   147,   148,   111,    -1,   110,   146,    10,   147,
     111,    -1,   110,   146,    10,     1,   111,    -1,   456,    -1,
     127,   150,    10,    -1,   127,     1,    10,    -1,   149,    -1,
     148,   149,    -1,    82,   153,    10,    -1,   151,   153,    10,
      -1,   151,   154,    10,    -1,   152,   153,    10,    -1,   152,
     154,    10,    -1,   455,    -1,   150,   455,    -1,   117,   455,
      -1,   118,   455,    -1,   116,    -1,   116,   150,    -1,   115,
     455,   155,    -1,    -1,    15,   110,    -1,   157,    -1,   312,
      -1,   140,    -1,   452,   160,    10,   163,   161,    -1,   452,
     160,    10,   161,    -1,   452,   160,   164,    10,   163,   161,
      -1,   452,   160,   170,    10,   163,   161,    -1,   452,   160,
     172,    10,   163,   161,    -1,   452,   160,   172,    10,     1,
     161,    -1,   452,   160,   170,    10,     1,   161,    -1,   452,
     160,    16,    17,    10,   163,   161,    -1,   452,   160,   164,
     170,    10,   163,   161,    -1,   452,   160,   164,   172,    10,
     163,   161,    -1,   456,    -1,    52,    -1,    54,    -1,   159,
     158,    -1,    -1,   162,    53,    -1,   179,    -1,   163,   179,
      -1,    -1,    29,    16,   165,   166,    17,    -1,    29,    16,
       1,    17,    -1,    -1,    38,   167,   169,   243,    -1,    -1,
     166,    98,    38,   168,   169,   243,    -1,    -1,   246,    -1,
     448,    -1,   448,   246,    -1,    -1,    16,   171,   173,    17,
      -1,    16,     1,    17,    -1,    16,   260,    17,    -1,   174,
      -1,   173,    98,   174,    -1,   175,    -1,    11,   175,    16,
      17,    -1,    11,   175,    16,   175,    17,    -1,   177,    -1,
      37,   176,    36,    -1,   176,    98,   177,    -1,   177,    -1,
     456,    -1,     8,    -1,   456,    18,   440,    19,    -1,   456,
      18,   436,    19,    -1,   452,   199,    -1,   452,   202,    -1,
     452,   205,    -1,     1,    10,    -1,   180,    -1,   178,    10,
      -1,   178,     1,    10,    -1,   452,   300,    -1,   452,   184,
      -1,   452,   190,    -1,   452,   380,    -1,   452,   196,    -1,
     452,   181,    -1,   452,   182,    -1,   452,   338,    -1,   452,
     274,    -1,   452,   334,    -1,   452,   281,    -1,   452,   341,
      -1,   452,   342,    -1,   215,    -1,   221,    -1,   214,    -1,
     218,    -1,   222,    -1,   219,    -1,   212,    -1,   213,    -1,
     255,    -1,   247,    -1,    -1,    51,   183,   237,    10,    -1,
      51,     1,    10,    -1,    -1,   103,   246,   185,   237,    10,
      -1,    -1,   103,   269,   186,   237,    10,    -1,    -1,   103,
     187,   237,    10,    -1,    -1,   103,   448,   188,   237,    10,
      -1,    -1,   103,   448,   246,   189,   237,    10,    -1,   103,
       1,    10,    -1,    -1,    38,   191,   237,    10,    -1,    -1,
      38,   269,   192,   237,    10,    -1,    -1,    38,   448,   246,
     193,   237,    10,    -1,    -1,    38,   246,   194,   237,    10,
      -1,    -1,    38,   448,   195,   237,    10,    -1,    38,     1,
      10,    -1,    -1,    87,   246,   197,   240,    10,    -1,    -1,
      87,   198,   240,    10,    -1,    87,     1,    10,    -1,    -1,
      40,   251,   264,   200,   456,    -1,    -1,    40,   211,   251,
     264,   201,   456,    -1,   199,    98,   251,   264,   456,    -1,
     199,    98,   211,   251,   264,   456,    -1,    -1,   101,   251,
     264,   203,   456,    -1,    -1,   101,   211,   251,   264,   204,
     456,    -1,   202,    98,   251,   264,   456,    -1,   202,    98,
     211,   251,   264,   456,    -1,    -1,    39,   210,   206,   456,
      -1,    -1,    39,   207,   456,    -1,    -1,    39,   208,    -1,
     205,    98,    39,   340,    -1,   205,    98,   456,    -1,   205,
      98,    39,   210,   456,    -1,   205,    98,    39,   456,    -1,
      47,    -1,   104,    -1,   211,    -1,   246,    -1,   448,    -1,
      46,    -1,   210,   102,    -1,   210,   246,    -1,   210,   209,
      -1,     3,    -1,    49,   231,    10,    -1,    49,     1,    10,
      -1,   108,   234,    10,    -1,   108,     1,    10,    -1,   104,
     241,    10,    -1,   104,     1,    10,    -1,     3,   216,   251,
     264,   236,    10,    -1,     3,   216,   251,   264,   235,    10,
      -1,     3,   216,   251,   264,   227,   235,    10,    -1,     3,
     216,   251,   264,   227,   236,    10,    -1,     3,   225,   216,
     251,   264,   227,   235,    10,    -1,     3,   225,   216,   251,
     264,   235,    10,    -1,     3,   225,   216,   251,   264,   236,
      10,    -1,     3,   226,   216,   251,   264,   236,    10,    -1,
       3,   226,   216,   251,   264,   227,   236,    10,    -1,     3,
     226,   216,   251,   264,   235,    10,    -1,     3,     1,    10,
      -1,    -1,   217,    -1,    44,    -1,    45,    -1,    48,   241,
      10,    -1,    48,     1,    10,    -1,    -1,   126,   220,   241,
      10,    -1,   126,     1,    10,    -1,    46,   251,   246,   241,
      10,    -1,    46,   251,   241,    10,    -1,    46,     1,    10,
      -1,    -1,    47,   223,   241,    10,    -1,    47,     1,    10,
      -1,   245,    -1,   224,   245,    -1,    16,     4,    98,     5,
      17,    -1,    16,     5,    98,     4,    17,    -1,    16,     1,
      17,    -1,    16,    41,    17,    -1,    16,    42,    17,    -1,
      16,    43,    17,    -1,    29,    16,   228,    17,    -1,    29,
     230,    -1,   230,    -1,   228,    98,   230,    -1,   227,    -1,
     441,    -1,   232,    -1,   233,    -1,   456,    -1,   232,    98,
     456,    -1,   456,   224,    -1,   233,    98,   456,   224,    -1,
     456,    -1,   234,    98,   456,    -1,   242,    -1,   235,    98,
     242,    -1,   231,    -1,   243,    -1,   237,    98,   243,    -1,
     456,    -1,   456,    22,   440,    -1,   456,   224,    -1,   238,
      -1,   244,    -1,   240,    98,   244,    -1,   239,    -1,   241,
      98,   239,    -1,   456,    22,   440,    -1,   455,    22,   440,
      -1,   243,    -1,    18,   435,    15,   435,    19,    -1,    18,
     443,    15,   442,    19,    -1,    63,   250,   251,   249,   248,
      10,   252,   359,    64,    -1,    63,   250,   251,   249,   248,
      16,   254,    17,    10,   257,   359,    64,    -1,    63,   250,
     251,   249,   248,    16,   254,    17,    10,   359,    64,    -1,
      63,     1,    64,    -1,   456,    -1,    -1,   246,    -1,   104,
      -1,    48,    -1,    47,    -1,   126,    -1,    -1,   100,    -1,
      -1,   102,    -1,   253,    -1,   252,   253,    -1,   270,    -1,
     267,    10,    -1,   452,   268,    -1,   254,    98,   268,    -1,
      61,   250,   256,    10,   258,   356,    62,    -1,    61,   250,
     256,    10,   356,    62,    -1,    61,   250,   256,    16,   260,
      17,    10,   257,   356,    62,    -1,    61,   250,   256,    16,
     260,    17,    10,   356,    62,    -1,    61,     1,    62,    -1,
     456,    -1,   257,   270,    -1,   270,    -1,   258,   259,    -1,
     259,    -1,   270,    -1,   261,    10,    -1,   261,    -1,   260,
      98,   261,    -1,   262,    -1,   266,   251,   263,   264,   456,
      -1,   266,   269,   456,    -1,   262,    98,   269,   456,    -1,
     262,    98,   251,   263,   264,   456,    -1,   262,    98,   266,
     251,   263,   264,   456,    -1,    -1,    46,    -1,    -1,   246,
      -1,    -1,     3,    -1,   452,    40,   265,    -1,   452,    39,
     265,    -1,   452,   101,   265,    -1,   266,    98,   456,    -1,
     268,    -1,   267,    98,   268,    -1,   101,   251,   264,   456,
      -1,   101,    46,   251,   264,   456,    -1,   101,   269,   456,
      -1,   268,    98,   456,    -1,   268,    98,   101,   251,   264,
     456,    -1,   268,    98,   101,    46,   251,   264,   456,    -1,
     268,    98,   101,   269,   456,    -1,   101,     1,    10,    -1,
      47,    -1,    48,    -1,   126,    -1,   104,    -1,   452,   271,
      -1,   452,   212,    -1,   452,   214,    -1,   452,   184,    -1,
     452,   190,    -1,   452,   218,    -1,   452,   219,    -1,   452,
     222,    -1,    46,   246,   272,    10,    -1,    46,   448,   246,
     272,    10,    -1,    46,   272,    10,    -1,   273,    -1,   272,
      98,   273,    -1,   456,    -1,   456,   224,    -1,     6,   227,
     276,    10,    -1,     6,   276,    10,    -1,     6,   225,   276,
      10,    -1,     6,   225,   227,   276,    10,    -1,     6,   275,
      10,    -1,     6,     1,    10,    -1,   278,    -1,   275,    98,
     278,    -1,   277,    -1,   276,    98,   277,    -1,   279,    16,
     280,    98,   437,    17,    -1,    16,   280,    98,   437,    17,
      -1,   279,    16,   280,    17,    -1,    16,   280,    17,    -1,
     456,   246,    -1,   456,    -1,   447,    -1,   282,    -1,    -1,
      -1,   456,   283,   287,   286,   284,    10,    -1,    -1,   456,
     286,   285,    10,    -1,   293,    -1,   286,    98,   293,    -1,
      29,    16,   288,    17,    -1,    29,    16,     1,    17,    10,
      -1,   289,    -1,   291,    -1,   290,    -1,   289,    98,   290,
      -1,   440,    -1,   292,    -1,   291,    98,   292,    -1,    11,
     456,    16,   440,    17,    -1,    11,   456,    16,    17,    -1,
     294,    16,   295,    17,    -1,   294,    16,     1,    17,    -1,
     294,    16,    17,    -1,   456,   264,    -1,   296,    -1,   298,
      -1,   297,    -1,   296,    98,   297,    -1,   452,   440,    -1,
     299,    -1,   298,    98,   299,    -1,   452,   292,    -1,    -1,
     106,   301,   302,   107,    -1,   106,     1,   107,    -1,   304,
      -1,   302,   304,    -1,   304,    -1,    10,    -1,   305,    -1,
     306,    -1,   309,    -1,   311,    -1,   180,    -1,    65,    16,
     440,    17,   303,    -1,    65,    16,   440,    17,   303,    79,
     303,    -1,    66,    16,   440,    17,   307,    80,    -1,   308,
      -1,   307,   308,    -1,   437,    15,   303,    -1,    82,    15,
     303,    -1,    82,   303,    -1,    71,    16,   310,    10,   440,
      10,   310,    17,    81,    15,   456,   302,    84,    -1,   456,
      22,   440,    -1,    81,    15,   456,   302,    84,    -1,    81,
     302,    84,    -1,    81,     1,    84,    -1,    81,    15,   456,
       1,    84,    -1,   452,    56,   313,    16,   314,    17,    10,
     317,   322,    55,    -1,   452,    56,   313,    16,   315,    17,
      10,   317,   322,    55,    -1,   456,    -1,   456,    -1,   314,
      98,   456,    -1,   319,    98,   316,    -1,   320,    -1,   316,
      98,   320,    -1,   316,    98,   456,    -1,   318,    -1,   317,
     318,    -1,   319,    10,    -1,   320,    10,    -1,   321,    10,
      -1,   318,    10,    -1,   452,    39,   456,    -1,   452,    39,
      46,   456,    -1,   452,    39,    46,   456,    22,   440,    -1,
     319,    98,   456,    -1,   452,   101,   456,    -1,   320,    98,
     456,    -1,   452,    46,   456,    -1,   321,    98,   456,    -1,
     323,    -1,    58,   324,    59,    -1,    58,     1,    59,    -1,
     326,    58,   324,    59,    -1,   326,    58,     1,    59,    -1,
     325,    -1,   324,   325,    -1,   328,    15,   332,    10,    -1,
     328,    15,   330,    15,   331,    10,    -1,    57,   456,    22,
     327,    10,    -1,    57,     1,    10,    -1,     8,    -1,   329,
      -1,   333,    -1,   328,   329,    -1,   328,   333,    -1,    16,
     333,    17,    -1,    16,   333,   333,    17,    -1,   329,    16,
     333,    17,    -1,   333,    -1,   332,    -1,    14,    -1,   333,
      -1,     8,    -1,    99,    -1,    26,    -1,    12,    -1,   456,
     225,   229,   335,    10,    -1,   456,   225,   335,    10,    -1,
     456,   335,    10,    -1,   336,    -1,   335,    98,   336,    -1,
     337,    16,   280,    98,   437,    17,    -1,    16,   280,    98,
     437,    17,    -1,   294,    -1,    50,   225,   227,   339,    10,
      -1,    50,   227,   339,    10,    -1,    50,   339,    10,    -1,
      50,   225,   339,    10,    -1,   340,    -1,   339,    98,   340,
      -1,   447,    22,   440,    -1,    57,   357,    -1,    57,     1,
      84,    -1,    -1,    60,   343,   357,    -1,   342,     1,    84,
      -1,   447,    22,   362,   440,    -1,   447,    22,   440,    -1,
     447,    22,   362,    -1,   344,     1,    -1,   447,    23,    22,
     362,   440,    -1,   447,    23,    22,   440,    -1,   447,    23,
      22,   362,    -1,   345,     1,    -1,    50,   351,    -1,    76,
     447,    -1,    74,   340,    -1,    75,   447,    -1,   447,    22,
     440,    -1,   359,    -1,   452,    10,    -1,    81,   356,    84,
      -1,    81,    15,   456,   257,   356,    84,    -1,    81,    15,
     456,   350,    84,    -1,    81,   257,   356,    84,    -1,    81,
      84,    -1,   359,    -1,   350,   359,    -1,   447,    22,   440,
      -1,    83,   356,    72,    -1,    83,    15,   456,   257,   356,
      72,    -1,    83,    15,   456,   356,    72,    -1,    83,    72,
      -1,    83,    15,     1,    72,    -1,    83,     1,    72,    -1,
      -1,    81,   354,   356,    84,    -1,    81,   355,   257,   356,
      84,    -1,    81,   355,   356,    84,    -1,    81,    84,    -1,
      81,   355,    84,    -1,    81,     1,    84,    -1,    15,   456,
      -1,   357,    -1,   356,   357,    -1,   452,   344,    10,    -1,
     452,   373,    -1,   452,   371,    -1,   452,   364,    -1,   452,
     366,    -1,   452,   377,    -1,   452,   345,    10,    -1,   452,
     352,    -1,   452,   346,    10,    -1,   452,   369,    -1,   452,
     353,    -1,   452,   378,    -1,   452,   370,    -1,   357,    -1,
      10,    -1,   452,   347,    10,    -1,   452,   360,    -1,   452,
     372,    -1,   452,   376,    -1,   452,   349,    -1,   452,   364,
      -1,   452,   378,    -1,   373,    -1,    29,     8,    -1,    29,
      12,    -1,    29,    16,   441,    17,    -1,   361,    -1,   365,
      -1,    -1,    70,    16,   440,   363,    17,   365,    -1,    77,
     456,    10,    -1,    31,   456,    -1,    31,    16,   368,    17,
      -1,    31,    26,    -1,    31,    16,    26,    17,    -1,    31,
     128,    17,    -1,    14,    24,   456,    10,    -1,   440,    -1,
      95,   440,    -1,    96,   440,    -1,   367,    -1,   368,    98,
     367,    -1,   368,     6,   367,    -1,   362,   358,    -1,    73,
      16,   440,    17,   358,    -1,    65,    16,   440,    17,   358,
      -1,    65,    16,   440,    17,   358,    79,   358,    -1,    65,
      16,   440,    17,     1,    79,   358,    -1,    65,    16,     1,
      17,    -1,    65,    16,   440,    17,   348,    -1,    65,    16,
     440,    17,   348,    79,   348,    -1,    65,    16,     1,    17,
      -1,    66,    16,   440,    17,   374,    80,    -1,    66,    16,
     440,    17,     1,    80,    -1,    68,    16,   440,    17,   374,
      80,    -1,    68,     1,    80,    -1,    67,    16,   440,    17,
     374,    80,    -1,    67,     1,    80,    -1,   375,    -1,   374,
     375,    -1,   437,    15,   358,    -1,    82,    15,   358,    -1,
      82,   358,    -1,    69,   359,    -1,    70,    16,   440,    17,
     359,    -1,    78,    16,   440,    17,   359,    -1,    71,    16,
     351,    10,   440,    10,   351,    17,   359,    -1,    69,   357,
      -1,    70,    16,   440,    17,   357,    -1,    78,    16,   440,
      17,   357,    -1,    71,    16,   351,    10,   440,    10,   351,
      17,   357,    -1,   455,    16,   379,    17,    10,    -1,   455,
      16,     1,    17,    10,    -1,   455,    10,    -1,   440,    -1,
     379,    98,   440,    -1,   379,    98,    -1,    98,    -1,    85,
     381,    86,    -1,    85,    86,    -1,    85,     1,    86,    -1,
     382,    -1,   381,   382,    -1,   196,    -1,   385,    -1,   403,
      -1,   383,    -1,   384,    -1,   113,   389,    10,    -1,   114,
     389,    10,    -1,   114,     1,    10,    -1,   119,   389,    10,
      -1,   120,   389,    10,    -1,   120,     1,    10,    -1,   386,
      10,    -1,   395,    10,    -1,   401,    10,    -1,   387,    22,
     392,    -1,    16,   391,    22,    24,   391,    17,    -1,    16,
     388,   390,   389,    17,    -1,    16,   388,    26,    24,   389,
      17,    -1,   391,    -1,   388,    98,   391,    -1,   388,    -1,
     402,    22,    24,    -1,   402,    26,    24,    -1,   456,    -1,
     456,    18,   436,    19,    -1,   456,    18,   440,    19,    -1,
     393,    -1,    16,   393,    17,    -1,   394,    -1,    16,   394,
      98,   394,    17,    -1,    16,   394,    98,   394,    98,   394,
      17,    -1,    16,   394,    98,   394,    98,   394,    98,   394,
      98,   394,    98,   394,    17,    -1,    16,   394,    98,   394,
      98,   394,    98,   394,    98,   394,    98,   394,    98,   394,
      98,   394,    98,   394,    98,   394,    98,   394,    98,   394,
      17,    -1,   441,    -1,   396,    22,   392,    -1,   397,    22,
     392,    -1,    16,   400,   391,    22,    24,   398,    -1,    16,
     391,    22,    24,   398,    -1,    16,   400,   388,    26,    24,
     389,   449,    15,   399,    17,    -1,    16,   388,    26,    24,
     389,   449,    15,   399,    17,    -1,   391,   449,    15,   399,
      17,    -1,    16,   391,   449,    15,   399,    17,    17,    -1,
     440,    -1,    95,    -1,    96,    -1,    65,    16,   440,    17,
     386,    -1,    65,    16,   440,    17,   395,    -1,   125,   386,
      -1,   449,    -1,   407,    -1,   408,    -1,   409,    -1,   410,
      -1,   411,    -1,   412,    -1,   415,    -1,   414,    -1,   413,
      -1,   406,    -1,   404,    -1,   405,    -1,   122,    16,   419,
      98,   420,    98,   418,    98,   416,    17,    10,    -1,   122,
      16,   419,    98,   420,    98,   418,    17,    10,    -1,   123,
      16,   419,    98,   420,    98,   418,    98,   416,    17,    10,
      -1,   123,    16,   419,    98,   420,    98,   418,    17,    10,
      -1,   124,    16,   421,    98,   421,    98,   418,    98,   418,
      98,   416,    17,    10,    -1,   124,    16,   421,    98,   421,
      98,   418,    98,   418,    17,    10,    -1,    88,    16,   419,
      98,   420,    98,   418,    98,   416,    17,    10,    -1,    88,
      16,   419,    98,   420,    98,   418,    17,    10,    -1,    88,
      16,     1,    17,    -1,    89,    16,   419,    98,   420,    98,
     418,    98,   416,    17,    10,    -1,    89,    16,   419,    98,
     420,    98,   418,    17,    10,    -1,    89,     1,    10,    -1,
      94,    16,   421,    98,   421,    98,   418,    98,   418,    98,
     416,    17,    10,    -1,    94,    16,   421,    98,   421,    98,
     418,    98,   418,    17,    10,    -1,    93,    16,   419,    98,
     420,    98,   418,    98,   416,    17,    10,    -1,    93,    16,
     419,    98,   420,    98,   418,    17,    10,    -1,   121,    16,
     419,    98,   420,    98,   418,    98,   416,    17,    10,    -1,
     121,    16,   419,    98,   420,    98,   418,    17,    10,    -1,
      92,    16,   419,    98,   420,    98,   418,    98,   416,    17,
      10,    -1,    92,    16,   419,    98,   420,    98,   418,    17,
      10,    -1,   105,    16,   421,    98,   421,    98,   441,    98,
     441,    17,    10,    -1,   105,    16,   421,    98,   421,    98,
     441,    98,   441,    98,   416,    17,    10,    -1,    90,    16,
     422,    98,   418,    98,   440,    98,   416,    17,    10,    -1,
      90,    16,   422,    98,   418,    17,    10,    -1,    91,    16,
     422,    98,   418,    17,    10,    -1,    91,    16,   422,    98,
     418,    98,   416,    17,    10,    -1,   417,    -1,   416,    98,
     417,    -1,   440,    -1,   440,    -1,   421,    -1,   421,    -1,
     423,   427,   134,   428,    -1,   423,   427,    -1,   427,   134,
     428,    -1,   427,    -1,   421,    -1,    95,    -1,    96,    -1,
     424,    -1,    97,    18,   426,    19,    -1,     1,    19,    -1,
       8,     8,    -1,     8,    12,    -1,    12,     8,    -1,   425,
      -1,   426,    98,   425,    -1,   391,    -1,   441,    -1,    37,
     437,    36,    -1,    37,   440,    37,   437,    36,    36,    -1,
      37,   431,    36,    -1,   432,    -1,   431,    98,   432,    -1,
     456,    18,   436,    19,    -1,   456,    18,   440,    19,    -1,
     456,   434,   436,    -1,   430,    -1,   456,    -1,    16,   437,
      17,    -1,   451,    16,   437,    17,    -1,    18,   440,    19,
      -1,   434,    18,   440,    19,    -1,   440,    -1,   440,    15,
     442,    -1,   440,    13,    15,   444,    -1,   440,    14,    15,
     444,    -1,   440,    -1,   437,    98,   440,    -1,   455,   434,
      -1,   455,    18,   436,    19,    -1,   455,   434,    18,   436,
      19,    -1,   455,    -1,   455,   433,    -1,    16,   441,    17,
      -1,   429,    -1,   450,    -1,   438,    -1,     7,    -1,   445,
     438,    -1,   445,   451,   438,    -1,   439,    -1,   440,   446,
     439,    -1,   440,   446,   451,   439,    -1,   440,    99,   440,
      15,   439,    -1,   440,    -1,   440,    15,   440,    15,   441,
      -1,   440,    -1,   440,    -1,   440,    -1,    35,    -1,    20,
      -1,    25,    -1,    34,    -1,    34,    20,    -1,   132,    -1,
      21,    -1,    34,    21,    -1,   449,    -1,   133,    -1,    27,
      -1,   449,    -1,    22,    22,    -1,    22,    22,    22,    -1,
      35,    22,    -1,    35,    22,    22,    -1,   131,    -1,   130,
      -1,    24,    -1,    23,    -1,    23,    23,    -1,    23,    22,
      -1,    24,    22,    -1,    24,    24,    -1,    26,    -1,    28,
      -1,    25,    -1,    20,    -1,    21,    -1,    34,    -1,   132,
      -1,   133,    -1,    26,    26,    -1,    23,    23,    23,    -1,
      24,    24,    24,    -1,   456,    18,   436,    19,    -1,   456,
     434,    -1,   430,    -1,   455,    -1,   102,    -1,    14,    -1,
      13,    -1,     8,    -1,   449,     8,    -1,   128,   453,   129,
      -1,   128,     1,   129,    -1,    -1,   128,   453,   129,    -1,
     128,     1,   129,    -1,   454,    -1,   453,    98,   454,    -1,
     456,    22,   440,    -1,   456,    -1,   456,    -1,   455,    11,
     456,    -1,   457,    -1,    12,    -1,    32,   457,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const unsigned short int yyrline[] =
{
       0,   133,   133,   135,   135,   136,   137,   145,   147,   148,
     149,   152,   165,   166,   169,   170,   176,   177,   178,   181,
     191,   192,   197,   198,   202,   203,   204,   205,   206,   210,
     211,   215,   218,   222,   223,   226,   229,   230,   237,   238,
     241,   245,   246,   247,   249,   250,   251,   252,   253,   254,
     255,   260,   263,   264,   266,   285,   285,   293,   294,   301,
     301,   302,   305,   305,   306,   306,   309,   310,   311,   312,
     317,   317,   318,   322,   326,   327,   330,   331,   332,   335,
     336,   339,   340,   343,   344,   345,   346,   349,   350,   351,
     352,   359,   360,   361,   362,   363,   364,   365,   366,   370,
     371,   372,   373,   374,   375,   376,   377,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   393,   393,   394,
     402,   402,   403,   403,   404,   404,   405,   405,   406,   406,
     407,   410,   410,   411,   411,   412,   412,   413,   413,   414,
     414,   415,   418,   418,   419,   419,   420,   427,   427,   428,
     428,   429,   430,   433,   433,   434,   434,   435,   436,   441,
     441,   442,   442,   444,   444,   446,   447,   448,   449,   457,
     458,   462,   463,   464,   465,   466,   467,   468,   473,   477,
     478,   481,   482,   485,   486,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   504,   505,   509,   510,
     513,   514,   516,   516,   517,   520,   521,   522,   525,   525,
     526,   529,   530,   537,   538,   539,   544,   545,   546,   555,
     556,   559,   560,   563,   566,   573,   574,   577,   578,   582,
     583,   587,   588,   591,   592,   595,   598,   599,   604,   605,
     606,   609,   613,   614,   617,   620,   628,   630,   637,   645,
     648,   656,   664,   668,   671,   675,   688,   689,   690,   691,
     692,   693,   697,   698,   701,   702,   705,   706,   710,   711,
     715,   716,   724,   726,   728,   730,   732,   735,   747,   748,
     751,   752,   756,   757,   761,   762,   767,   771,   776,   780,
     785,   790,   798,   799,   801,   802,   804,   805,   808,   809,
     810,   811,   815,   816,   819,   820,   821,   822,   823,   824,
     825,   826,   830,   831,   832,   833,   840,   841,   842,   843,
     844,   845,   846,   847,   850,   851,   852,   856,   857,   860,
     861,   868,   869,   870,   871,   872,   873,   876,   877,   880,
     881,   886,   887,   892,   893,   896,   897,   905,   912,   915,
     918,   915,   919,   919,   923,   924,   927,   928,   930,   931,
     934,   935,   938,   941,   942,   946,   947,   951,   952,   953,
     956,   976,   977,   980,   981,   984,   988,   989,   992,  1002,
    1002,  1003,  1006,  1007,  1011,  1012,  1016,  1017,  1018,  1019,
    1020,  1023,  1024,  1027,  1030,  1031,  1034,  1035,  1036,  1040,
    1043,  1046,  1047,  1048,  1049,  1057,  1059,  1064,  1086,  1087,
    1089,  1092,  1093,  1094,  1097,  1098,  1101,  1102,  1103,  1105,
    1108,  1109,  1110,  1111,  1114,  1115,  1117,  1118,  1124,  1128,
    1129,  1130,  1131,  1135,  1136,  1139,  1140,  1145,  1146,  1149,
    1153,  1154,  1155,  1156,  1159,  1160,  1161,  1165,  1167,  1168,
    1171,  1174,  1175,  1176,  1177,  1185,  1186,  1187,  1190,  1191,
    1194,  1195,  1198,  1206,  1207,  1208,  1209,  1212,  1213,  1216,
    1219,  1220,  1223,  1223,  1236,  1240,  1241,  1242,  1243,  1246,
    1247,  1248,  1249,  1256,  1257,  1258,  1259,  1262,  1266,  1267,
    1275,  1276,  1277,  1278,  1279,  1284,  1285,  1288,  1291,  1292,
    1293,  1294,  1295,  1296,  1301,  1300,  1303,  1304,  1305,  1306,
    1307,  1310,  1319,  1320,  1328,  1329,  1330,  1331,  1332,  1333,
    1334,  1335,  1336,  1337,  1338,  1339,  1340,  1343,  1344,  1348,
    1349,  1350,  1351,  1352,  1353,  1354,  1357,  1363,  1364,  1365,
    1368,  1369,  1370,  1370,  1373,  1376,  1377,  1378,  1379,  1380,
    1383,  1386,  1387,  1388,  1391,  1392,  1393,  1396,  1398,  1404,
    1405,  1406,  1407,  1410,  1411,  1412,  1418,  1419,  1420,  1421,
    1422,  1423,  1427,  1428,  1432,  1433,  1434,  1441,  1442,  1443,
    1444,  1448,  1449,  1450,  1451,  1459,  1460,  1461,  1464,  1465,
    1466,  1467,  1474,  1475,  1476,  1480,  1481,  1485,  1486,  1487,
    1488,  1489,  1493,  1494,  1495,  1499,  1500,  1501,  1508,  1509,
    1510,  1514,  1519,  1520,  1521,  1524,  1525,  1528,  1531,  1532,
    1542,  1543,  1544,  1548,  1549,  1553,  1554,  1555,  1556,  1557,
    1565,  1568,  1569,  1573,  1574,  1578,  1580,  1586,  1587,  1591,
    1593,  1594,  1598,  1599,  1600,  1604,  1613,  1614,  1615,  1616,
    1617,  1618,  1619,  1620,  1621,  1622,  1623,  1624,  1628,  1629,
    1632,  1633,  1637,  1638,  1642,  1643,  1644,  1647,  1648,  1649,
    1653,  1654,  1657,  1658,  1660,  1661,  1665,  1666,  1669,  1670,
    1673,  1674,  1678,  1679,  1682,  1683,  1686,  1694,  1696,  1699,
    1702,  1703,  1704,  1705,  1708,  1712,  1713,  1714,  1717,  1718,
    1721,  1722,  1723,  1726,  1727,  1730,  1734,  1742,  1743,  1748,
    1750,  1751,  1754,  1755,  1756,  1757,  1758,  1767,  1768,  1776,
    1777,  1782,  1786,  1787,  1788,  1791,  1792,  1800,  1801,  1802,
    1803,  1804,  1805,  1806,  1808,  1812,  1813,  1814,  1815,  1818,
    1819,  1820,  1821,  1824,  1825,  1828,  1830,  1832,  1839,  1840,
    1841,  1842,  1843,  1844,  1845,  1846,  1847,  1848,  1852,  1853,
    1855,  1856,  1857,  1858,  1859,  1860,  1861,  1862,  1863,  1864,
    1865,  1866,  1867,  1868,  1869,  1870,  1871,  1872,  1873,  1874,
    1875,  1876,  1877,  1885,  1886,  1887,  1888,  1894,  1897,  1898,
    1902,  1903,  1914,  1915,  1918,  1919,  1920,  1923,  1924,  1927,
    1928,  1931,  1932,  1936,  1939,  1944
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "NET_TOK", "STR0_TOK", "STR1_TOK",
  "GATE_TOK", "STRING_TOK", "DIGIT_TOK", "UNDERSCORE_TOK", "SEM_TOK",
  "DOT_TOK", "LETTER_TOK", "PLUS_TOK", "MINUS_TOK", "COLON_TOK",
  "LBRACE_TOK", "RBRACE_TOK", "LBRACKET_TOK", "RBRACKET_TOK", "AND_TOK",
  "OR_TOK", "EQU_TOK", "GT_TOK", "LT_TOK", "NOT_TOK", "MULT_TOK",
  "PERCENTAL_TOK", "ENV_TOK", "PARA_TOK", "CHAR_TOK", "AT_TOK",
  "DOLLAR_TOK", "BASE_TOK", "SN_TOK", "EXCLAMATION_TOK", "RRAM_TOK",
  "LRAM_TOK", "PARAMETER_TOK", "OUTPUT_TOK", "INOUT_TOK", "SMALL_TOK",
  "MEDIUM_TOK", "LARGE_TOK", "VEC_TOK", "SCALAR_TOK", "REG_TOK",
  "TIME_TOK", "REAL_TOK", "EVENT_TOK", "ASSIGN_TOK", "DEFPARAM_TOK",
  "MODUL_TOK", "ENDMODUL_TOK", "MACRO_MODUL_TOK", "ENDPRIMITIVE_TOK",
  "PRIMITIVE_TOK", "INITIAL_TOK", "TABLE_TOK", "ENDTABLE_TOK",
  "ALWAYS_TOK", "TASK_TOK", "ENDTASK_TOK", "FUNC_TOK", "ENDFUNC_TOK",
  "IF_TOK", "CASE_TOK", "CASEX_TOK", "CASEZ_TOK", "FOREVER_TOK",
  "REPEAT_TOK", "FOR_TOK", "JOIN_TOK", "WAIT_TOK", "FORCE_TOK",
  "RELEASE_TOK", "DEASSIGN_TOK", "DISABLE_TOK", "WHILE_TOK", "ELSE_TOK",
  "ENDCASE_TOK", "BEGIN_TOK", "DEFAULT_TOK", "FORK_TOK", "END_TOK",
  "SPECIFY_TOK", "ENDSPECIFY_TOK", "SPECPARAM_TOK", "DSETUP_TOK",
  "DHOLD_TOK", "DWIDTH_TOK", "DPERIOD_TOK", "DSKEW_TOK", "DRECOVERY_TOK",
  "DSETUPHOLD_TOK", "POSEDGE_TOK", "NEGEDGE_TOK", "EDGE_TOK", "COMMA_TOK",
  "QUESTION_TOK", "AUTO_TOK", "INPUT_TOK", "SIGNED_TOK", "LOCALPARAM_TOK",
  "INTEGER_TOK", "NOCHANGE_TOK", "GENERATE_TOK", "ENDGENERATE_TOK",
  "GENVAR_TOK", "LIBRARY_TOK", "CONFIG_TOK", "ENDCONFIG_TOK",
  "INCLUDE_TOK", "PULSEON_DETECT_TOK", "PULSEONE_EVENT_TOK", "USE_TOK",
  "LIBLIST_TOK", "INSTANCE_TOK", "CELL_TOK", "SHOWCANCEL_TOK",
  "NOSHOWCANCEL_TOK", "REMOVAL_TOK", "FULLSKEW_TOK", "TIMESKEW_TOK",
  "RECREM_TOK", "IFNONE_TOK", "REALTIME_TOK", "DESIGN_TOK", "ATL_TOK",
  "ATR_TOK", "OOR_TOK", "AAND_TOK", "SNNOT_TOK", "NOTSN_TOK", "AAAND_TOK",
  "DEFINE_TOK", "$accept", "file", "lines", "$@1", "library_text",
  "library_descriptions", "library_declaration", "file_path_spec",
  "include_statement", "config_declaration", "identifier_conf",
  "design_statement", "config_rule_statement_list",
  "config_rule_statement", "aidentifier_list", "inst_clause",
  "cell_clause", "liblist_clause", "use_clause", "config", "description",
  "module_declaration", "name_of_module", "module_type", "module_keyword",
  "end_mod", "$@2", "module_option", "module_parameter_port_list", "$@3",
  "parameter_declaration_list", "$@4", "$@5", "signed_range",
  "list_of_ports", "$@6", "list_of_port_declarations", "port_list", "port",
  "port_expression", "port_reference_list", "port_reference",
  "port_declaration", "module_item", "module_or_generate_item",
  "module_or_generate_item_declaration", "parameter_override", "$@7",
  "local_parameter_declaration", "$@8", "$@9", "$@10", "$@11", "$@12",
  "parameter_declaration", "$@13", "$@14", "$@15", "$@16", "$@17",
  "specparam_declaration", "$@18", "$@19", "inout_declaration", "$@20",
  "$@21", "input_declaration", "$@22", "$@23", "output_declaration",
  "$@24", "$@25", "$@26", "output_var_type", "s_type", "net_type",
  "event_declaration", "genvar_declaration", "integer_declaration",
  "net_declaration", "xscalared", "scalared", "real_declaration",
  "realtime_declaration", "$@27", "reg_declaration", "time_declaration",
  "$@28", "dimension_list", "drive_strength", "charge_strength", "delay3",
  "delay_value_list", "delay2", "delay_value", "list_of_event_identifiers",
  "list_of_event_lists", "dim_list", "list_of_genvar_identifiers",
  "list_of_net_decl_assignments", "list_of_net_identifiers",
  "list_of_param_assignments", "real_type", "variable_type",
  "list_of_specparam_assignments", "list_of_variable_identifiers",
  "net_decl_assignment", "param_assignment", "specparam_assignment",
  "dimension", "range", "function_declaration", "name_of_function",
  "range_or_type", "automatic", "xsigned",
  "function_item_declaration_list", "function_item_declaration",
  "function_port_list", "task_declaration", "name_of_task",
  "block_item_declaration_list", "task_item_declaration_list",
  "task_item_declaration", "task_port_list", "task_port_item",
  "tf_port_declaration", "xreg", "xrange", "xnettype", "tf_port_dir",
  "tf_input_declaration_list", "tf_input_declaration", "task_port_type",
  "block_item_declaration", "block_reg_declaration",
  "list_of_block_variable_identifiers", "block_variable_type",
  "gate_instantiation", "pull_gate_instance_list",
  "cmos_switch_instance_list", "cmos_switch_instance",
  "pull_gate_instance", "name_of_gate_instance", "output_terminal",
  "module_instantiation", "module_identifier", "$@29", "$@30", "$@31",
  "module_instance_list", "parameter_value_assignment",
  "list_of_parameter_assignments", "ordered_parameter_assignment_list",
  "ordered_parameter_assignment", "named_parameter_assignment_list",
  "named_parameter_assignment", "module_instance", "identifier11",
  "list_of_port_connections", "ordered_port_connection_list",
  "ordered_port_connection", "named_port_connection_list",
  "named_port_connection", "generated_instantiation", "$@32",
  "generate_item_list", "generate_item_or_null", "generate_item",
  "generate_conditional_statement", "generate_case_statement",
  "genvar_module_case_item_list", "genvar_case_item",
  "generate_loop_statement", "genvar_assignment", "generate_block",
  "udp_declaration", "name_of_udp", "udp_port_list",
  "udp_declaration_port_list", "udp_input_declaration_list",
  "udp_port_declaration_list", "udp_port_declaration",
  "udp_output_declaration", "udp_input_declaration", "udp_reg_declaration",
  "udp_body", "combinational_body", "combinational_entry_list",
  "combinational_entry", "udp_initial_statement", "init_val",
  "edge_input_list", "edge_indicator", "current_state", "next_state",
  "output_symbol", "level_symbol", "udp_instantiation",
  "udp_instance_list", "udp_instance", "name_of_instance",
  "continuous_assign", "list_of_net_assignments", "net_assignment",
  "initial_construct", "always_construct", "$@33", "blocking_assignment",
  "nonblocking_assignment", "procedural_continuous_assignments",
  "function_blocking_assignment", "function_statement_or_null",
  "function_seq_block", "function_statement_list", "variable_assignment",
  "par_block", "seq_block", "$@34", "always_label", "statement_list",
  "statement", "statement_or_null", "function_statement",
  "function_case_statement", "delay_control", "delay_or_event_control",
  "$@35", "disable_statement", "event_control", "event_trigger",
  "event_expression", "event_expression_list",
  "procedural_timing_control_statement", "wait_statement",
  "conditional_statement", "function_conditional_statement",
  "case_statement", "case_item_list", "case_item",
  "function_loop_statement", "loop_statement", "system_task_enable",
  "expression_list_null", "specify_block", "specify_item_list",
  "specify_item", "pulsestyle_declaration", "showcancelled_declaration",
  "path_declaration", "simple_path_declaration",
  "parallel_path_description", "list_of_path_inputs",
  "list_of_path_outputs", "connection",
  "specify_input_terminal_descriptor", "path_delay_value",
  "list_of_path_delay_expressions", "path_delay_expression",
  "edge_sensitive_path_declaration",
  "parallel_edge_sensitive_path_description",
  "full_edge_sensitive_path_description", "example",
  "data_source_expression", "edge_identifier",
  "state_dependent_path_declaration", "polarity_operator",
  "system_timing_check", "fullskew_timing_check",
  "timingskew_timing_check", "recrem_timing_check", "setup_timing_check",
  "hold_timing_check", "setuphold_timing_check", "recovery_timing_check",
  "removal_timing_check", "skew_timing_check", "nochange_timing_check",
  "width_timing_check", "period_timing_check", "notify_register_list",
  "notify_register", "timing_check_limit", "data_event", "reference_event",
  "timing_check_event", "controlled_timing_check_event",
  "timing_check_event_control", "edge_control_specifier",
  "edge_descriptor", "edge_descriptor_list", "specify_terminal_descriptor",
  "timing_check_condition", "concatenation", "net_concatenation",
  "net_concatenation_value_list", "net_concatenation_value",
  "function_call", "expression_bracket_list",
  "dimension_constant_expression", "range_expression", "expression_list",
  "primary", "unprim", "expression", "mintypemax_expression",
  "lsb_constant_expression", "msb_constant_expression",
  "width_constant_expression", "unary_operator", "binary_operator",
  "net_lvalue", "signed", "pol_op", "number", "attribute_instance11",
  "attribute_instance", "attr_spec_list", "attr_spec", "simple_identifier",
  "identifier", "ident", 0
};
#endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const unsigned short int yyr1[] =
{
       0,   136,   137,   139,   138,   138,   138,   140,   141,   141,
     141,   142,   143,   143,   144,   144,   145,   145,   145,   146,
     147,   147,   148,   148,   149,   149,   149,   149,   149,   150,
     150,   151,   152,   153,   153,   154,   155,   155,   156,   156,
     156,   157,   157,   157,   157,   157,   157,   157,   157,   157,
     157,   158,   159,   159,   160,   162,   161,   163,   163,   165,
     164,   164,   167,   166,   168,   166,   169,   169,   169,   169,
     171,   170,   170,   172,   173,   173,   174,   174,   174,   175,
     175,   176,   176,   177,   177,   177,   177,   178,   178,   178,
     178,   179,   179,   179,   179,   179,   179,   179,   179,   180,
     180,   180,   180,   180,   180,   180,   180,   181,   181,   181,
     181,   181,   181,   181,   181,   181,   181,   183,   182,   182,
     185,   184,   186,   184,   187,   184,   188,   184,   189,   184,
     184,   191,   190,   192,   190,   193,   190,   194,   190,   195,
     190,   190,   197,   196,   198,   196,   196,   200,   199,   201,
     199,   199,   199,   203,   202,   204,   202,   202,   202,   206,
     205,   207,   205,   208,   205,   205,   205,   205,   205,   209,
     209,   210,   210,   210,   210,   210,   210,   210,   211,   212,
     212,   213,   213,   214,   214,   215,   215,   215,   215,   215,
     215,   215,   215,   215,   215,   215,   216,   216,   217,   217,
     218,   218,   220,   219,   219,   221,   221,   221,   223,   222,
     222,   224,   224,   225,   225,   225,   226,   226,   226,   227,
     227,   228,   228,   229,   230,   231,   231,   232,   232,   233,
     233,   234,   234,   235,   235,   236,   237,   237,   238,   238,
     238,   239,   240,   240,   241,   241,   242,   243,   244,   245,
     246,   247,   247,   247,   247,   248,   249,   249,   249,   249,
     249,   249,   250,   250,   251,   251,   252,   252,   253,   253,
     254,   254,   255,   255,   255,   255,   255,   256,   257,   257,
     258,   258,   259,   259,   260,   260,   261,   262,   262,   262,
     262,   262,   263,   263,   264,   264,   265,   265,   266,   266,
     266,   266,   267,   267,   268,   268,   268,   268,   268,   268,
     268,   268,   269,   269,   269,   269,   270,   270,   270,   270,
     270,   270,   270,   270,   271,   271,   271,   272,   272,   273,
     273,   274,   274,   274,   274,   274,   274,   275,   275,   276,
     276,   277,   277,   278,   278,   279,   279,   280,   281,   283,
     284,   282,   285,   282,   286,   286,   287,   287,   288,   288,
     289,   289,   290,   291,   291,   292,   292,   293,   293,   293,
     294,   295,   295,   296,   296,   297,   298,   298,   299,   301,
     300,   300,   302,   302,   303,   303,   304,   304,   304,   304,
     304,   305,   305,   306,   307,   307,   308,   308,   308,   309,
     310,   311,   311,   311,   311,   312,   312,   313,   314,   314,
     315,   316,   316,   316,   317,   317,   318,   318,   318,   318,
     319,   319,   319,   319,   320,   320,   321,   321,   322,   323,
     323,   323,   323,   324,   324,   325,   325,   326,   326,   327,
     328,   328,   328,   328,   329,   329,   329,   330,   331,   331,
     332,   333,   333,   333,   333,   334,   334,   334,   335,   335,
     336,   336,   337,   338,   338,   338,   338,   339,   339,   340,
     341,   341,   343,   342,   342,   344,   344,   344,   344,   345,
     345,   345,   345,   346,   346,   346,   346,   347,   348,   348,
     349,   349,   349,   349,   349,   350,   350,   351,   352,   352,
     352,   352,   352,   352,   354,   353,   353,   353,   353,   353,
     353,   355,   356,   356,   357,   357,   357,   357,   357,   357,
     357,   357,   357,   357,   357,   357,   357,   358,   358,   359,
     359,   359,   359,   359,   359,   359,   360,   361,   361,   361,
     362,   362,   363,   362,   364,   365,   365,   365,   365,   365,
     366,   367,   367,   367,   368,   368,   368,   369,   370,   371,
     371,   371,   371,   372,   372,   372,   373,   373,   373,   373,
     373,   373,   374,   374,   375,   375,   375,   376,   376,   376,
     376,   377,   377,   377,   377,   378,   378,   378,   379,   379,
     379,   379,   380,   380,   380,   381,   381,   382,   382,   382,
     382,   382,   383,   383,   383,   384,   384,   384,   385,   385,
     385,   386,   387,   387,   387,   388,   388,   389,   390,   390,
     391,   391,   391,   392,   392,   393,   393,   393,   393,   393,
     394,   395,   395,   396,   396,   397,   397,   398,   398,   399,
     400,   400,   401,   401,   401,   402,   403,   403,   403,   403,
     403,   403,   403,   403,   403,   403,   403,   403,   404,   404,
     405,   405,   406,   406,   407,   407,   407,   408,   408,   408,
     409,   409,   410,   410,   411,   411,   412,   412,   413,   413,
     414,   414,   415,   415,   416,   416,   417,   418,   419,   420,
     421,   421,   421,   421,   422,   423,   423,   423,   424,   424,
     425,   425,   425,   426,   426,   427,   428,   429,   429,   430,
     431,   431,   432,   432,   432,   432,   432,   433,   433,   434,
     434,   435,   436,   436,   436,   437,   437,   438,   438,   438,
     438,   438,   438,   438,   438,   439,   439,   439,   439,   440,
     440,   440,   440,   441,   441,   442,   443,   444,   445,   445,
     445,   445,   445,   445,   445,   445,   445,   445,   446,   446,
     446,   446,   446,   446,   446,   446,   446,   446,   446,   446,
     446,   446,   446,   446,   446,   446,   446,   446,   446,   446,
     446,   446,   446,   447,   447,   447,   447,   448,   449,   449,
     450,   450,   451,   451,   452,   452,   452,   453,   453,   454,
     454,   455,   455,   456,   457,   457
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const unsigned char yyr2[] =
{
       0,     2,     1,     0,     2,     2,     1,     1,     1,     1,
       1,     2,     1,     1,     5,     3,     6,     5,     5,     1,
       3,     3,     1,     2,     3,     3,     3,     3,     3,     1,
       2,     2,     2,     1,     2,     3,     0,     2,     1,     1,
       1,     5,     4,     6,     6,     6,     6,     6,     7,     7,
       7,     1,     1,     1,     2,     0,     2,     1,     2,     0,
       5,     4,     0,     4,     0,     6,     0,     1,     1,     2,
       0,     4,     3,     3,     1,     3,     1,     4,     5,     1,
       3,     3,     1,     1,     1,     4,     4,     2,     2,     2,
       2,     1,     2,     3,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     0,     4,     3,
       0,     5,     0,     5,     0,     4,     0,     5,     0,     6,
       3,     0,     4,     0,     5,     0,     6,     0,     5,     0,
       5,     3,     0,     5,     0,     4,     3,     0,     5,     0,
       6,     5,     6,     0,     5,     0,     6,     5,     6,     0,
       4,     0,     3,     0,     2,     4,     3,     5,     4,     1,
       1,     1,     1,     1,     1,     2,     2,     2,     1,     3,
       3,     3,     3,     3,     3,     6,     6,     7,     7,     8,
       7,     7,     7,     8,     7,     3,     0,     1,     1,     1,
       3,     3,     0,     4,     3,     5,     4,     3,     0,     4,
       3,     1,     2,     5,     5,     3,     3,     3,     3,     4,
       2,     1,     3,     1,     1,     1,     1,     1,     3,     2,
       4,     1,     3,     1,     3,     1,     1,     3,     1,     3,
       2,     1,     1,     3,     1,     3,     3,     3,     1,     5,
       5,     9,    12,    11,     3,     1,     0,     1,     1,     1,
       1,     1,     0,     1,     0,     1,     1,     2,     1,     2,
       2,     3,     7,     6,    10,     9,     3,     1,     2,     1,
       2,     1,     1,     2,     1,     3,     1,     5,     3,     4,
       6,     7,     0,     1,     0,     1,     0,     1,     3,     3,
       3,     3,     1,     3,     4,     5,     3,     3,     6,     7,
       5,     3,     1,     1,     1,     1,     2,     2,     2,     2,
       2,     2,     2,     2,     4,     5,     3,     1,     3,     1,
       2,     4,     3,     4,     5,     3,     3,     1,     3,     1,
       3,     6,     5,     4,     3,     2,     1,     1,     1,     0,
       0,     6,     0,     4,     1,     3,     4,     5,     1,     1,
       1,     3,     1,     1,     3,     5,     4,     4,     4,     3,
       2,     1,     1,     1,     3,     2,     1,     3,     2,     0,
       4,     3,     1,     2,     1,     1,     1,     1,     1,     1,
       1,     5,     7,     6,     1,     2,     3,     3,     2,    13,
       3,     5,     3,     3,     5,    10,    10,     1,     1,     3,
       3,     1,     3,     3,     1,     2,     2,     2,     2,     2,
       3,     4,     6,     3,     3,     3,     3,     3,     1,     3,
       3,     4,     4,     1,     2,     4,     6,     5,     3,     1,
       1,     1,     2,     2,     3,     4,     4,     1,     1,     1,
       1,     1,     1,     1,     1,     5,     4,     3,     1,     3,
       6,     5,     1,     5,     4,     3,     4,     1,     3,     3,
       2,     3,     0,     3,     3,     4,     3,     3,     2,     5,
       4,     4,     2,     2,     2,     2,     2,     3,     1,     2,
       3,     6,     5,     4,     2,     1,     2,     3,     3,     6,
       5,     2,     4,     3,     0,     4,     5,     4,     2,     3,
       3,     2,     1,     2,     3,     2,     2,     2,     2,     2,
       3,     2,     3,     2,     2,     2,     2,     1,     1,     3,
       2,     2,     2,     2,     2,     2,     1,     2,     2,     4,
       1,     1,     0,     6,     3,     2,     4,     2,     4,     3,
       4,     1,     2,     2,     1,     3,     3,     2,     5,     5,
       7,     7,     4,     5,     7,     4,     6,     6,     6,     3,
       6,     3,     1,     2,     3,     3,     2,     2,     5,     5,
       9,     2,     5,     5,     9,     5,     5,     2,     1,     3,
       2,     1,     3,     2,     3,     1,     2,     1,     1,     1,
       1,     1,     3,     3,     3,     3,     3,     3,     2,     2,
       2,     3,     6,     5,     6,     1,     3,     1,     3,     3,
       1,     4,     4,     1,     3,     1,     5,     7,    13,    25,
       1,     3,     3,     6,     5,    10,     9,     5,     7,     1,
       1,     1,     5,     5,     2,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,    11,     9,
      11,     9,    13,    11,    11,     9,     4,    11,     9,     3,
      13,    11,    11,     9,    11,     9,    11,     9,    11,    13,
      11,     7,     7,     9,     1,     3,     1,     1,     1,     1,
       4,     2,     3,     1,     1,     1,     1,     1,     4,     2,
       2,     2,     2,     1,     3,     1,     1,     3,     6,     3,
       1,     3,     4,     4,     3,     1,     1,     3,     4,     3,
       4,     1,     3,     4,     4,     1,     3,     2,     4,     5,
       1,     2,     3,     1,     1,     1,     1,     2,     3,     1,
       3,     4,     5,     1,     5,     1,     1,     1,     1,     1,
       1,     1,     2,     1,     1,     2,     1,     1,     1,     1,
       2,     3,     2,     3,     1,     1,     1,     1,     2,     2,
       2,     2,     1,     1,     1,     1,     1,     1,     1,     1,
       2,     3,     3,     4,     2,     1,     1,     1,     1,     1,
       1,     2,     3,     3,     0,     3,     3,     1,     3,     3,
       1,     1,     3,     1,     1,     2
};

/* YYDPREC[RULE-NUM] -- Dynamic precedence of rule #RULE-NUM (0 if none).  */
static const unsigned char yydprec[] =
{
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0
};

/* YYMERGER[RULE-NUM] -- Index of merging function for rule #RULE-NUM.  */
static const unsigned char yymerger[] =
{
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0
};

/* YYDEFACT[S] -- default rule to reduce with in state S when YYTABLE
   doesn't specify something else to do.  Zero means the default is an
   error.  */
static const unsigned short int yydefact[] =
{
     794,     0,     0,   794,   794,     6,     0,     0,   804,     0,
       0,   797,   800,   803,     1,     0,     0,     0,    40,     7,
       9,     8,    10,     5,    38,    39,     0,     4,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   472,     0,     0,
       0,     0,     0,    99,   100,   113,   114,   109,   107,   110,
     112,   108,   111,   116,   115,   102,   104,   348,   103,   101,
     105,     0,   349,   796,   805,     0,   795,     0,    11,     0,
      19,     0,     0,    52,    53,     0,     0,     0,     0,     0,
     198,   199,   264,   197,   196,   196,     0,     0,     0,     0,
       0,     0,     0,   339,   337,     0,   346,     0,   265,     0,
       0,     0,     0,   241,   244,     0,   238,     0,     0,   225,
     226,   227,     0,     0,     0,     0,     0,   467,   785,     0,
     786,   801,     0,     0,     0,   470,     0,   794,     0,   263,
       0,     0,   264,     0,     0,     0,     0,   231,     0,     0,
       0,     0,     0,     0,   352,   354,     0,     0,   458,     0,
     294,   798,   736,   790,   789,   788,     0,   749,   754,   750,
     751,   748,     0,   753,   757,   733,   735,   739,   799,     0,
     756,   734,   730,   801,     0,    15,    13,     0,    12,     0,
     407,    54,    51,     0,     0,     0,     0,     0,     0,   195,
       0,     0,     0,     0,     0,     0,   294,   264,   264,   336,
       0,   347,     0,   220,   743,   224,     0,     0,     0,     0,
       0,   335,     0,   332,     0,     0,     0,   345,   207,     0,
       0,   210,     0,   201,   200,     0,     0,     0,   240,   211,
     180,   179,     0,     0,   229,   715,     0,   710,   716,     0,
       0,     0,   465,     0,     0,     0,     0,   784,   119,     0,
     236,     0,   471,     0,     0,     0,     0,     0,     0,     0,
       0,   794,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   521,   524,   540,   794,   517,
     541,   518,   523,   526,   516,   515,   519,   525,     0,   786,
     473,   276,     0,   277,   254,   256,   184,   183,   182,   181,
       0,   204,     0,   474,     0,     0,   223,     0,   462,     0,
       0,     0,     0,     0,     0,   457,     0,     0,   295,   370,
       0,   752,   755,     0,   725,   775,   776,     0,   767,   766,
     774,   772,   758,   773,   777,     0,     0,   765,   764,   778,
     779,     0,   759,     0,   737,     0,     0,   791,     0,     0,
     731,   727,     0,     0,     0,     0,     0,   794,     0,    42,
       0,     0,     0,    57,    91,     0,     0,     0,     0,     0,
     284,   286,   264,     0,     0,     0,     0,     0,     0,     0,
       0,   215,     0,     0,   216,   217,   218,     0,   294,   294,
     344,     0,     0,   221,   224,     0,     0,     0,   333,     0,
     331,     0,   338,     0,   340,     0,   746,     0,   206,     0,
     209,   245,     0,   721,   239,   212,   228,     0,   709,     0,
       0,     0,     0,   466,   464,   468,   469,   802,     0,     0,
       0,   118,     0,     0,     0,   537,   538,     0,     0,   547,
       0,   545,   483,     0,     0,     0,     0,     0,     0,     0,
     581,     0,     0,     0,   485,   486,   484,     0,     0,     0,
       0,   508,   794,   794,     0,     0,   501,   794,   512,   478,
     514,   482,   520,   522,   528,   527,   557,     0,     0,   587,
       0,   794,   794,   260,   259,   258,   261,   257,     0,   232,
     203,     0,     0,   456,     0,   350,     0,   355,   353,     0,
     369,     0,   371,   373,   372,   376,     0,   459,     0,   732,
     707,     0,     0,   760,   769,   768,   770,   771,   780,   762,
       0,   740,     0,     0,     0,   738,     0,   725,     0,     0,
       0,    18,     0,     0,    29,     0,    17,     0,     0,     0,
      22,     0,     0,    14,     0,     0,     0,     0,   408,    90,
      56,    41,    58,     0,    92,     0,   163,   264,     0,     0,
     264,     0,     0,    95,    96,    98,    87,    88,    89,    94,
      97,    72,     0,    84,     0,     0,     0,    74,    76,    79,
      83,    73,   794,   264,   312,   313,     0,   315,   314,   292,
       0,   296,   296,   296,     0,     0,     0,     0,     0,    55,
       0,    55,     0,     0,     0,     0,   235,     0,     0,   233,
     227,     0,     0,     0,   219,     0,     0,   334,     0,     0,
       0,   343,     0,     0,   205,     0,   230,   711,     0,     0,
     714,     0,   463,   783,   789,   788,     0,   719,     0,   237,
     247,     0,     0,     0,     0,     0,   554,     0,   551,   549,
       0,     0,     0,     0,   571,     0,   569,     0,     0,     0,
       0,   544,     0,   510,   511,   794,   509,   794,   279,   794,
       0,   503,     0,   794,   498,   513,     0,   477,   476,     0,
       0,   591,     0,   588,   794,   281,     0,   282,   794,     0,
       0,     0,   255,     0,   455,     0,     0,     0,   358,   360,
     359,   363,   362,     0,   368,   367,   794,   794,   378,   375,
       0,   726,     0,   761,   781,   782,   763,     0,   741,   793,
     792,   717,   728,     0,     0,     0,    21,    20,    30,    33,
       0,    31,    32,    16,    23,     0,     0,     0,     0,     0,
       0,     0,     0,   794,     0,    93,     0,   787,     0,   137,
     133,   139,   178,   174,     0,   164,   159,   171,   172,   173,
     264,   294,     0,     0,     0,   593,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   597,     0,   595,   600,   601,   598,     0,
       0,     0,     0,     0,     0,   599,   656,   657,   655,   646,
     647,   648,   649,   650,   651,   654,   653,   652,     0,     0,
     142,   264,   294,     0,     0,   120,   122,   126,     0,   794,
     264,   264,     0,     0,     0,     0,    82,    71,     0,     0,
     285,   292,   264,     0,   301,   293,   294,   288,   297,   299,
     298,   300,    61,    62,     0,    43,     0,     0,    47,    44,
      46,    45,   213,   214,     0,     0,   186,     0,   185,     0,
       0,     0,     0,     0,     0,     0,   342,   222,     0,     0,
       0,   745,     0,     0,   712,   719,     0,     0,   722,   720,
     550,   539,   548,   552,   553,     0,   546,     0,   497,   562,
       0,     0,     0,     0,   794,     0,     0,   794,   794,   505,
     278,   794,   507,     0,   319,   320,   317,   318,   321,   322,
     323,   316,   502,   794,   794,     0,   475,   481,   480,     0,
       0,   590,   280,   794,   283,   273,     0,   794,   794,   461,
       0,     0,   356,     0,     0,   351,   374,     0,   377,     0,
       0,     0,   742,   729,   718,    34,    24,    36,    25,    26,
      27,    28,   794,   409,   794,   410,   411,     0,   423,     0,
     420,   141,     0,     0,     0,     0,   135,   162,   169,   175,
     170,     0,   177,   176,   294,   147,   594,   640,   641,     0,
     615,     0,   620,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   617,     0,   615,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   644,   592,   596,   608,
       0,   609,     0,     0,   610,   146,     0,   248,   242,     0,
     294,   153,   130,     0,     0,     0,     0,   128,   381,     0,
       0,     0,     0,   390,   794,   382,   386,   387,   388,   389,
     264,   294,   264,   294,     0,   166,    48,     0,    80,     0,
      75,     0,     0,   294,   292,   289,     0,    66,    60,     0,
      49,    50,   187,   188,   234,     0,   246,     0,   190,   191,
       0,   194,   192,   744,   341,   250,   249,   747,   723,   724,
     556,   555,     0,   559,     0,   794,     0,   572,     0,     0,
       0,   582,     0,     0,   558,   583,   506,     0,     0,   327,
       0,   329,   794,   500,   542,   479,   586,   585,   589,   272,
     794,     0,   794,   266,     0,   302,   268,     0,     0,     0,
     357,     0,   361,   364,   460,   708,     0,    35,   794,   414,
       0,     0,     0,     0,   794,   794,     0,     0,   421,   132,
       0,     0,     0,     0,   160,   149,     0,     0,     0,     0,
       0,   645,     0,     0,   615,     0,     0,     0,   695,   696,
       0,   705,     0,   688,     0,   697,   693,   669,     0,     0,
     694,     0,     0,     0,     0,     0,     0,   602,   604,   603,
     605,   607,   606,     0,     0,     0,     0,     0,   615,     0,
     611,   623,   625,   630,   631,   632,   145,     0,     0,   155,
       0,   125,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   794,   380,   383,   294,     0,   294,     0,     0,   165,
     168,    77,     0,    81,    86,    85,     0,   294,   287,     0,
      67,    68,    64,   189,   193,   794,   794,   567,   794,   576,
     566,   573,   794,   570,   568,   543,     0,     0,   326,     0,
       0,   330,   499,   794,   794,     0,   264,   294,     0,   267,
       0,     0,   269,     0,     0,     0,     0,   270,   366,     0,
      37,     0,     0,   415,     0,   428,     0,   419,   416,     0,
     417,   418,     0,     0,     0,   412,   413,   425,   424,     0,
     138,   134,   140,     0,     0,   148,     0,   616,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   666,   699,     0,
       0,   691,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   625,   630,
     243,   143,     0,   154,   121,   123,   127,     0,     0,     0,
       0,     0,   403,     0,   402,     0,   151,     0,   157,   167,
      78,   290,     0,    63,    69,    66,   561,   560,   575,   574,
       0,   324,   328,     0,   794,   275,   311,   294,     0,   306,
     251,     0,   794,     0,     0,     0,   794,     0,   533,   530,
     534,   531,   536,   532,   535,     0,   303,   264,   307,   794,
     271,   365,     0,     0,     0,   451,   454,     0,   453,   452,
       0,   433,     0,   440,   441,   405,     0,   427,   426,   406,
     422,   136,   150,     0,   613,   618,   619,     0,     0,   634,
       0,     0,   621,   622,   642,   643,     0,     0,   703,     0,
       0,   689,     0,   692,   706,     0,     0,   687,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     624,     0,   156,   129,   794,     0,     0,     0,     0,   794,
     152,   158,   291,     0,   794,   325,   274,     0,   304,     0,
     577,     0,     0,     0,     0,     0,   494,   794,   794,   529,
       0,   264,   294,     0,   794,     0,   438,     0,   430,     0,
     429,   434,     0,   442,   443,     0,     0,     0,   614,     0,
       0,   612,     0,     0,     0,   633,   700,   701,   702,   698,
       0,     0,   690,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   385,
     391,   384,   794,     0,   394,     0,     0,   400,   404,   401,
      65,   584,   305,     0,     0,     0,     0,     0,   794,   794,
     490,   487,   294,     0,   310,     0,   253,   439,     0,   444,
       0,     0,     0,   447,     0,   432,   431,     0,     0,     0,
       0,   704,     0,     0,   681,     0,   682,     0,   684,   686,
       0,     0,     0,     0,     0,     0,     0,     0,   626,     0,
     794,   794,   398,   393,   395,   794,     0,   565,   794,   794,
       0,   794,   794,   794,   495,   493,     0,   308,   252,   437,
     445,     0,   435,   446,     0,   639,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     392,   397,   396,     0,   563,   488,     0,   578,     0,   579,
     794,   492,   496,   309,   449,     0,   448,   450,   636,     0,
     637,     0,   665,     0,   668,     0,     0,   683,   685,   677,
       0,   673,     0,     0,     0,   675,     0,   659,     0,   661,
       0,     0,   627,     0,     0,   794,   489,     0,   491,   436,
       0,   635,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   564,     0,
     638,   664,   667,   680,   676,   672,   671,     0,   678,     0,
     674,   658,   660,   663,     0,     0,     0,   794,     0,     0,
       0,     0,   794,   580,   670,   679,   662,     0,   794,     0,
     399,   628,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   629
};

/* YYPDEFGOTO[NTERM-NUM].  */
static const short int yydefgoto[] =
{
      -1,     2,     3,     4,    18,    19,    20,   177,    21,    22,
      69,   355,   539,   540,   533,   541,   542,   730,   737,  1127,
      23,    24,   181,    76,    77,   359,   360,   361,   186,   595,
     844,  1057,  1355,  1229,   187,   368,   188,   576,   577,   578,
     825,   579,   362,   363,   364,    43,    44,   123,   904,  1024,
    1025,   814,  1026,  1205,   905,   748,   964,  1143,   963,   965,
     783,  1019,   809,   566,  1146,  1294,   567,  1200,  1332,   568,
     971,   754,   755,   972,   756,   757,   906,    46,   907,    48,
      82,    83,   908,   909,   139,    51,   910,   101,   234,    84,
      85,    90,   392,   307,   203,   606,   109,   110,   136,   607,
     608,   249,   103,   104,  1016,   105,   609,   250,  1018,   229,
     318,    53,   691,   488,   130,    99,  1112,  1113,  1118,    54,
     292,   667,   684,   685,   369,   370,   371,   836,   319,   839,
     372,  1114,  1115,   590,   668,   911,  1098,  1099,    55,    91,
      92,    93,    94,   209,   304,    56,    57,   143,   703,   313,
     144,   311,   697,   698,   699,   700,   708,   145,   308,   501,
     502,   503,   504,   505,   569,   819,  1034,  1530,  1531,  1036,
    1037,  1533,  1534,  1038,  1340,  1039,    25,   179,   544,   545,
     955,  1128,  1129,  1130,  1131,  1132,  1274,  1275,  1400,  1401,
    1276,  1558,  1402,  1403,  1561,  1655,  1562,  1404,    58,   147,
     148,   149,    59,   116,   117,    60,    61,   127,   272,   273,
     274,  1377,  1644,  1378,  1603,   442,   275,   276,   462,   463,
     467,   468,   476,  1645,  1379,   277,   278,   895,   279,   280,
     281,   646,   647,   282,   283,   284,  1381,   285,  1086,  1087,
    1383,   286,   287,   682,   570,   784,   785,   786,   787,   788,
     789,   790,   993,   994,  1149,  1161,  1190,  1191,  1192,   791,
     792,   793,  1419,  1614,   981,   794,  1150,   795,   796,   797,
     798,   799,   800,   801,   802,   803,   804,   805,   806,   807,
    1577,  1578,  1436,  1162,  1430,  1163,  1171,  1164,  1165,  1428,
    1429,  1166,  1433,   165,   118,   236,   237,   350,   247,   412,
     428,  1088,   166,   167,   204,  1193,   872,   407,  1078,   169,
     341,   201,   759,   170,   171,   346,   126,    10,    11,   172,
     173,    13
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -1454
static const short int yypact[] =
{
     956,  1058,   169,   117,  1484, -1454,  2780,    33, -1454,   314,
      45, -1454,   159, -1454, -1454,   249,   314,   925, -1454, -1454,
   -1454, -1454, -1454, -1454, -1454, -1454,   710, -1454,  1217,  1352,
     148,  1251,  1277,  1354,  1423,  1358,  3202, -1454,   426,   678,
    1373,  1376,  1390, -1454, -1454, -1454, -1454, -1454, -1454, -1454,
   -1454, -1454, -1454, -1454, -1454, -1454, -1454, -1454, -1454, -1454,
   -1454,  2603,  1045, -1454, -1454,   314, -1454,  3611, -1454,   266,
   -1454,   492,  1071, -1454, -1454,   314,   314,  1123,   524,  1337,
   -1454, -1454,   186, -1454,   432,   432,   534,  1280,  3651,  1174,
    1182,   101,   132, -1454, -1454,   697,   647,   777, -1454,  1212,
     816,   314,   900, -1454, -1454,   154,  1142,   914,   952,   700,
     878,   988,  1192,  1090,  1491,  1090,   183, -1454, -1454,   991,
    1005,  1012,  1028,   314,   987, -1454,  5094,   972,  1052, -1454,
     314,  1057,   186,  1131,   212,  1147,   236, -1454,  1152,   314,
    1085,  1280,  1405,  1171,  1128, -1454,  1222,   246, -1454,  1225,
     647, -1454, -1454, -1454, -1454, -1454,  3611, -1454, -1454, -1454,
    1109, -1454,  3611, -1454, -1454, -1454, -1454, -1454,  4807,   527,
    1246, -1454,    81, -1454,    97, -1454, -1454,  1252,  1005,  1254,
   -1454, -1454, -1454,  2256,   649,  1272,   660,  1306,  1330, -1454,
    1307,  1249,  1264,  1335,  1370,  1408,   647,   186,   186, -1454,
     104, -1454,  3611, -1454,  4111, -1454,  1090,  1182,   264,  1393,
     284, -1454,  1227, -1454,  1182,  1090,  3611, -1454, -1454,   288,
     314, -1454,   292, -1454, -1454,   314,  3611,  3611,   988, -1454,
   -1454, -1454,   314,   314,   988, -1454,   208, -1454,  1397,  1090,
     331,   345, -1454,  1090,  3611,   314,  3611,  1409, -1454,   355,
   -1454,   128, -1454,  1412,  1551,   145,  1090,  1413,  1425,   929,
     983,   972,  1432,  1440,  1445,  1090,  1090,  1090,   314,  1450,
    3118,  2133,   291,   950,  1460, -1454, -1454, -1454,    79, -1454,
   -1454, -1454, -1454, -1454, -1454, -1454, -1454, -1454,  1374,  1107,
   -1454, -1454,  1168, -1454, -1454,    86, -1454, -1454, -1454, -1454,
     314, -1454,   357, -1454,  1403,  1090, -1454,  1239, -1454,   361,
    1473,   314,   314,  1481,  1314, -1454,  1239,  1090, -1454, -1454,
    1493, -1454, -1454,   475,  4139, -1454, -1454,  1494,  1442,   428,
   -1454,  1498, -1454, -1454, -1454,  1507,  3611, -1454, -1454, -1454,
   -1454,  1437, -1454,  1391, -1454,  1246,  1542, -1454,  3611,  3611,
   -1454,  1513,  1522,  1430,  1392,   968,  1534,   120,  1556, -1454,
    1504,  2256,   999, -1454, -1454,  3770,  1561,  1558,  1468,   162,
   -1454,  1499,  1119,   623,   427,  1821,   114,  1582,  1590,  2759,
    2865, -1454,  1603,  1606, -1454, -1454, -1454,  1274,   647,   647,
   -1454,  3611,   312, -1454,  1493,  3611,  1516,   362, -1454,  1090,
   -1454,  1090, -1454,  1599, -1454,   489,  4807,  1602, -1454,   371,
   -1454, -1454,  1611,  4807,  4807, -1454, -1454,   988, -1454,  1090,
    3611,  1882,   374, -1454, -1454, -1454,  4807, -1454,  1608,  3936,
    3611, -1454,   314,  3611,   314, -1454, -1454,  3611,  1124, -1454,
    1612, -1454, -1454,  1609,  1675,  3611,  1548,  3611,  1552,  3611,
   -1454,  3611,  1090,  3611, -1454, -1454, -1454,  1624,  3611,  1559,
     314, -1454,   972,    61,  1563,  1394, -1454,   723, -1454, -1454,
   -1454, -1454, -1454, -1454, -1454, -1454, -1454,  1505,  1620, -1454,
    1167,   972,   972, -1454, -1454, -1454, -1454, -1454,   314, -1454,
   -1454,  3611,   390, -1454,  1474,  1128,  1222, -1454, -1454,  1630,
   -1454,  1633,  1553, -1454,  1557, -1454,  2544, -1454,  1560, -1454,
   -1454,  3611,  3611,  1627, -1454,  1636, -1454,  1637, -1454,  1634,
    4157, -1454,  3611,  1531,   810, -1454,   505,  4807,  1643,  3611,
    3611, -1454,  1653,  1094,  1005,  1554, -1454,   314,   314,   970,
   -1454,  1457,  1457, -1454,   549,  1655,  1575,  1635, -1454, -1454,
   -1454, -1454, -1454,  1665, -1454,   870,   342,    98,  3676,  1204,
      98,   893,  3250, -1454, -1454, -1454,  1580,  1581,  1586, -1454,
   -1454, -1454,  1821, -1454,  1324,   995,   551, -1454, -1454, -1454,
    1668, -1454,   972,   954, -1454, -1454,   314, -1454, -1454,  1644,
     314,  1694,  1694,  1694,  1681,  1661,  2256,  1821,  1821,  1556,
    2256,  1556,  2256,  1684,  1685,   314, -1454,   399,  1693, -1454,
    1190,  1274,  1274,   584, -1454,  3611,  4198, -1454,  1607,  1687,
    1090, -1454,  3611,  3611, -1454,  3611,   988, -1454,  1689,  3954,
   -1454,  4239, -1454, -1454,  1698,  1700,  3611, -1454,  4279, -1454,
    4807,  1706,  1703,  1704,  3611,  3611, -1454,   123,  4807, -1454,
    3611,  1705,  4298,  4322, -1454,  4360, -1454,  4379,  4422,  1707,
    4447, -1454,  4502, -1454, -1454,   358, -1454,   972, -1454,   540,
    4947, -1454,  1651,   972, -1454, -1454,  1708,  3611,  4807,  1505,
    1709, -1454,   587,  4807,   972, -1454,  1715, -1454,    73,  4879,
     635,  1175, -1454,   641, -1454,  1711,   314,  1712,  1638, -1454,
    1639, -1454,  4807,  1720, -1454, -1454,   972,   972, -1454,  4807,
    3611,  4807,   493, -1454, -1454, -1454, -1454,  3611, -1454, -1454,
   -1454, -1454, -1454,  1714,  3989,   654, -1454, -1454,  1005,   314,
    1721,  1005,  1005, -1454, -1454,   314,  1724,  1725,  1729,  1730,
    1731,   314,  1733,   120,   945, -1454,  1734, -1454,   314, -1454,
   -1454,   647, -1454, -1454,   314, -1454,    90, -1454, -1454, -1454,
     186,   647,  1659,   341,  1735, -1454,  1740,  1053,  1742,  1747,
    1752,  1753,  1756,  1758,   314,  1398,   314,  1399,  1761,  1764,
    1766,  1767,  1768, -1454,  4991, -1454, -1454, -1454, -1454,  1737,
    1728,  1775,  1765,  1771,  1776, -1454, -1454, -1454, -1454, -1454,
   -1454, -1454, -1454, -1454, -1454, -1454, -1454, -1454,  1781,   314,
   -1454,   186,   647,  1792,   314, -1454, -1454,   647,  1696,  1082,
      98,    98,   966,  2256,  1788,   571, -1454, -1454,  1468,  3611,
   -1454,  1644,   299,   314, -1454, -1454,   647, -1454, -1454, -1454,
   -1454, -1454, -1454, -1454,   657, -1454,  2256,  2256, -1454, -1454,
   -1454, -1454, -1454, -1454,   410,  1795, -1454,   314, -1454,  3611,
     314,   411,  1804,   314,   415,  1805, -1454, -1454,  3611,  1799,
     670,  4807,  1798,  1800, -1454,   610,  3611,  3611, -1454, -1454,
   -1454, -1454, -1454,  4807,  4807,  3335, -1454,  3335,  4807, -1454,
    2973,  1632,  3509,  3509,   972,  1801,  3611,    79,   972, -1454,
   -1454,   672, -1454,   173, -1454, -1454, -1454, -1454, -1454, -1454,
   -1454, -1454, -1454,   972,   788,  3611,  4807,  3611,  4807,  1810,
    1811,  3611, -1454,   450, -1454, -1454,  1813,    27,   972, -1454,
    1815,  1812, -1454,  3611,  1818, -1454, -1454,  3611, -1454,  1818,
     681,  1790, -1454, -1454, -1454,   314, -1454,  1078, -1454, -1454,
   -1454, -1454,   972, -1454,   972,  1732,  1743,  1744, -1454,   314,
   -1454, -1454,   435,   314,   314,   314, -1454, -1454, -1454, -1454,
   -1454,   314, -1454, -1454,   647, -1454, -1454, -1454, -1454,   704,
    1809,   314,  1814,  3611,   545,  1832,   607,   607,   607,   607,
     607,   607,   607,  1745,  1834, -1454,  1838,  1839,  1841,  1844,
    1846,   607,   607,   607,   607,   314, -1454, -1454, -1454, -1454,
    3682, -1454,  3682,  3682, -1454, -1454,   454, -1454, -1454,   314,
     647, -1454, -1454,   457,   314,   314,   314, -1454, -1454,  1842,
    1847,  1849,  2362, -1454,  1201, -1454, -1454, -1454, -1454, -1454,
     186,   647,   186,   647,   346, -1454, -1454,  1490, -1454,   995,
   -1454,  1843,  4017,   647,  1644, -1454,   314,   164, -1454,  1828,
   -1454, -1454, -1454, -1454, -1454,  1853,  4807,   460, -1454, -1454,
    1866, -1454, -1454, -1454, -1454, -1454, -1454,  4807, -1454, -1454,
   -1454, -1454,  1806,  1807,  1797,    92,  2313, -1454,   310,  3072,
    3444, -1454,  1848,  3815, -1454, -1454, -1454,   314,   464, -1454,
     647,   988,   828, -1454,  4807,  4807, -1454, -1454,  4807, -1454,
     972,   728,    27, -1454,   482,  1785, -1454,   829,   718,  1786,
   -1454,  3546, -1454, -1454, -1454, -1454,  1778, -1454,   278,  1881,
     495,   517,   518,   813,   278,   120,   314,   314,  1875, -1454,
     522,   550,   561,   314, -1454, -1454,   314,  1877,   314,   314,
    1265, -1454,  1880,   377,  1887,  3611,  4547,  1043, -1454, -1454,
    1892, -1454,  1817, -1454,   314, -1454,  1777, -1454,  1893,  1820,
   -1454,  1822,  1823,  1825,  1830,  1833,  1835, -1454, -1454, -1454,
   -1454, -1454, -1454,  1836,  1840,  1850,  1852,   745,  1891,  3713,
   -1454, -1454, -1454, -1454, -1454, -1454, -1454,   314,   601, -1454,
     314, -1454,   602,   603,   611,   314,  3611,  3611,   314,  1856,
     314,  1166, -1454, -1454,   647,   314,   647,   314,   665, -1454,
    1347, -1454,  1909, -1454, -1454, -1454,   314,   647, -1454,   314,
   -1454,   647, -1454, -1454, -1454,    79,    79, -1454,    79, -1454,
   -1454, -1454,    79, -1454, -1454, -1454,  1090,   613, -1454,   314,
     314,   988, -1454,   972,   658,  1889,   186,   647,   314, -1454,
    1868,  4994, -1454,  1786,   146,  1920,  1786,  1785, -1454,  4570,
   -1454,  1400,   537,  1881,  1886, -1454,  1878, -1454, -1454,   314,
   -1454, -1454,   314,   314,  1896,  1743, -1454, -1454, -1454,  3611,
   -1454, -1454, -1454,   616,   314, -1454,   314, -1454,  1925,  1913,
    1922,  1451,  1928,  1929,  1936,  4076,  1942, -1454, -1454,  1290,
     607,  1826,  3611,   607,  3611,  3611,   607,   607,   607,   607,
     607,   607,   607,   607,  1935,  1937,  3611,  1945,  1865,  1493,
   -1454, -1454,   314, -1454, -1454, -1454, -1454,   633,  4586,  4627,
    1956,  1946, -1454,  3333, -1454,   314, -1454,   314, -1454, -1454,
   -1454, -1454,   314, -1454, -1454,   164, -1454, -1454, -1454, -1454,
    1950, -1454, -1454,   634,   741, -1454, -1454,   647,   314, -1454,
   -1454,  1953,   972,  1954,  1955,  1957,    88,  1965, -1454, -1454,
   -1454, -1454, -1454, -1454, -1454,  1958,  1785,   941, -1454,   972,
    1785, -1454,  1966,  1959,  1919, -1454, -1454,   115, -1454, -1454,
     711, -1454,   379,  1963, -1454, -1454,   573, -1454, -1454, -1454,
    4807, -1454, -1454,  1479, -1454, -1454, -1454,   314,  1547, -1454,
     314,  1451, -1454, -1454, -1454, -1454,  1363,  1975, -1454,   298,
    1888, -1454,  3611, -1454, -1454,  1894,   719,  4807,   730,  1898,
    1900,  1901,  1902,  1903,  1905,  1906,  1907,   314,   314,  1865,
   -1454,  3611, -1454, -1454,   285,  3580,  3611,  3611,  1910,  1209,
   -1454, -1454, -1454,   314,   972, -1454, -1454,   314, -1454,  1741,
   -1454,  1769,  3611,  1090,  3611,   314, -1454,   972,   729, -1454,
    3611,   186,   647,   314,   972,  1921, -1454,  1976, -1454,   539,
   -1454, -1454,   115,  1963, -1454,   115,  1931,   780, -1454,  1972,
    1501, -1454,  1991,  1501,  1501, -1454, -1454, -1454, -1454, -1454,
    1290,  3611, -1454,  3611,  1997,  3611,  1999,  3611,  3611,  3611,
    3611,  3611,  3611,  3611,  3611,  3611,  1993,  1994,   731, -1454,
    1933, -1454,   333,  3475, -1454,   353,  3867,  4807, -1454, -1454,
   -1454, -1454, -1454,  1996,  4670,  4707,  2007,  4750,   972,   801,
   -1454,  4807,   647,   314, -1454,  1964, -1454, -1454,  2009, -1454,
    2003,  2012,  2019,  2020,  2005, -1454, -1454,  3611,  2016,  3611,
    2017, -1454,   755,   764, -1454,  4791, -1454,   766, -1454,  4807,
     767,   768,  1938,  1939,   774,   776,   791,  1943, -1454,  3611,
     285,   285, -1454, -1454, -1454,   285,   314, -1454,   972,   972,
    3611,   972,   972,   851, -1454, -1454,   314, -1454, -1454, -1454,
   -1454,   737, -1454, -1454,  2025,  4807,  3611,  2026,  3611,  2023,
    3611,  2034,  3611,  3611,  2035,  3611,  2036,  3611,  2037,  3611,
    3611,  3611,  2038,  3611,  2039,  3611,  2041,  3611,  3611,   794,
   -1454, -1454, -1454,  2042,  1973, -1454,  2707, -1454,  3895, -1454,
     862, -1454, -1454, -1454, -1454,  2043, -1454, -1454, -1454,  2044,
   -1454,  2045, -1454,   795, -1454,   798,   805, -1454, -1454, -1454,
     814, -1454,   817,   821,   833, -1454,   838, -1454,   844, -1454,
     846,   863, -1454,  3611,  1979,   972, -1454,  1090, -1454, -1454,
    2046, -1454,  2054,  2055,  2057,  2058,  2060,  2061,  3611,  2066,
    3611,  2067,  2068,  2070,  2071,  3611,  1984,  2069, -1454,  2072,
   -1454, -1454, -1454, -1454, -1454, -1454, -1454,   873, -1454,   882,
   -1454, -1454, -1454, -1454,   884,  3611,   314,   972,  2073,  2075,
    2076,  1990,  1082, -1454, -1454, -1454, -1454,  3611,  1279,   887,
   -1454, -1454,  3611,  1995,  3611,  1998,  3611,  2000,  3611,  2001,
    3611,  2002,  3611,  2077, -1454
};

/* YYPGOTO[NTERM-NUM].  */
static const short int yypgoto[] =
{
   -1454, -1454, -1454, -1454, -1454, -1454, -1454, -1454, -1454, -1454,
   -1454, -1454, -1454,  1562,  1366, -1454, -1454,  1035,  1550, -1454,
    2093, -1454, -1454, -1454, -1454,  -332, -1454,  -289, -1454, -1454,
   -1454, -1454, -1454,   748,  1924, -1454,  1926, -1454,  1278,  -527,
   -1454,  -539, -1454,  -316,    14, -1454, -1454, -1454,  1746, -1454,
   -1454, -1454, -1454, -1454,  1748, -1454, -1454, -1454, -1454, -1454,
    1749, -1454, -1454, -1454, -1454, -1454, -1454, -1454, -1454, -1454,
   -1454, -1454, -1454, -1454,  1061,  -488,    46, -1454,    47, -1454,
    1496, -1454,    50,    52, -1454, -1454,    53, -1454,   -97,   924,
   -1454,     6, -1454, -1454,  -159,  2074, -1454, -1454, -1454,  -541,
    -545,  -702, -1454,  1883,  1096,    37,  1259,  -424,   920,  -202,
     -76, -1454, -1454, -1454,  2080,   -67, -1454,  1008, -1454, -1454,
   -1454,  -661, -1454,  1438,  1641,  -407, -1454,  -758,  -185,   994,
    1549, -1454, -1023,  -542,  -459, -1454, -1009,   886, -1454, -1454,
      29,  1923,  1927,    39,   -59, -1454, -1454, -1454, -1454, -1454,
    1827, -1454, -1454, -1454,  1200, -1454,  -450,  1824,     1, -1454,
   -1454,  1435, -1454,  1436, -1454, -1454, -1016,  -626,  -795, -1454,
   -1454, -1454,   617, -1454,   546, -1454, -1454, -1454, -1454, -1454,
   -1454,  1195,   130,  1787,  -701, -1454,  1017, -1454,   740, -1300,
   -1454, -1454, -1454,   750, -1454, -1454,   543, -1322, -1454,   -58,
    1845, -1454, -1454,    -1,  -226, -1454, -1454, -1454, -1454, -1454,
   -1454, -1454,   471, -1454, -1454,  -447, -1454, -1454, -1454, -1454,
    -456,    69,  -803, -1082, -1454, -1454,  -394, -1454, -1206,  1065,
   -1454,   531, -1454, -1454, -1454, -1454, -1454, -1200,   696,   224,
   -1454, -1454, -1199, -1454, -1454, -1454,  1375, -1454, -1454, -1454,
    -764, -1454,  -684,  -742, -1454,  -726,   609,   969, -1158,   857,
   -1454, -1454,   747, -1453, -1454, -1454, -1454, -1454, -1454, -1454,
   -1454, -1454, -1454, -1454, -1454, -1454, -1454, -1454, -1454, -1454,
    -528,   547, -1024,   691,   303,  -688,  1183, -1454, -1454,   663,
   -1454,  1010,   743, -1454,   -56, -1454,  1759, -1454,   653,  1565,
    -311,  -160,   -93,  -287,  1544,   -78,  1541, -1454,  1302, -1454,
   -1454,   -33,  -534,  1871, -1454,   -87,     0,  1854,  2116,    72,
     808,  2173
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If zero, do what YYDEFACT says.
   If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -802
static const short int yytable[] =
{
       6,   119,   323,    26,    26,   659,   665,   669,   639,   228,
     205,   387,   913,   750,     5,   196,  1211,   425,  1006,   816,
     217,   751,   687,   220,  1035,   688,   415,   817,   200,   551,
    1260,  1328,   415,   997,   998,  1000,   826,   980,   528,   454,
     115,   833,   956,   393,   701,   552,   962,   824,   995,   995,
     995,   995,    45,    47,   521,  1380,    49,   235,    50,    52,
     855,  1382,  1384,   146,   854,   295,   862,   865,    95,   760,
     861,   864,   811,  1053,   686,  1489,   344,   134,   320,   979,
    1494,   119,   119,   677,   309,   352,   596,  1083,  1247,   474,
     600,   602,   245,   288,  1094,   207,  1267,   348,   353,   349,
    1491,   752,   474,  1475,   216,   125,   120,  1238,   216,   628,
     630,   211,  1023,   240,   241,   366,  1617,    -2,   208,   210,
     239,   390,   -70,  1395,   394,   -70,   -70,  1396,  1111,   885,
     388,   389,     8,   483,   484,   925,   219,   968,   222,   245,
     886,  1398,   213,    65,   178,   666,   -70,   396,   306,    97,
     433,   -70,     9,  -794,  -794,     1,   405,     8,     8,   120,
    -264,   438,    63,  1659,   224,  1661,  -264,  1560,  1449,    14,
    1563,   439,  1476,  1564,    66,   830,   302,     9,     9,   581,
    -264,    67,   216,   365,   373,     8,   120,   120,   526,     1,
     485,   216,   969,   242,   970,   251,   290,  1491,   289,   212,
      98,     1,   391,   611,   612,     9,   119,     1,   900,   343,
     119,   901,   486,   120,  1399,  -794,     1,   914,   723,   487,
       1,   887,   297,   443,   354,   687,    15,    16,   923,    17,
     214,   613,   119,   455,   456,   718,   397,  1035,   422,  1213,
    1386,  1363,     1,  1390,   418,     1,   299,  1387,     1,   492,
      98,   403,   225,   525,   522,  1154,   315,   409,   508,    68,
     582,  1140,  1141,  1142,   845,  1380,   747,   848,   849,   850,
     851,  1382,  1384,   440,   398,   747,   174,   686,   120,  1188,
     552,   243,  1239,   823,   552,   917,   552,   120,    98,  1657,
    1470,  1438,   469,  1528,   400,  1529,  1227,  1153,   408,  1170,
    1170,   470,   410,  1175,  1176,   589,   419,  1485,   846,   847,
     225,   120,   496,   496,   506,   120,  1186,  1509,  1070,  1067,
     626,  1187,  1202,  1203,  1204,  1242,     8,  1459,   120,   614,
     450,   693,  1040,  1042,   300,  1271,  1272,   120,   120,   120,
     618,   423,   619,  1529,   316,   752,     9,   475,  1591,   752,
    1029,  1030,   712,     8,  -161,   424,  1031,   547,     8,   642,
     216,   365,   214,   235,   216,   431,  1032,   490,  1595,  1100,
     725,   493,   617,     9,  -161,   365,   373,   120,     9,   365,
     365,   624,   214,   113,   632,  1017,   225,  1395,   753,   120,
     225,  1396,   753,   605,  1492,  1397,  1510,   586,  1029,  1030,
     694,    98,  1555,  1302,  1031,  1398,     1,  1298,   511,   856,
     615,    45,    47,     1,  1032,    49,  1213,    50,    52,   443,
    1062,  1068,  1297,   995,   415,  1071,   534,   128,   594,   243,
     942,  1639,  1356,  1357,  1285,  1358,   977,   978,  -262,  1359,
    1380,  1293,   899,   243,   747,  1139,  1382,  1384,   747,  1253,
     516,   511,   517,   432,   900,   225,   867,  1102,  -262,   316,
     214,     1,   870,   670,  1196,   -59,  1604,  1201,  1116,   225,
    1233,   120,   243,   120,  1248,  1148,    80,    81,  1399,   749,
     758,   689,   373,   810,  1123,   815,     1,  1572,   316,  1573,
     761,  1046,  1262,   812,  1580,  1581,  1582,   857,  1584,  1585,
    1586,  1587,   175,  1337,   251,  1278,   621,   552,   857,   857,
    1223,   510,  1109,   857,  1060,  1061,   831,  1647,  1051,  1649,
    1222,  1652,   721,  1231,   120,  1706,   129,  1280,  1281,   941,
     552,   552,  1290,   432,   189,   153,   675,   205,  1394,     8,
     154,   155,  1424,   156,   199,  1395,  1157,  1395,  1035,  1396,
     940,  1396,  1197,  1397,  1413,   432,  1559,     8,   857,     9,
    1291,   869,  1249,  1398,   162,  1398,   740,  1731,   827,  1258,
     995,  1292,   365,   511,  1496,  1418,   975,     9,     1,  1739,
    1263,  1395,   373,   373,  1743,  1396,  1745,   622,  1747,  1397,
    1749,   511,  1751,  1279,  1753,  1017,   365,   365,   365,  1398,
     365,   866,   365,   511,   920,   728,  1673,  1048,  1168,   731,
     732,  1331,  1334,  1335,  1681,  1136,  1282,   860,   863,     8,
     432,  1336,  1431,  1361,   902,  1431,  1411,  1021,  1431,  1431,
    1441,  1442,  1431,  1431,  1431,  1446,  1399,   288,  1399,     9,
    1158,  1159,  1160,  1453,  1465,  1733,  -713,   741,   432,   828,
     366,  1056,   926,  1116,  1254,   343,   288,   -70,   929,   432,
     -70,   -70,   591,   592,  1213,   216,   367,   670,     1,  1049,
     375,   944,  1399,   670,  1058,   966,   376,     8,  1503,   131,
     973,   -70,   511,   216,   689,   921,   -70,  1074,  -794,  -794,
    -262,  1500,   120,   974,   995,  1504,  -262,     9,  1124,  1197,
     432,   432,  1158,  1159,  1160,  1526,   937,   939,  -713,   432,
    -262,  1249,   968,   215,   432,  1477,  1738,   154,   155,  1395,
    1365,   995,  1527,  1396,   593,  -262,  -262,  1397,  1484,  1255,
    1147,   432,  1249,   582,   675,  1265,  1514,  1398,   675,   511,
    -264,  1027,   289,   957,  1020,  1395,  -264,  1516,  1588,  1396,
    -794,  1654,   511,  1041,  1043,  1059,  1096,   675,   154,   155,
    -264,   289,    73,  1398,    74,  1054,    75,   969,   511,   970,
    1490,  1324,  1619,  1017,  1256,   584,   585,     1,   129,   511,
    -262,  1621,  -262,  1624,  1626,  1628,     1,   218,  1395,  1145,
    1073,  1632,  1396,  1634,   900,   674,  1397,  1364,   232,  1360,
       1,   534,  1148,  1466,  -262,  1353,  1398,   947,  1636,    12,
    1399,  1682,  1692,  1550,    62,  1693,  1266,  1515,  1219,     6,
     251,  1231,  1694,   365,    70,   351,   221,  1097,  1517,  1589,
      98,  1695,   587,  1033,  1696,  1199,  1399,    96,  1697,  1566,
     106,   111,   121,  1148,  1304,  1483,   365,   365,   106,   137,
    1699,     1,   744,  1620,   588,  1701,  1215,     1,  1217,  1283,
    1103,  1702,  1622,  1703,  1625,  1627,  1629,   555,  1226,     1,
     150,   746,  1633,    12,  1635,   903,    31,    32,    33,  1399,
    1704,   251,  -131,   180,   182,  1605,   251,  1602,   216,  1637,
    1728,   421,  1683,  1625,   813,   121,  1625,    96,    96,  1729,
    1252,  1730,  -131,  1625,  1741,  -124,  1592,   106,    65,   106,
     223,   216,  1625,   670,  1137,  1625,     1,   584,   585,  1698,
    1478,   238,   121,   121,   230,  -124,    71,  1117,  1119,     1,
     446,  1700,   561,    40,   121,  1651,  1625,  1035,   293,   720,
     584,   585,  1625,  1213,  1625,   447,  1688,   106,    72,   121,
     150,   471,  1133,    89,  1133,    42,     1,     8,   114,   475,
     472,  1705,   231,  1091,  1640,  1641,   475,  1095,   758,  1642,
     675,  1625,   747,  1214,   587,  1216,   233,     9,     8,     1,
    1625,  1230,  1625,   675,   448,  1742,   142,  1481,   584,   585,
       1,   959,   675,  -794,  -794,   747,   588,   587,     9,   449,
     553,   584,   585,   573,  1251,  1044,   226,     8,    -3,   554,
      -3,   119,    -3,   244,   121,    96,   245,   728,   900,   588,
      96,  1549,    96,   121,  1250,   900,  1546,     9,   106,  1345,
     246,  1347,     6,   106,     6,   251,   251,   251,   248,  1540,
     416,   417,  1352,    98,  1257,   587,  1033,   121,  1033,   415,
     535,   121,   535,   427,   985,  -794,    98,     8,   587,     7,
    1307,   141,  1308,   441,   121,    -3,    -3,   588,    -3,   986,
       8,   252,  1368,   121,   121,   121,   457,     9,   176,   536,
     588,   733,     1,     8,     1,   537,   538,   537,   538,   245,
       9,   251,  1663,  1126,  1665,  1666,   251,   251,   251,  1670,
       1,  1672,     8,     9,   727,  1676,     8,  1678,   489,  1680,
     670,  1329,  1261,   121,   291,   150,   120,   479,   245,   150,
     150,   294,     9,   480,   150,   121,     9,   113,  1133,   321,
     322,   152,   153,   183,  1133,   957,     8,   154,   155,   184,
     156,   296,   973,   900,   157,   158,  1650,  1029,  1030,   159,
     643,    12,   185,  1031,   475,  1354,     9,   298,   160,   161,
     226,   162,   301,  1032,   227,   548,   584,   585,   680,   303,
    1717,   675,  1719,    62,   152,   153,   580,  1724,   481,     8,
     154,   155,  1467,   156,   482,   927,     8,   157,   158,  1367,
     206,   928,   159,   190,     8,   610,   191,   192,   206,     9,
     310,   160,   161,    88,   162,   808,     9,   121,   226,   121,
       1,     6,   859,   443,     9,   251,  -144,   586,    78,   644,
     645,    98,   216,   587,     8,  1033,   312,   238,  1385,  -196,
     216,  1029,  1030,    79,  1434,  -196,  -144,  1031,   314,     8,
    1709,   317,   641,   401,     9,   588,  -196,  1032,  1329,  -196,
    1344,     8,   100,   670,   347,   305,   163,   164,  1273,     9,
     121,    80,    81,  -208,  1273,   681,  1029,  1030,   664,   251,
     357,     9,  1031,   673,  1029,  1030,   356,   251,   102,  1230,
    1031,   190,  1032,  -208,   191,   192,     8,  1299,   374,     8,
    1032,  1300,     8,  1539,     1,  1535,   692,  1553,  1426,   163,
     164,   251,  1427,    88,   475,   475,     9,   475,  1212,     9,
    1241,   475,     9,  1241,  1241,   499,   379,   113,   120,  -196,
    1482,  -794,  -794,   675,   381,  -794,  -794,  -794,  -794,     1,
    -794,   500,   573,   289,  -794,  -794,     8,     1,   190,  -794,
     380,   191,   192,     6,  1029,  1030,  -794,   382,  -794,  -794,
    1031,  -794,   384,    86,  1434,   107,     9,  1033,  -801,   122,
    1032,   575,   383,  1740,     8,   246,     8,  1606,    87,  -801,
    -117,  1506,  1471,  1535,   133,  1507,   670,   135,   193,   194,
     195,    88,   580,   580,     9,     8,     9,   385,     8,  1261,
    -117,   138,   523,   532,   834,   672,   477,   478,   837,   996,
     999,  1392,  -202,     8,     8,     9,     8,     1,     9,   399,
       8,     8,     8,   610,  1552,   420,  1080,     8,  1081,   610,
     610,   305,  -202,     9,     9,   386,     9,   430,   121,   444,
       9,     9,     9,   675,    88,     8,   434,     9,  1385,   112,
     443,   445,     1,  1583,   152,   153,  -794,  -794,   451,     8,
     154,   155,    88,   156,     6,     9,   452,   157,   158,     6,
     113,   453,   159,     8,   514,   515,   458,  1417,  1033,     9,
     473,   160,   161,  1033,   162,   695,   573,   670,   121,   574,
       8,   152,   153,     9,  1261,   696,     8,   154,   155,   494,
     156,   498,   154,   155,   157,   158,  1498,   121,   573,   159,
       9,   491,     8,     8,   931,   575,     9,  1221,   160,   161,
     509,   162,   152,   153,   154,   155,   513,     8,   154,   155,
      88,   156,     9,     9,   518,   157,   158,   575,   113,   519,
     159,   529,     6,  1541,   254,   251,   255,     9,   530,   160,
     161,   531,   162,   289,   543,   120,  1033,   675,  1261,   953,
     153,   958,   960,  1674,     8,   154,   155,   550,   156,   435,
     154,   155,   967,   436,  1501,   343,   549,   437,   572,   163,
     164,   982,   735,   729,     9,   676,   736,   738,   571,   162,
     197,   198,   982,   982,   982,   982,   840,   841,  1089,  1090,
       6,     6,   597,    15,    16,     6,    17,   583,  1646,  1471,
     598,  1471,   670,  1471,  1033,  1033,   163,   164,   603,  1033,
     604,   168,     1,  1385,   391,   620,  1435,   623,   675,  1439,
    1440,  1194,  1195,  1443,  1444,  1445,   625,   633,   654,   649,
    1045,   650,   656,  1084,   661,   671,   580,   163,   164,   152,
     153,  1055,   679,   663,     8,   154,   155,   704,   156,   713,
     705,   706,   157,   158,   443,   707,   716,   159,   710,   714,
     719,   715,   722,   726,     9,  1065,   160,   161,  1065,   162,
     729,   111,   742,   743,   744,   745,   651,  1169,   820,   821,
    1173,  1174,   152,   153,   822,  1646,   829,     8,   154,   155,
     835,   156,  1183,  1184,  1185,   157,   158,   838,   842,   843,
     159,   852,   853,   858,   390,   622,   324,     9,   874,   160,
     161,  1101,   162,   876,  1085,   877,   880,   896,   289,   675,
     881,   882,   889,   912,   915,   924,   919,  1471,   930,   932,
     935,   946,     6,   943,   948,   949,   933,   934,     6,   950,
     951,   952,  1543,   954,   961,   976,  1033,  1009,   152,   153,
    1010,   983,  1033,     8,   154,   155,   984,   156,   987,   120,
     406,   157,   158,   988,   163,   164,   159,  1138,   989,   990,
     413,   414,   991,     9,   992,   160,   161,  1001,   162,  1144,
    1002,     8,  1003,  1004,  1005,  1011,  1014,  1012,   426,   982,
     429,  1015,   982,  1013,   982,   982,   982,   982,   982,   982,
     982,     9,  1022,  1028,  1047,  1063,   113,   163,   164,   982,
     982,   982,   982,   982,  1069,  1072,   621,  1075,  1092,  1076,
    1106,  1107,   358,  1110,  -794,  1120,  1125,  -794,  1121,   696,
    1135,  1152,  1155,  -794,  1371,   258,   259,   260,  1372,  1373,
    1374,  1136,  1167,  1148,  1177,  1137,   268,  1375,  1178,  1179,
    1376,  1180,  1220,  -794,  1181,   580,  1182,   580,  1206,  -794,
    -794,  -794,  1224,  1207,  1228,  1208,  1232,  -794,  -794,  -794,
    -794,  -794,  -794,   163,   164,   859,  1234,  1237,  -794,   255,
     520,  -794,  -794,  1264,  -794,  1235,  1236,  1111,  1270,   152,
     153,  1277,   527,   429,     8,   154,   155,  1289,   156,  1366,
     430,  1296,   157,   158,  1301,  1101,  -794,   159,  -794,  1303,
    1309,  1312,  1308,  1325,     9,  1310,   160,   161,  1313,   162,
    1314,  1315,  -794,  1316,  -794,  -794,  1350,  -794,  1317,  -794,
    1389,  1318,  1370,  1319,  1320,   527,  1406,  1415,  1321,   616,
    1342,  1405,  1414,  1286,  1287,  1288,  1416,  -794,  1322,     1,
    1323,  1409,  1420,  1421,  1295,  1422,   982,   982,   763,  1447,
    1432,  1448,  1450,  1451,   629,   631,  1456,  1464,  1457,  1469,
    1472,  1473,   982,  1474,   638,  1479,  1486,   640,  1488,  1495,
    1480,  1487,   648,  1508,  1557,  1556,  1511,  1567,   652,   653,
    1565,   655,  1513,   657,  1538,   658,  1518,   660,  1519,  1520,
    1521,  1522,   662,  1523,  1524,  1525,  1569,  1574,  1333,  1576,
    1498,  1501,  1590,  1597,   163,   164,  1341,  1600,  1343,  1609,
    1610,   678,  1613,  1346,   683,  1348,  1349,  1611,  1608,  1612,
    -450,  1616,  1618,  1662,  1351,   527,  1630,  1631,   702,   342,
     345,  1638,  1658,  1660,  1664,  1667,  1669,  1671,  1675,  1677,
     709,  1679,  1685,  1689,   121,   711,   527,  1101,  1101,  1684,
    1707,  1690,  1691,  1710,  1711,  1712,  1369,  1713,  1714,   121,
    1715,  1716,  1388,   724,   527,   342,  1718,  1720,  1721,  1393,
    1722,  1723,  1725,  1734,  1726,  1735,  1736,   958,  1737,  1727,
    1407,  1408,   739,  1744,  1754,   945,  1746,    27,  1748,  1750,
    1752,   734,  1412,  1463,   982,  1218,  1050,   108,   411,   982,
     377,   563,   378,   564,   565,  1198,  1064,  1330,   982,   132,
    1259,   982,   922,   690,   982,   982,   982,   982,   982,   982,
     982,   982,   832,  1122,   464,  1362,   497,   404,   495,   402,
    1452,   936,  1643,   938,   546,  -794,  1497,  -794,   465,  1134,
    1594,  1284,  1493,  1460,  1656,  1461,  1708,  1245,  1327,  1008,
    1462,   507,  -794,  1425,  -794,  -794,   527,   871,  1505,   413,
    -794,  1172,  1668,  1571,  1311,  1512,  1468,   878,   627,  1079,
     871,   151,    64,  -794,     0,     0,     0,     0,   883,   884,
     873,     0,     0,     0,   888,   342,     0,   524,  -794,  -794,
    -794,  -794,  -794,  -794,  -794,   466,  -794,  -794,  -794,  -794,
    -794,  -794,     0,     0,  -794,     0,  -794,   345,     0,     0,
       0,   916,     0,   918,     0,   982,     0,     0,   982,   982,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   527,   982,   982,   358,     0,  -794,
       0,     1,  -794,     0,     0,     0,     0,     0,  -794,     0,
       0,     0,     0,     0,     0,  1542,     0,   342,     0,   121,
       0,   121,     0,  1548,   342,   342,     0,     0,  -794,     0,
       0,  1554,     0,     0,  -794,  -794,  -794,   342,     0,     0,
     342,     0,  -794,  -794,  -794,  -794,  -794,  -794,     0,   -55,
       0,     0,     0,  -794,     0,     0,  -794,  -794,     0,  -794,
     152,   153,     0,     0,     0,     8,   154,   155,     0,   156,
       0,     0,     0,   157,   158,     0,     0,     0,   159,     0,
       0,  -794,     0,  -794,     0,     9,     0,   160,   161,     0,
     162,     0,     0,     0,     0,     0,     0,  -794,     0,  -794,
    -794,  1607,  -794,  1209,  -794,  -794,     0,     0,  -794,     0,
       0,     0,     0,  1052,  -794,     0,     0,  1210,     0,     0,
       0,     0,  -794,     0,     1,     0,     0,     0,     0,     0,
       0,   342,     0,  1240,  -794,  1085,     0,     0,   342,     0,
       0,     0,     0,  1066,  1341,     0,     0,     0,  -794,  -794,
    -794,  -794,  -794,  -794,  1653,     0,     0,     0,     0,  -794,
    1077,  1077,  -794,  -794,     0,  -794,     0,  1029,  1030,   648,
       0,   648,     0,  1031,     0,   527,   527,   527,     0,     0,
    1093,     0,     0,  1032,     0,   163,   164,     0,     0,     0,
       0,     0,     0,     0,   121,     0,     0,     0,     0,  1104,
       0,  1105,     0,     0,     0,  1108,  -794,     0,     0,     0,
    -794,     0,     0,     0,     0,     0,     0,   702,     0,     0,
       0,   709,     0,     0,     0,     0,     0,   342,  -794,     0,
       1,     0,     0,     0,     0,   121,     0,     0,     0,     0,
     342,     0,   342,     0,     0,     0,     0,     0,     0,   342,
       0,   342,     0,     0,     0,     0,     0,     0,     0,   342,
       0,     0,     0,   342,   342,     0,   342,  1156,   342,   342,
       0,   342,     0,   342,  1732,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   342,
       0,   152,   153,     0,   342,   696,     8,   154,   155,     0,
     156,     0,     0,     0,   157,   158,     0,     0,     0,   159,
       0,     0,     0,   342,     0,     0,     9,     0,   160,   161,
     342,   162,   342,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   342,     0,     0,     0,     0,
       0,     0,     0,  -106,   140,     0,  -106,     0,     0,  -106,
    -106,  -106,     0,     0,     0,  -106,  -106,  -106,     0,  -106,
       0,     0,     0,  -106,  -106,     0,     0,     0,  -106,     0,
     527,     0,     0,   527,   527,  -106,     0,  -106,  -106,     0,
    -106,  -106,  -106,  -106,     0,     0,     0,     0,     0,  -106,
    -106,  -106,  -106,  -106,  -106,  -106,  -106,  -106,     0,  -106,
    -106,     0,     0,  -106,  -106,  1269,  -106,     0,  -106,  -106,
       0,     0,     0,     0,  -106,     0,   163,   164,     0,     0,
       0,     0,  -106,  -106,  -106,  -106,     0,  -106,  -106,     0,
    -106,     0,     0,     0,     0,     0,     0,     0,     0,  1305,
       0,     0,     0,     0,  -106,     0,  -106,  -106,     0,  -106,
    -106,  -106,  -106,  -106,     0,  -106,     0,  1686,     0,     8,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  -106,
       0,  -106,     0,     0,     0,  -106,  -106,     0,     0,     9,
       0,     0,   342,     0,   113,     0,     0,     0,     0,     0,
    1338,  1339,     0,     0,   342,   342,     0,     0,     0,   342,
     599,     0,  -794,     0,     0,  -794,     0,     0,     0,     0,
       0,  -794,  1371,   258,   259,   260,  1372,  1373,  1374,     0,
       0,     0,     0,    28,   268,  1375,    29,   342,  1376,   342,
       0,  -794,     8,     0,     0,     0,     0,  -794,  -794,  -794,
       0,     0,     0,     0,     0,  -794,  -794,  -794,  -794,  -794,
    -794,     0,     9,     0,     0,     0,  -794,     0,     0,  -794,
    -794,     0,  -794,     0,     0,     0,    30,    31,    32,    33,
      34,    35,     0,  1410,     0,     0,     0,    36,     0,     0,
      37,    38,     0,    39,  -794,     0,  -794,     0,     0,     0,
    1151,     0,     0,     0,     0,     0,     0,     0,  1437,  1437,
    -794,     0,  -794,  -794,     0,  -794,   601,  -794,  -794,     0,
       0,  -794,     0,     0,     0,     0,     0,  -794,     0,     0,
       0,     0,     0,     0,    40,  -794,     0,     1,    41,     0,
       0,     0,     0,     0,     0,     0,     0,  -794,     0,     0,
       0,     0,     0,  -794,  -794,  -794,    42,     0,     0,     0,
       0,  -794,  -794,  -794,  -794,  -794,  -794,     0,     0,     0,
       0,     0,  -794,   342,     0,  -794,  -794,     0,  -794,     0,
       0,     0,     0,     0,     0,     0,     0,   342,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   342,     0,
    -794,     0,  -794,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   342,     0,  -794,     0,  -794,  -794,
       0,  -794,     0,  -794,  1082,   342,   342,     0,     0,   342,
       0,     0,     0,   474,     0,  -794,     0,  -794,     0,     0,
       0,  -794,     0,     1,     0,     0,     0,     0,     0,   527,
    1536,  1537,  -794,     0,  -794,  -794,     0,     0,     0,     0,
    -794,     0,     0,  1544,     0,     0,  1545,     0,  1547,     0,
       0,     0,     0,  -794,  1551,     0,     0,   342,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  -794,  -794,
    -794,  -794,  -794,  -794,  -794,     0,  -794,  -794,  -794,  -794,
    -794,  -794,     0,     0,  -794,  1437,  -794,  1437,  1151,  1575,
       0,  1579,  1437,  1437,  1437,     0,  1437,  1437,  1437,  1437,
       0,     0,     0,     0,     0,     0,     0,   527,     0,   152,
     153,     0,     0,     0,     8,   154,   155,     0,   156,     0,
       0,     0,   157,   158,     0,     0,     0,   159,     0,     0,
       0,     1,     0,     0,     9,     0,   160,   161,     0,   162,
       0,  1615,     0,  1615,     0,     0,     0,     0,     0,   459,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    -504,     0,  -504,   460,     0,     0,     0,     0,     0,     0,
     342,     0,     0,     0,  1648,     0,     0,  -504,     0,  -504,
    -504,     0,  1243,     0,  1085,  -504,     0,     0,     0,     0,
    1615,     0,  1615,     0,  1579,     0,  1579,  1579,  -504,  1579,
       0,  1579,     0,  1579,  1437,     0,   342,  1579,     0,  1579,
       0,  1579,  1437,  -504,  -504,  -504,  -504,  -504,  -504,  -504,
       0,  -504,  -504,  -504,  -504,  -504,  -504,     0,     0,  -504,
       0,  -504,   461,   124,   163,   164,     0,     0,     0,   342,
     342,     0,     0,     0,  -794,     0,  -794,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  -794,     0,  -794,  -794,     0,     0,     0,     0,  -794,
       0,     0,  1579,     0,  1579,     0,  -504,     0,     0,  1579,
       0,   818,  -794,  -379,     0,     0,  -379,     0,     0,     0,
       0,     0,  -379,     0,     0,     0,     0,  -794,  -794,  -794,
    -794,  -794,  -794,  -794,     0,  -794,  -794,  -794,  -794,  -794,
    -794,   342,  -379,  -794,  1499,  -794,     0,     0,     0,  1502,
       0,     0,     0,     0,     0,     0,  -379,  -379,  -379,  -379,
    -379,  -379,     0,     0,     0,     0,     0,  -379,   342,     0,
    -379,  -379,     0,  -379,     0,  -379,  -379,     0,     0,     0,
       0,  -379,     0,     0,     0,     0,     0,     0,     0,     0,
       1,  -379,     0,     0,  1458,     0,  -794,     0,     0,  -794,
       0,     0,   152,   153,     0,  -794,     0,     8,   154,   155,
       0,   156,     0,     0,  -379,   157,   158,     0,  -379,     0,
     159,     0,     0,     0,     0,  -794,     0,     9,     0,   160,
     161,  1568,   162,     0,  1570,  1502,  -379,     0,  -379,  -794,
    -794,  -794,  -794,  -794,  -794,     0,     0,     0,     0,     0,
    -794,     0,     0,  -794,  -794,     0,  -794,     0,  1029,  1030,
       0,     0,     0,     0,  1031,     0,     0,   342,   342,     0,
       0,     0,     0,     0,  1032,   342,   342,     0,   342,     0,
       0,     0,   342,     0,     0,     0,     0,     0,     0,     0,
     644,   645,     0,     0,     0,     0,     0,  -794,     0,     0,
       0,  -794,     0,     0,     0,     0,   342,     0,     0,     0,
     342,   152,   153,     0,     0,     0,     8,   154,   155,  -794,
     156,     1,     0,     0,   157,   158,     0,   163,   164,   159,
       0,     0,     0,     0,     0,     0,     9,     0,   160,   161,
       0,   162,   152,   153,     0,     0,   342,     8,   154,   155,
       0,   156,     0,     0,     0,   157,   158,     0,     0,     0,
     159,     0,     0,     0,     0,     0,     0,     9,     0,   160,
     161,     0,   162,     0,     0,     0,   152,   153,     0,   342,
       0,     8,   154,   155,  1244,   156,  1085,     0,     0,   157,
     158,     0,     0,     0,   159,     0,     0,     0,     0,     0,
       0,     9,     0,   160,   161,     0,   162,     0,     0,     0,
       0,     0,     0,   152,   153,  1593,     0,  1532,     8,   154,
     155,     0,   156,  1268,     0,     0,   157,   158,     0,     0,
       0,   159,     0,     0,     0,     0,   163,   164,     9,     0,
     160,   161,     0,   162,     0,     0,     0,   152,   153,     0,
       0,  1085,     8,   154,   155,     0,   156,     0,     0,     0,
     157,   158,     0,     0,     0,   159,     0,   163,   164,     0,
       0,     0,     9,     0,   160,   161,     0,   162,   152,   153,
       0,     0,     0,     8,   154,   155,     0,   156,     0,     0,
       0,   157,   158,     0,     0,     0,   159,     0,     0,     0,
       0,   163,   164,     9,     0,   160,   161,     0,   162,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   152,   153,
       0,     0,  1532,     8,   154,   155,     0,   202,     0,     0,
       0,   157,   158,     0,     0,     0,   159,   762,   163,   164,
       0,     0,     0,     9,     0,   160,   161,     0,   162,   152,
     153,     0,   763,     0,     8,   154,   155,     0,  1189,     0,
       0,     0,   157,   158,     0,     0,     0,   159,     0,     0,
       0,     0,   163,   164,     9,     0,   160,   161,     0,   162,
     152,   153,     0,     0,     0,     8,   154,   155,     0,  1326,
       0,     0,     0,   157,   158,     0,     0,     0,   159,     0,
       0,   764,     0,   163,   164,     9,     0,   160,   161,     0,
     162,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   765,   559,   766,   767,   768,   769,   770,   771,
     772,     0,     0,    28,     0,     0,    29,     0,     0,     0,
       0,   773,     8,   163,   164,     0,     0,     0,     0,   774,
     775,     0,     0,     0,     0,   776,   777,   778,   779,   780,
     781,   782,     9,     0,     0,     0,     0,     0,   555,   556,
     557,     0,     0,     0,   163,   164,    30,    31,    32,    33,
      34,    35,     0,     0,     0,  1246,     0,    36,   154,   155,
      37,    38,     0,    39,     0,   325,   326,   327,   328,   329,
     330,   331,   332,   333,     0,   163,   164,     0,     0,   334,
     335,     0,     0,     0,     0,   558,     0,   559,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   560,     0,   561,    40,     0,   562,  1596,    41,     0,
     154,   155,     0,     0,     0,     0,     0,   325,   326,   327,
     328,   329,   330,   331,   332,   333,    42,     0,     0,     0,
       0,   334,   335,     0,     0,  1687,     0,     0,   154,   155,
       0,     0,     0,     0,   336,   325,   326,   327,   328,   329,
     330,   331,   332,   333,     0,     0,     0,     0,     0,   334,
     335,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   337,   338,   339,   340,   634,
     635,   636,     0,     0,     0,   637,   325,   326,   327,   328,
     329,   330,   331,   332,   333,     0,   336,   634,   635,   636,
     334,   335,     0,   875,   325,   326,   327,   328,   329,   330,
     331,   332,   333,     0,     0,     0,     0,     0,   334,   335,
       0,     0,     0,     0,   336,     0,     0,   337,   338,   339,
     340,     0,   634,   635,   636,     0,     0,     0,   879,   325,
     326,   327,   328,   329,   330,   331,   332,   333,     0,     0,
       0,     0,     0,   334,   335,   337,   338,   339,   340,     0,
     634,   635,   636,     0,     0,   336,  1225,   325,   326,   327,
     328,   329,   330,   331,   332,   333,     0,     0,     0,     0,
       0,   334,   335,   336,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   337,   338,   339,   340,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   337,   338,   339,   340,   336,   634,
     635,   636,     0,     0,     0,  1423,   325,   326,   327,   328,
     329,   330,   331,   332,   333,     0,     0,     0,     0,     0,
     334,   335,     0,     0,     0,     0,   336,     0,     0,   337,
     338,   339,   340,     0,   154,   155,   395,     0,     0,     0,
       0,   325,   326,   327,   328,   329,   330,   331,   332,   333,
       0,     0,     0,     0,     0,   334,   335,   337,   338,   339,
     340,     0,   154,   155,     0,     0,     0,     0,     0,   325,
     326,   327,   328,   329,   330,   331,   332,   333,     0,     0,
     154,   155,   717,   334,   335,   336,   512,   325,   326,   327,
     328,   329,   330,   331,   332,   333,     0,     0,     0,     0,
       0,   334,   335,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   337,   338,   339,   340,
     336,   154,   155,   868,     0,     0,     0,     0,   325,   326,
     327,   328,   329,   330,   331,   332,   333,     0,     0,     0,
       0,     0,   334,   335,     0,     0,     0,     0,   336,     0,
       0,   337,   338,   339,   340,     0,     0,     0,     0,     0,
       0,     0,   634,   635,   636,     0,   336,     0,     0,   325,
     326,   327,   328,   329,   330,   331,   332,   333,     0,   337,
     338,   339,   340,   334,   335,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   337,   338,   339,
     340,     0,   154,   155,     0,     0,     0,   336,   879,   325,
     326,   327,   328,   329,   330,   331,   332,   333,     0,     0,
       0,   154,   155,   334,   335,   890,     0,     0,   325,   326,
     327,   328,   329,   330,   331,   332,   333,     0,   337,   338,
     339,   340,   334,   335,     0,   154,   155,     0,   336,   891,
       0,     0,   325,   326,   327,   328,   329,   330,   331,   332,
     333,     0,     0,     0,     0,     0,   334,   335,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   337,
     338,   339,   340,   154,   155,     0,     0,   892,   336,     0,
     325,   326,   327,   328,   329,   330,   331,   332,   333,     0,
       0,     0,   154,   155,   334,   335,   893,   336,     0,   325,
     326,   327,   328,   329,   330,   331,   332,   333,     0,   337,
     338,   339,   340,   334,   335,     0,     0,     0,     0,     0,
       0,   336,     0,     0,     0,     0,     0,     0,   337,   338,
     339,   340,     0,     0,     0,   154,   155,     0,     0,   894,
       0,     0,   325,   326,   327,   328,   329,   330,   331,   332,
     333,     0,   337,   338,   339,   340,   334,   335,     0,   336,
     154,   155,     0,     0,   897,     0,     0,   325,   326,   327,
     328,   329,   330,   331,   332,   333,     0,     0,   336,     0,
       0,   334,   335,     0,     0,     0,     0,     0,     0,     0,
     337,   338,   339,   340,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   337,
     338,   339,   340,     0,     0,   154,   155,     0,     0,   898,
       0,   336,   325,   326,   327,   328,   329,   330,   331,   332,
     333,     0,     0,     0,     0,     0,   334,   335,     0,     0,
       0,     0,     0,     0,     0,     0,   336,     0,     0,     0,
       0,     0,   337,   338,   339,   340,     0,     0,     0,     0,
     154,   155,     0,     0,  1306,     0,     0,   325,   326,   327,
     328,   329,   330,   331,   332,   333,     0,   337,   338,   339,
     340,   334,   335,   154,   155,     0,     0,  1391,     0,     0,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   154,
     155,   336,     0,  1454,   334,   335,   325,   326,   327,   328,
     329,   330,   331,   332,   333,     0,     0,     0,     0,     0,
     334,   335,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   337,   338,   339,   340,     0,     0,     0,     0,
     154,   155,     0,     0,  1455,     0,   336,   325,   326,   327,
     328,   329,   330,   331,   332,   333,     0,     0,     0,     0,
       0,   334,   335,     0,     0,     0,     0,     0,     0,   336,
       0,     0,     0,     0,     0,     0,     0,   337,   338,   339,
     340,     0,     0,   154,   155,   336,     0,  1598,     0,     0,
     325,   326,   327,   328,   329,   330,   331,   332,   333,     0,
     337,   338,   339,   340,   334,   335,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   337,   338,   339,   340,
     154,   155,     0,     0,  1599,     0,   336,   325,   326,   327,
     328,   329,   330,   331,   332,   333,     0,     0,     0,     0,
       0,   334,   335,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   337,   338,   339,
     340,     0,     0,   154,   155,     0,     0,  1601,     0,   336,
     325,   326,   327,   328,   329,   330,   331,   332,   333,     0,
       0,     0,     0,     0,   334,   335,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     337,   338,   339,   340,   154,   155,   336,     0,     0,     0,
       0,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     154,   155,     0,     0,     0,   334,   335,   325,   326,   327,
     328,   329,   330,   331,   332,   333,     0,   337,   338,   339,
     340,   334,   335,     0,     0,     0,     0,     0,     0,   336,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     337,   338,   339,   340,     0,     0,     0,     0,     0,  1623,
     336,     8,     0,   253,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   336,     0,   254,     0,
     255,     9,     0,     0,     0,     0,   113,   555,   591,   592,
       0,   337,   338,   339,   340,   903,    31,    32,    33,   256,
       0,     0,     0,     0,     0,     0,     0,   337,   338,   339,
     340,     0,     0,     0,   257,   258,   259,   260,   261,   262,
     263,     0,   264,   265,   266,   267,   268,   269,     0,     8,
     270,   253,   271,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   254,     0,   255,     9,
     593,     0,   561,    40,   113,   555,     0,     0,     0,     0,
       0,     0,     0,   903,    31,    32,    33,   256,     0,     0,
       0,     0,     0,     0,     0,    42,     8,   763,     0,     0,
       0,     0,   257,   258,   259,   260,   261,   262,   263,     0,
     264,   265,   266,   267,   268,   269,     9,     0,   270,     0,
     271,   113,   555,     0,     0,     0,     0,     0,     0,     0,
     903,    31,    32,    33,     0,     0,     0,     0,     0,     0,
     561,    40,     0,     0,     0,     0,   764,     0,     0,  1371,
     258,   259,   260,  1372,  1373,  1374,     0,     0,     0,     0,
       0,   268,  1375,    42,     0,  1376,     0,  1007,   559,   766,
     767,   768,   769,   770,   771,   772,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   773,   561,    40,     0,
       0,     0,     0,     0,   774,   775,     8,     0,   253,     0,
     776,   777,   778,   779,   780,   781,   782,     0,     0,     0,
      42,     0,     0,   254,     0,   255,     9,     0,     0,     0,
       0,   113,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   256,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   257,
     258,   259,   260,   261,   262,   263,     0,   264,   265,   266,
     267,   268,   269,     0,     0,   270,     0,   271
};

/* YYCONFLP[YYPACT[STATE-NUM]] -- Pointer into YYCONFL of start of
   list of conflicting reductions corresponding to action entry for
   state STATE-NUM in yytable.  0 means no conflicts.  The list in
   yyconfl is terminated by a rule number of 0.  */
static const unsigned char yyconflp[] =
{
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0
};

/* YYCONFL[I] -- lists of conflicting rule numbers, each terminated by
   0, pointed into by YYCONFLP.  */
static const short int yyconfl[] =
{
       0
};

static const short int yycheck[] =
{
       0,    34,   162,     3,     4,   452,   462,   463,   432,   106,
      88,   196,   673,   555,     0,    82,  1032,   243,   782,   561,
      96,   555,   481,    99,   819,   481,   228,   561,    87,   361,
    1112,  1189,   234,   775,   776,   777,   575,   763,   349,   265,
      34,   583,   743,   202,   494,   361,   748,   574,   774,   775,
     776,   777,     6,     6,   341,  1261,     6,   113,     6,     6,
     605,  1261,  1261,    62,   605,   132,   611,   612,    29,   557,
     611,   612,   560,   831,   481,  1397,   169,    40,   156,   763,
    1402,   114,   115,   477,   142,   172,   375,   890,  1097,    10,
     379,   380,    11,   126,   897,    89,  1119,    16,     1,    18,
    1400,     3,    10,    15,    18,    36,    34,    15,    18,   420,
     421,    10,   814,   114,   115,     1,  1569,     0,    89,    90,
     114,    17,     8,     8,   202,    11,    12,    12,   101,     6,
     197,   198,    12,    47,    48,    62,    99,    47,   101,    11,
      17,    26,    10,    98,    72,    84,    32,   206,   142,     1,
      22,    37,    32,    39,    40,   128,   215,    12,    12,    87,
      12,    16,   129,  1616,    10,  1618,    18,  1489,  1326,     0,
    1492,    26,    84,  1495,   129,   582,   139,    32,    32,    17,
      32,    22,    18,   183,   184,    12,   114,   115,   348,   128,
     104,    18,   102,    10,   104,   123,   127,  1497,   126,    98,
     102,   128,    98,   388,   389,    32,   239,   128,   667,   128,
     243,   667,   126,   141,    99,   101,   128,   673,   529,   295,
     128,    98,    10,   256,   127,   684,   109,   110,   684,   112,
      98,   391,   265,   266,   267,   522,   207,  1032,   239,  1034,
    1263,  1250,   128,  1266,    36,   128,    10,   101,   128,   307,
     102,   212,    98,   346,   341,   981,    10,   220,   317,    10,
      98,   963,   964,   965,   596,  1471,   102,   599,   600,   601,
     602,  1471,  1471,   128,    10,   102,    10,   684,   206,  1005,
     596,    98,  1085,   572,   600,   679,   602,   215,   102,  1611,
    1372,  1315,     1,  1451,    10,    10,  1054,   981,    10,   987,
     988,    10,    10,   991,   992,   372,    98,  1389,   597,   598,
      98,   239,   311,   312,   314,   243,  1004,    19,   863,   860,
     417,  1005,  1024,  1025,  1026,    15,    12,  1343,   256,    17,
     261,   491,   820,   821,    98,    57,    58,   265,   266,   267,
     399,    10,   401,    10,    98,     3,    32,   278,    15,     3,
      65,    66,   512,    12,    12,    10,    71,   357,    12,   437,
      18,   361,    98,   419,    18,    10,    81,    10,    15,   903,
     530,    10,    10,    32,    32,   375,   376,   305,    32,   379,
     380,    10,    98,    37,    10,   809,    98,     8,    46,   317,
      98,    12,    46,   387,    15,    16,    98,    98,    65,    66,
      10,   102,  1484,    26,    71,    26,   128,  1149,    98,    10,
      98,   365,   365,   128,    81,   365,  1211,   365,   365,   452,
      10,    10,  1148,  1149,   626,    10,   354,     1,     1,    98,
     717,  1589,  1235,  1236,  1135,  1238,    95,    96,    12,  1242,
    1646,  1143,    84,    98,   102,    10,  1646,  1646,   102,  1110,
      22,    98,    24,    98,   913,    98,   615,   913,    32,    98,
      98,   128,   622,   463,    10,    38,  1548,    10,   927,    98,
      10,   399,    98,   401,    10,    98,    44,    45,    99,   555,
     556,   481,   482,   559,   934,   561,   128,  1511,    98,  1513,
     557,   823,    10,   560,  1518,  1519,  1520,    98,  1522,  1523,
    1524,  1525,    10,  1205,   432,    10,    17,   823,    98,    98,
    1049,    36,    62,    98,   846,   847,   583,  1599,   829,  1601,
    1047,  1603,    17,  1057,   452,  1683,   100,    10,    10,    36,
     846,   847,    10,    98,    10,     8,   467,   615,     1,    12,
      13,    14,  1306,    16,    10,     8,     1,     8,  1343,    12,
     710,    12,    98,    16,  1296,    98,    17,    12,    98,    32,
      10,   620,    98,    26,    37,    26,    17,  1725,    17,  1111,
    1296,    10,   572,    98,     1,  1301,   761,    32,   128,  1737,
      98,     8,   582,   583,  1742,    12,  1744,    98,  1746,    16,
    1748,    98,  1750,    98,  1752,  1019,   596,   597,   598,    26,
     600,    17,   602,    98,    17,   533,  1630,    36,     1,   537,
     538,    10,    10,    10,  1638,    98,    98,   611,   612,    12,
      98,    10,  1310,    10,    84,  1313,    10,   812,  1316,  1317,
    1318,  1319,  1320,  1321,  1322,  1323,    99,   670,    99,    32,
      95,    96,    97,    10,    10,  1727,    36,    98,    98,    98,
       1,   836,    17,  1112,  1110,   128,   689,     8,    17,    98,
      11,    12,    39,    40,  1459,    18,    17,   667,   128,    98,
      10,    17,    99,   673,    17,   751,    16,    12,  1420,     1,
     756,    32,    98,    18,   684,    98,    37,    17,    39,    40,
      12,  1417,   620,   760,  1420,  1421,    18,    32,    17,    98,
      98,    98,    95,    96,    97,  1447,   706,   707,    98,    98,
      32,    98,    47,    16,    98,  1376,  1732,    13,    14,     8,
      62,  1447,  1448,    12,   101,    47,    48,    16,  1389,     1,
      26,    98,    98,    98,   665,    17,    17,    26,   669,    98,
      12,   817,   670,   743,   811,     8,    18,    17,    17,    12,
     101,    14,    98,   820,   821,    98,    84,   688,    13,    14,
      32,   689,    52,    26,    54,   832,    56,   102,    98,   104,
      59,    26,    17,  1197,    46,    47,    48,   128,   100,    98,
     102,    17,   104,    17,    17,    17,   128,    10,     8,   974,
     868,    17,    12,    17,  1253,    72,    16,  1253,    98,  1246,
     128,   729,    98,    62,   126,  1229,    26,   735,    17,     1,
      99,    17,    17,    84,     6,    17,    98,    98,  1044,   819,
     748,  1355,    17,   823,    16,   172,    10,   903,    98,    98,
     102,    17,   104,   819,    17,  1020,    99,    29,    17,    59,
      32,    33,    34,    98,  1155,  1387,   846,   847,    40,    41,
      17,   128,    39,    98,   126,    17,  1041,   128,  1043,    46,
      72,    17,    98,    17,    98,    98,    98,    38,  1053,   128,
      62,     1,    98,    65,    98,    46,    47,    48,    49,    99,
      17,   809,    12,    75,    76,    84,   814,  1548,    18,    98,
      17,   238,    98,    98,     1,    87,    98,    89,    90,    17,
      72,    17,    32,    98,    17,    12,  1532,    99,    98,   101,
      10,    18,    98,   913,   101,    98,   128,    47,    48,    98,
    1376,   113,   114,   115,    10,    32,     1,   927,   928,   128,
       1,    98,   103,   104,   126,    84,    98,  1732,   130,   129,
      47,    48,    98,  1738,    98,    16,    84,   139,    23,   141,
     142,     1,   952,    29,   954,   126,   128,    12,    34,   890,
      10,    98,    10,   894,  1590,  1591,   897,   898,  1044,  1595,
     901,    98,   102,  1040,   104,  1042,    98,    32,    12,   128,
      98,  1057,    98,   914,     1,    98,    62,    46,    47,    48,
     128,    46,   923,    39,    40,   102,   126,   104,    32,    16,
       1,    47,    48,     8,  1101,    39,    18,    12,    52,    10,
      54,  1044,    56,    22,   206,   207,    11,   945,  1477,   126,
     212,  1477,   214,   215,  1100,  1484,  1473,    32,   220,  1214,
      18,  1216,  1032,   225,  1034,   963,   964,   965,    10,  1463,
     232,   233,  1227,   102,  1111,   104,  1032,   239,  1034,  1251,
      82,   243,    82,   245,     1,   101,   102,    12,   104,     1,
      17,    16,    19,   255,   256,   109,   110,   126,   112,    16,
      12,    84,  1257,   265,   266,   267,   268,    32,     7,   111,
     126,   111,   128,    12,   128,   117,   118,   117,   118,    11,
      32,  1019,  1620,    15,  1622,  1623,  1024,  1025,  1026,  1627,
     128,  1629,    12,    32,    10,  1633,    12,  1635,   300,  1637,
    1110,  1189,  1112,   305,    62,   307,  1044,    10,    11,   311,
     312,    64,    32,    16,   316,   317,    32,    37,  1128,    20,
      21,     7,     8,    10,  1134,  1135,    12,    13,    14,    16,
      16,    10,  1218,  1602,    20,    21,  1602,    65,    66,    25,
      26,   343,    29,    71,  1085,  1231,    32,    10,    34,    35,
      18,    37,    10,    81,    22,   357,    47,    48,     1,    84,
    1698,  1102,  1700,   365,     7,     8,   368,  1705,    10,    12,
      13,    14,  1367,    16,    16,    10,    12,    20,    21,  1256,
      16,    16,    25,     1,    12,   387,     4,     5,    16,    32,
      29,    34,    35,    29,    37,     1,    32,   399,    18,   401,
     128,  1211,    22,  1246,    32,  1143,    12,    98,     1,    95,
      96,   102,    18,   104,    12,  1211,    98,   419,  1261,    12,
      18,    65,    66,    16,  1312,    18,    32,    71,    16,    12,
    1687,    16,   434,    16,    32,   126,    29,    81,  1326,    32,
      84,    12,     1,  1253,     8,    16,   132,   133,  1128,    32,
     452,    44,    45,    12,  1134,    98,    65,    66,   460,  1197,
      16,    32,    71,   465,    65,    66,    24,  1205,     1,  1355,
      71,     1,    81,    32,     4,     5,    12,    22,    16,    12,
      81,    26,    12,    84,   128,  1455,   488,  1482,     8,   132,
     133,  1229,    12,    29,  1235,  1236,    32,  1238,   107,    32,
    1086,  1242,    32,  1089,  1090,     1,    10,    37,  1246,   102,
    1387,     7,     8,  1254,    17,    11,    12,    13,    14,   128,
      16,    17,     8,  1261,    20,    21,    12,   128,     1,    25,
      10,     4,     5,  1343,    65,    66,    32,    98,    34,    35,
      71,    37,    17,     1,  1432,     1,    32,  1343,    11,     1,
      81,    37,    98,    84,    12,    18,    12,  1552,    16,    22,
      12,     8,  1372,  1533,     1,    12,  1376,     1,    41,    42,
      43,    29,   574,   575,    32,    12,    32,    17,    12,  1389,
      32,     1,     1,     1,   586,     1,    22,    23,   590,     1,
       1,     1,    12,    12,    12,    32,    12,   128,    32,    16,
      12,    12,    12,   605,  1481,    18,   885,    12,   887,   611,
     612,    16,    32,    32,    32,    17,    32,    18,   620,    16,
      32,    32,    32,  1364,    29,    12,    24,    32,  1471,    16,
    1473,    16,   128,  1521,     7,     8,   132,   133,    16,    12,
      13,    14,    29,    16,  1454,    32,    16,    20,    21,  1459,
      37,    16,    25,    12,    22,    23,    16,    16,  1454,    32,
      10,    34,    35,  1459,    37,     1,     8,  1477,   670,    11,
      12,     7,     8,    32,  1484,    11,    12,    13,    14,    16,
      16,    10,    13,    14,    20,    21,    17,   689,     8,    25,
      32,    98,    12,    12,   696,    37,    32,    17,    34,    35,
      17,    37,     7,     8,    13,    14,    22,    12,    13,    14,
      29,    16,    32,    32,    26,    20,    21,    37,    37,    22,
      25,    18,  1532,  1464,    29,  1463,    31,    32,    16,    34,
      35,   111,    37,  1471,    10,  1473,  1532,  1478,  1548,   741,
       8,   743,   744,  1631,    12,    13,    14,    53,    16,     8,
      13,    14,   754,    12,    17,   128,    10,    16,    10,   132,
     133,   763,   115,   116,    32,    70,   541,   542,    17,    37,
      84,    85,   774,   775,   776,   777,   592,   593,   892,   893,
    1590,  1591,    10,   109,   110,  1595,   112,    98,  1598,  1599,
      10,  1601,  1602,  1603,  1590,  1591,   132,   133,     5,  1595,
       4,    67,   128,  1646,    98,    16,  1313,    15,  1549,  1316,
    1317,  1012,  1013,  1320,  1321,  1322,    15,    19,    80,    17,
     822,    22,    80,     1,    10,    72,   828,   132,   133,     7,
       8,   833,    22,    84,    12,    13,    14,    17,    16,    22,
      17,    98,    20,    21,  1687,    98,    22,    25,    98,    23,
     129,    24,    19,    10,    32,   857,    34,    35,   860,    37,
     116,   863,    17,    98,    39,    10,     1,   986,    98,    98,
     989,   990,     7,     8,    98,  1685,    18,    12,    13,    14,
      46,    16,  1001,  1002,  1003,    20,    21,     3,    17,    38,
      25,    17,    17,    10,    17,    98,   162,    32,    19,    34,
      35,   903,    37,    15,    82,    15,    10,    10,  1646,  1650,
      17,    17,    17,    72,    16,    10,    17,  1727,    17,    17,
      10,    10,  1732,    19,    10,    10,    98,    98,  1738,    10,
      10,    10,     1,    10,    10,    86,  1732,    10,     7,     8,
      22,    16,  1738,    12,    13,    14,    16,    16,    16,  1687,
     216,    20,    21,    16,   132,   133,    25,   959,    16,    16,
     226,   227,    16,    32,    16,    34,    35,    16,    37,   971,
      16,    12,    16,    16,    16,    10,    10,    22,   244,   981,
     246,    10,   984,    22,   986,   987,   988,   989,   990,   991,
     992,    32,    10,   107,    16,    10,    37,   132,   133,  1001,
    1002,  1003,  1004,  1005,    10,    10,    17,    19,    17,    19,
      10,    10,     1,    10,     3,    10,    36,     6,    16,    11,
      98,    22,    18,    12,    65,    66,    67,    68,    69,    70,
      71,    98,    10,    98,    10,   101,    77,    78,    10,    10,
      81,    10,  1044,    32,    10,  1047,    10,  1049,    16,    38,
      39,    40,    19,    16,  1056,    16,    38,    46,    47,    48,
      49,    50,    51,   132,   133,    22,    10,    80,    57,    31,
     336,    60,    61,    98,    63,    79,    79,   101,   110,     7,
       8,    10,   348,   349,    12,    13,    14,    22,    16,    10,
      18,    24,    20,    21,    24,  1097,    85,    25,    87,    22,
      18,   134,    19,    22,    32,    98,    34,    35,    98,    37,
      98,    98,   101,    98,   103,   104,    17,   106,    98,   108,
      10,    98,    64,    98,    98,   391,    58,    24,    98,   395,
      84,    55,    17,  1135,  1136,  1137,    24,   126,    98,   128,
      98,    55,    24,    24,  1146,    19,  1148,  1149,    16,    24,
     134,    24,    17,    98,   420,   421,    10,    17,    22,    16,
      16,    16,  1164,    16,   430,    10,    10,   433,    59,    16,
      22,    22,   438,     8,     8,    64,    98,    15,   444,   445,
      59,   447,    98,   449,    84,   451,    98,   453,    98,    98,
      98,    98,   458,    98,    98,    98,    15,    10,  1200,    10,
      17,    17,    79,    17,   132,   133,  1208,    10,  1210,    10,
      17,   477,    17,  1215,   480,  1217,  1218,    15,    64,    10,
      10,    15,    15,    10,  1226,   491,    98,    98,   494,   168,
     169,    98,    17,    17,    10,    10,    10,    10,    10,    10,
     506,    10,    79,    10,  1246,   511,   512,  1249,  1250,    17,
      81,    17,    17,    17,    10,    10,  1258,    10,    10,  1261,
      10,    10,  1264,   529,   530,   204,    10,    10,    10,  1271,
      10,    10,    98,    10,    15,    10,    10,  1279,    98,    17,
    1282,  1283,   542,    98,    17,   729,    98,     4,    98,    98,
      98,   539,  1294,  1355,  1296,  1044,   828,    33,   225,  1301,
     186,   365,   186,   365,   365,  1019,   857,  1197,  1310,    39,
    1112,  1313,   684,   482,  1316,  1317,  1318,  1319,  1320,  1321,
    1322,  1323,   583,   933,     1,  1249,   312,   214,   311,   212,
    1332,   706,  1596,   707,   357,    12,  1406,    14,    15,   954,
    1533,  1134,  1402,  1345,  1611,  1347,  1685,  1092,  1189,   784,
    1352,   316,    29,  1306,    31,    32,   622,   623,  1421,   625,
      37,   988,  1625,  1510,  1164,  1432,  1368,   636,   419,   877,
     636,    65,     9,    50,    -1,    -1,    -1,    -1,   644,   645,
     625,    -1,    -1,    -1,   650,   324,    -1,   343,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    -1,    -1,    81,    -1,    83,   346,    -1,    -1,
      -1,   677,    -1,   679,    -1,  1417,    -1,    -1,  1420,  1421,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   710,  1447,  1448,     1,    -1,     3,
      -1,   128,     6,    -1,    -1,    -1,    -1,    -1,    12,    -1,
      -1,    -1,    -1,    -1,    -1,  1467,    -1,   406,    -1,  1471,
      -1,  1473,    -1,  1475,   413,   414,    -1,    -1,    32,    -1,
      -1,  1483,    -1,    -1,    38,    39,    40,   426,    -1,    -1,
     429,    -1,    46,    47,    48,    49,    50,    51,    -1,    53,
      -1,    -1,    -1,    57,    -1,    -1,    60,    61,    -1,    63,
       7,     8,    -1,    -1,    -1,    12,    13,    14,    -1,    16,
      -1,    -1,    -1,    20,    21,    -1,    -1,    -1,    25,    -1,
      -1,    85,    -1,    87,    -1,    32,    -1,    34,    35,    -1,
      37,    -1,    -1,    -1,    -1,    -1,    -1,   101,    -1,   103,
     104,  1553,   106,     1,   108,     3,    -1,    -1,     6,    -1,
      -1,    -1,    -1,   829,    12,    -1,    -1,    15,    -1,    -1,
      -1,    -1,   126,    -1,   128,    -1,    -1,    -1,    -1,    -1,
      -1,   520,    -1,    80,    32,    82,    -1,    -1,   527,    -1,
      -1,    -1,    -1,   859,  1596,    -1,    -1,    -1,    46,    47,
      48,    49,    50,    51,  1606,    -1,    -1,    -1,    -1,    57,
     876,   877,    60,    61,    -1,    63,    -1,    65,    66,   885,
      -1,   887,    -1,    71,    -1,   891,   892,   893,    -1,    -1,
     896,    -1,    -1,    81,    -1,   132,   133,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1646,    -1,    -1,    -1,    -1,   915,
      -1,   917,    -1,    -1,    -1,   921,   104,    -1,    -1,    -1,
     108,    -1,    -1,    -1,    -1,    -1,    -1,   933,    -1,    -1,
      -1,   937,    -1,    -1,    -1,    -1,    -1,   616,   126,    -1,
     128,    -1,    -1,    -1,    -1,  1687,    -1,    -1,    -1,    -1,
     629,    -1,   631,    -1,    -1,    -1,    -1,    -1,    -1,   638,
      -1,   640,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   648,
      -1,    -1,    -1,   652,   653,    -1,   655,   983,   657,   658,
      -1,   660,    -1,   662,  1726,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   678,
      -1,     7,     8,    -1,   683,    11,    12,    13,    14,    -1,
      16,    -1,    -1,    -1,    20,    21,    -1,    -1,    -1,    25,
      -1,    -1,    -1,   702,    -1,    -1,    32,    -1,    34,    35,
     709,    37,   711,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   724,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     0,     1,    -1,     3,    -1,    -1,     6,
       7,     8,    -1,    -1,    -1,    12,    13,    14,    -1,    16,
      -1,    -1,    -1,    20,    21,    -1,    -1,    -1,    25,    -1,
    1086,    -1,    -1,  1089,  1090,    32,    -1,    34,    35,    -1,
      37,    38,    39,    40,    -1,    -1,    -1,    -1,    -1,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    -1,    60,    61,  1121,    63,    -1,    65,    66,
      -1,    -1,    -1,    -1,    71,    -1,   132,   133,    -1,    -1,
      -1,    -1,    79,    80,    81,    82,    -1,    84,    85,    -1,
      87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1155,
      -1,    -1,    -1,    -1,   101,    -1,   103,   104,    -1,   106,
     107,   108,   109,   110,    -1,   112,    -1,    10,    -1,    12,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   126,
      -1,   128,    -1,    -1,    -1,   132,   133,    -1,    -1,    32,
      -1,    -1,   871,    -1,    37,    -1,    -1,    -1,    -1,    -1,
    1206,  1207,    -1,    -1,   883,   884,    -1,    -1,    -1,   888,
       1,    -1,     3,    -1,    -1,     6,    -1,    -1,    -1,    -1,
      -1,    12,    65,    66,    67,    68,    69,    70,    71,    -1,
      -1,    -1,    -1,     3,    77,    78,     6,   916,    81,   918,
      -1,    32,    12,    -1,    -1,    -1,    -1,    38,    39,    40,
      -1,    -1,    -1,    -1,    -1,    46,    47,    48,    49,    50,
      51,    -1,    32,    -1,    -1,    -1,    57,    -1,    -1,    60,
      61,    -1,    63,    -1,    -1,    -1,    46,    47,    48,    49,
      50,    51,    -1,  1289,    -1,    -1,    -1,    57,    -1,    -1,
      60,    61,    -1,    63,    85,    -1,    87,    -1,    -1,    -1,
     979,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1314,  1315,
     101,    -1,   103,   104,    -1,   106,     1,   108,     3,    -1,
      -1,     6,    -1,    -1,    -1,    -1,    -1,    12,    -1,    -1,
      -1,    -1,    -1,    -1,   104,   126,    -1,   128,   108,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    32,    -1,    -1,
      -1,    -1,    -1,    38,    39,    40,   126,    -1,    -1,    -1,
      -1,    46,    47,    48,    49,    50,    51,    -1,    -1,    -1,
      -1,    -1,    57,  1052,    -1,    60,    61,    -1,    63,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1066,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1077,    -1,
      85,    -1,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1093,    -1,   101,    -1,   103,   104,
      -1,   106,    -1,   108,     1,  1104,  1105,    -1,    -1,  1108,
      -1,    -1,    -1,    10,    -1,    12,    -1,    14,    -1,    -1,
      -1,   126,    -1,   128,    -1,    -1,    -1,    -1,    -1,  1455,
    1456,  1457,    29,    -1,    31,    32,    -1,    -1,    -1,    -1,
      37,    -1,    -1,  1469,    -1,    -1,  1472,    -1,  1474,    -1,
      -1,    -1,    -1,    50,  1480,    -1,    -1,  1156,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    78,    -1,    -1,    81,  1511,    83,  1513,  1187,  1515,
      -1,  1517,  1518,  1519,  1520,    -1,  1522,  1523,  1524,  1525,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1533,    -1,     7,
       8,    -1,    -1,    -1,    12,    13,    14,    -1,    16,    -1,
      -1,    -1,    20,    21,    -1,    -1,    -1,    25,    -1,    -1,
      -1,   128,    -1,    -1,    32,    -1,    34,    35,    -1,    37,
      -1,  1567,    -1,  1569,    -1,    -1,    -1,    -1,    -1,     1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      12,    -1,    14,    15,    -1,    -1,    -1,    -1,    -1,    -1,
    1269,    -1,    -1,    -1,  1600,    -1,    -1,    29,    -1,    31,
      32,    -1,    80,    -1,    82,    37,    -1,    -1,    -1,    -1,
    1616,    -1,  1618,    -1,  1620,    -1,  1622,  1623,    50,  1625,
      -1,  1627,    -1,  1629,  1630,    -1,  1305,  1633,    -1,  1635,
      -1,  1637,  1638,    65,    66,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    77,    78,    -1,    -1,    81,
      -1,    83,    84,     1,   132,   133,    -1,    -1,    -1,  1338,
    1339,    -1,    -1,    -1,    12,    -1,    14,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    29,    -1,    31,    32,    -1,    -1,    -1,    -1,    37,
      -1,    -1,  1698,    -1,  1700,    -1,   128,    -1,    -1,  1705,
      -1,     1,    50,     3,    -1,    -1,     6,    -1,    -1,    -1,
      -1,    -1,    12,    -1,    -1,    -1,    -1,    65,    66,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      78,  1410,    32,    81,  1413,    83,    -1,    -1,    -1,  1418,
      -1,    -1,    -1,    -1,    -1,    -1,    46,    47,    48,    49,
      50,    51,    -1,    -1,    -1,    -1,    -1,    57,  1437,    -1,
      60,    61,    -1,    63,    -1,    65,    66,    -1,    -1,    -1,
      -1,    71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     128,    81,    -1,    -1,     1,    -1,     3,    -1,    -1,     6,
      -1,    -1,     7,     8,    -1,    12,    -1,    12,    13,    14,
      -1,    16,    -1,    -1,   104,    20,    21,    -1,   108,    -1,
      25,    -1,    -1,    -1,    -1,    32,    -1,    32,    -1,    34,
      35,  1500,    37,    -1,  1503,  1504,   126,    -1,   128,    46,
      47,    48,    49,    50,    51,    -1,    -1,    -1,    -1,    -1,
      57,    -1,    -1,    60,    61,    -1,    63,    -1,    65,    66,
      -1,    -1,    -1,    -1,    71,    -1,    -1,  1536,  1537,    -1,
      -1,    -1,    -1,    -1,    81,  1544,  1545,    -1,  1547,    -1,
      -1,    -1,  1551,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      95,    96,    -1,    -1,    -1,    -1,    -1,   104,    -1,    -1,
      -1,   108,    -1,    -1,    -1,    -1,  1575,    -1,    -1,    -1,
    1579,     7,     8,    -1,    -1,    -1,    12,    13,    14,   126,
      16,   128,    -1,    -1,    20,    21,    -1,   132,   133,    25,
      -1,    -1,    -1,    -1,    -1,    -1,    32,    -1,    34,    35,
      -1,    37,     7,     8,    -1,    -1,  1615,    12,    13,    14,
      -1,    16,    -1,    -1,    -1,    20,    21,    -1,    -1,    -1,
      25,    -1,    -1,    -1,    -1,    -1,    -1,    32,    -1,    34,
      35,    -1,    37,    -1,    -1,    -1,     7,     8,    -1,  1648,
      -1,    12,    13,    14,    80,    16,    82,    -1,    -1,    20,
      21,    -1,    -1,    -1,    25,    -1,    -1,    -1,    -1,    -1,
      -1,    32,    -1,    34,    35,    -1,    37,    -1,    -1,    -1,
      -1,    -1,    -1,     7,     8,    80,    -1,    82,    12,    13,
      14,    -1,    16,    17,    -1,    -1,    20,    21,    -1,    -1,
      -1,    25,    -1,    -1,    -1,    -1,   132,   133,    32,    -1,
      34,    35,    -1,    37,    -1,    -1,    -1,     7,     8,    -1,
      -1,    82,    12,    13,    14,    -1,    16,    -1,    -1,    -1,
      20,    21,    -1,    -1,    -1,    25,    -1,   132,   133,    -1,
      -1,    -1,    32,    -1,    34,    35,    -1,    37,     7,     8,
      -1,    -1,    -1,    12,    13,    14,    -1,    16,    -1,    -1,
      -1,    20,    21,    -1,    -1,    -1,    25,    -1,    -1,    -1,
      -1,   132,   133,    32,    -1,    34,    35,    -1,    37,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     7,     8,
      -1,    -1,    82,    12,    13,    14,    -1,    16,    -1,    -1,
      -1,    20,    21,    -1,    -1,    -1,    25,     1,   132,   133,
      -1,    -1,    -1,    32,    -1,    34,    35,    -1,    37,     7,
       8,    -1,    16,    -1,    12,    13,    14,    -1,    16,    -1,
      -1,    -1,    20,    21,    -1,    -1,    -1,    25,    -1,    -1,
      -1,    -1,   132,   133,    32,    -1,    34,    35,    -1,    37,
       7,     8,    -1,    -1,    -1,    12,    13,    14,    -1,    16,
      -1,    -1,    -1,    20,    21,    -1,    -1,    -1,    25,    -1,
      -1,    65,    -1,   132,   133,    32,    -1,    34,    35,    -1,
      37,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    -1,     3,    -1,    -1,     6,    -1,    -1,    -1,
      -1,   105,    12,   132,   133,    -1,    -1,    -1,    -1,   113,
     114,    -1,    -1,    -1,    -1,   119,   120,   121,   122,   123,
     124,   125,    32,    -1,    -1,    -1,    -1,    -1,    38,    39,
      40,    -1,    -1,    -1,   132,   133,    46,    47,    48,    49,
      50,    51,    -1,    -1,    -1,    10,    -1,    57,    13,    14,
      60,    61,    -1,    63,    -1,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    -1,   132,   133,    -1,    -1,    34,
      35,    -1,    -1,    -1,    -1,    85,    -1,    87,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   101,    -1,   103,   104,    -1,   106,    10,   108,    -1,
      13,    14,    -1,    -1,    -1,    -1,    -1,    20,    21,    22,
      23,    24,    25,    26,    27,    28,   126,    -1,    -1,    -1,
      -1,    34,    35,    -1,    -1,    10,    -1,    -1,    13,    14,
      -1,    -1,    -1,    -1,    99,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    -1,    -1,    -1,    -1,    -1,    34,
      35,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   130,   131,   132,   133,    13,
      14,    15,    -1,    -1,    -1,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    -1,    99,    13,    14,    15,
      34,    35,    -1,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    -1,    -1,    -1,    -1,    -1,    34,    35,
      -1,    -1,    -1,    -1,    99,    -1,    -1,   130,   131,   132,
     133,    -1,    13,    14,    15,    -1,    -1,    -1,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    -1,    -1,
      -1,    -1,    -1,    34,    35,   130,   131,   132,   133,    -1,
      13,    14,    15,    -1,    -1,    99,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    -1,    -1,    -1,    -1,
      -1,    34,    35,    99,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   130,   131,   132,   133,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   130,   131,   132,   133,    99,    13,
      14,    15,    -1,    -1,    -1,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    -1,    -1,    -1,    -1,    -1,
      34,    35,    -1,    -1,    -1,    -1,    99,    -1,    -1,   130,
     131,   132,   133,    -1,    13,    14,    15,    -1,    -1,    -1,
      -1,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      -1,    -1,    -1,    -1,    -1,    34,    35,   130,   131,   132,
     133,    -1,    13,    14,    -1,    -1,    -1,    -1,    -1,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    -1,    -1,
      13,    14,    15,    34,    35,    99,    37,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    -1,    -1,    -1,    -1,
      -1,    34,    35,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   130,   131,   132,   133,
      99,    13,    14,    15,    -1,    -1,    -1,    -1,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    -1,    -1,    -1,
      -1,    -1,    34,    35,    -1,    -1,    -1,    -1,    99,    -1,
      -1,   130,   131,   132,   133,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    13,    14,    15,    -1,    99,    -1,    -1,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    -1,   130,
     131,   132,   133,    34,    35,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   130,   131,   132,
     133,    -1,    13,    14,    -1,    -1,    -1,    99,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    -1,    -1,
      -1,    13,    14,    34,    35,    17,    -1,    -1,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    -1,   130,   131,
     132,   133,    34,    35,    -1,    13,    14,    -1,    99,    17,
      -1,    -1,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    -1,    -1,    -1,    -1,    -1,    34,    35,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   130,
     131,   132,   133,    13,    14,    -1,    -1,    17,    99,    -1,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    -1,
      -1,    -1,    13,    14,    34,    35,    17,    99,    -1,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    -1,   130,
     131,   132,   133,    34,    35,    -1,    -1,    -1,    -1,    -1,
      -1,    99,    -1,    -1,    -1,    -1,    -1,    -1,   130,   131,
     132,   133,    -1,    -1,    -1,    13,    14,    -1,    -1,    17,
      -1,    -1,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    -1,   130,   131,   132,   133,    34,    35,    -1,    99,
      13,    14,    -1,    -1,    17,    -1,    -1,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    -1,    -1,    99,    -1,
      -1,    34,    35,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     130,   131,   132,   133,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   130,
     131,   132,   133,    -1,    -1,    13,    14,    -1,    -1,    17,
      -1,    99,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    -1,    -1,    -1,    -1,    -1,    34,    35,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,    -1,    -1,
      -1,    -1,   130,   131,   132,   133,    -1,    -1,    -1,    -1,
      13,    14,    -1,    -1,    17,    -1,    -1,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    -1,   130,   131,   132,
     133,    34,    35,    13,    14,    -1,    -1,    17,    -1,    -1,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    13,
      14,    99,    -1,    17,    34,    35,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    -1,    -1,    -1,    -1,    -1,
      34,    35,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   130,   131,   132,   133,    -1,    -1,    -1,    -1,
      13,    14,    -1,    -1,    17,    -1,    99,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    -1,    -1,    -1,    -1,
      -1,    34,    35,    -1,    -1,    -1,    -1,    -1,    -1,    99,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   130,   131,   132,
     133,    -1,    -1,    13,    14,    99,    -1,    17,    -1,    -1,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    -1,
     130,   131,   132,   133,    34,    35,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   130,   131,   132,   133,
      13,    14,    -1,    -1,    17,    -1,    99,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    -1,    -1,    -1,    -1,
      -1,    34,    35,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   130,   131,   132,
     133,    -1,    -1,    13,    14,    -1,    -1,    17,    -1,    99,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    -1,
      -1,    -1,    -1,    -1,    34,    35,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     130,   131,   132,   133,    13,    14,    99,    -1,    -1,    -1,
      -1,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      13,    14,    -1,    -1,    -1,    34,    35,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    -1,   130,   131,   132,
     133,    34,    35,    -1,    -1,    -1,    -1,    -1,    -1,    99,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     130,   131,   132,   133,    -1,    -1,    -1,    -1,    -1,    98,
      99,    12,    -1,    14,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,    29,    -1,
      31,    32,    -1,    -1,    -1,    -1,    37,    38,    39,    40,
      -1,   130,   131,   132,   133,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   130,   131,   132,
     133,    -1,    -1,    -1,    65,    66,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    78,    -1,    12,
      81,    14,    83,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    29,    -1,    31,    32,
     101,    -1,   103,   104,    37,    38,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   126,    12,    16,    -1,    -1,
      -1,    -1,    65,    66,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    78,    32,    -1,    81,    -1,
      83,    37,    38,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      46,    47,    48,    49,    -1,    -1,    -1,    -1,    -1,    -1,
     103,   104,    -1,    -1,    -1,    -1,    65,    -1,    -1,    65,
      66,    67,    68,    69,    70,    71,    -1,    -1,    -1,    -1,
      -1,    77,    78,   126,    -1,    81,    -1,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   105,   103,   104,    -1,
      -1,    -1,    -1,    -1,   113,   114,    12,    -1,    14,    -1,
     119,   120,   121,   122,   123,   124,   125,    -1,    -1,    -1,
     126,    -1,    -1,    29,    -1,    31,    32,    -1,    -1,    -1,
      -1,    37,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      66,    67,    68,    69,    70,    71,    -1,    73,    74,    75,
      76,    77,    78,    -1,    -1,    81,    -1,    83
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const unsigned short int yystos[] =
{
       0,   128,   137,   138,   139,   180,   452,     1,    12,    32,
     453,   454,   456,   457,     0,   109,   110,   112,   140,   141,
     142,   144,   145,   156,   157,   312,   452,   156,     3,     6,
      46,    47,    48,    49,    50,    51,    57,    60,    61,    63,
     104,   108,   126,   181,   182,   212,   213,   214,   215,   218,
     219,   221,   222,   247,   255,   274,   281,   282,   334,   338,
     341,   342,   456,   129,   457,    98,   129,    22,    10,   146,
     456,     1,    23,    52,    54,    56,   159,   160,     1,    16,
      44,    45,   216,   217,   225,   226,     1,    16,    29,   225,
     227,   275,   276,   277,   278,   279,   456,     1,   102,   251,
       1,   223,     1,   238,   239,   241,   456,     1,   231,   232,
     233,   456,    16,    37,   225,   227,   339,   340,   430,   447,
     455,   456,     1,   183,     1,   357,   452,   343,     1,   100,
     250,     1,   250,     1,   241,     1,   234,   456,     1,   220,
       1,    16,   225,   283,   286,   293,   294,   335,   336,   337,
     456,   454,     7,     8,    13,    14,    16,    20,    21,    25,
      34,    35,    37,   132,   133,   429,   438,   439,   440,   445,
     449,   450,   455,   456,    10,    10,     7,   143,   455,   313,
     456,   158,   456,    10,    16,    29,   164,   170,   172,    10,
       1,     4,     5,    41,    42,    43,   251,   216,   216,    10,
     280,   447,    16,   230,   440,   441,    16,   227,   276,   279,
     276,    10,    98,    10,    98,    16,    18,   246,    10,   241,
     246,    10,   241,    10,    10,    98,    18,    22,   224,   245,
      10,    10,    98,    98,   224,   430,   431,   432,   456,   227,
     339,   339,    10,    98,    22,    11,    18,   434,    10,   237,
     243,   455,    84,    14,    29,    31,    50,    65,    66,    67,
      68,    69,    70,    71,    73,    74,    75,    76,    77,    78,
      81,    83,   344,   345,   346,   352,   353,   361,   362,   364,
     365,   366,   369,   370,   371,   373,   377,   378,   447,   455,
     357,    62,   256,   456,    64,   251,    10,    10,    10,    10,
      98,    10,   241,    84,   280,    16,   227,   229,   294,   335,
      29,   287,    98,   285,    16,    10,    98,    16,   246,   264,
     441,    20,    21,   437,   440,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    34,    35,    99,   130,   131,   132,
     133,   446,   449,   128,   438,   449,   451,     8,    16,    18,
     433,   434,   451,     1,   127,   147,    24,    16,     1,   161,
     162,   163,   178,   179,   180,   452,     1,    17,   171,   260,
     261,   262,   266,   452,    16,    10,    16,   170,   172,    10,
      10,    17,    98,    98,    17,    17,    17,   264,   251,   251,
      17,    98,   228,   230,   441,    15,   280,   276,    10,    16,
      10,    16,   278,   279,   277,   280,   440,   443,    10,   241,
      10,   239,   435,   440,   440,   245,   456,   456,    36,    98,
      18,   434,   339,    10,    10,   340,   440,   456,   436,   440,
      18,    10,    98,    22,    24,     8,    12,    16,    16,    26,
     128,   456,   351,   447,    16,    16,     1,    16,     1,    16,
     357,    16,    16,    16,   340,   447,   447,   456,    16,     1,
      15,    84,   354,   355,     1,    15,    72,   356,   357,     1,
      10,     1,    10,    10,    10,   357,   358,    22,    23,    10,
      16,    10,    16,    47,    48,   104,   126,   246,   249,   456,
      10,    98,   335,    10,    16,   286,   294,   293,    10,     1,
      17,   295,   296,   297,   298,   299,   452,   336,   280,    17,
      36,    98,    37,    22,    22,    23,    22,    24,    26,    22,
     440,   439,   451,     1,   453,   438,   437,   440,   436,    18,
      16,   111,     1,   150,   455,    82,   111,   117,   118,   148,
     149,   151,   152,    10,   314,   315,   319,   452,   456,    10,
      53,   161,   179,     1,    10,    38,    39,    40,    85,    87,
     101,   103,   106,   184,   190,   196,   199,   202,   205,   300,
     380,    17,    10,     8,    11,    37,   173,   174,   175,   177,
     456,    17,    98,    98,    47,    48,    98,   104,   126,   251,
     269,    39,    40,   101,     1,   165,   163,    10,    10,     1,
     163,     1,   163,     5,     4,   227,   231,   235,   236,   242,
     456,   264,   264,   437,    17,    98,   440,    10,   280,   280,
      16,    17,    98,    15,    10,    15,   224,   432,   436,   440,
     436,   440,    10,    19,    13,    14,    15,    19,   440,   243,
     440,   456,   441,    26,    95,    96,   367,   368,   440,    17,
      22,     1,   440,   440,    80,   440,    80,   440,   440,   351,
     440,    10,   440,    84,   456,   356,    84,   257,   270,   356,
     452,    72,     1,   456,    72,   357,    70,   362,   440,    22,
       1,    98,   379,   440,   258,   259,   261,   270,   356,   452,
     260,   248,   456,   437,    10,     1,    11,   288,   289,   290,
     291,   292,   440,   284,    17,    17,    98,    98,   292,   440,
      98,   440,   437,    22,    23,    24,    22,    15,   439,   129,
     129,    17,    19,   436,   440,   437,    10,    10,   455,   116,
     153,   455,   455,   111,   149,   115,   153,   154,   153,   154,
      17,    98,    17,    98,    39,    10,     1,   102,   191,   246,
     269,   448,     3,    46,   207,   208,   210,   211,   246,   448,
     211,   251,     1,    16,    65,    86,    88,    89,    90,    91,
      92,    93,    94,   105,   113,   114,   119,   120,   121,   122,
     123,   124,   125,   196,   381,   382,   383,   384,   385,   386,
     387,   395,   396,   397,   401,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,     1,   198,
     246,   211,   251,     1,   187,   246,   269,   448,     1,   301,
      98,    98,    98,   163,   175,   176,   177,    17,    98,    18,
     261,   251,   266,   269,   456,    46,   263,   456,     3,   265,
     265,   265,    17,    38,   166,   161,   163,   163,   161,   161,
     161,   161,    17,    17,   235,   236,    10,    98,    10,    22,
     227,   235,   236,   227,   235,   236,    17,   230,    15,   280,
     437,   440,   442,   435,    19,    19,    15,    15,   442,    19,
      10,    17,    17,   440,   440,     6,    17,    98,   440,    17,
      17,    17,    17,    17,    17,   363,    10,    17,    17,    84,
     270,   356,    84,    46,   184,   190,   212,   214,   218,   219,
     222,   271,    72,   257,   356,    16,   440,   362,   440,    17,
      17,    98,   259,   356,    10,    62,    17,    10,    16,    17,
      17,   456,    17,    98,    98,    10,   297,   452,   299,   452,
     437,    36,   439,    19,    17,   150,    10,   455,    10,    10,
      10,    10,    10,   456,    10,   316,   320,   452,   456,    46,
     456,    10,   237,   194,   192,   195,   246,   456,    47,   102,
     104,   206,   209,   246,   251,   264,    86,    95,    96,   388,
     391,   400,   456,    16,    16,     1,    16,    16,    16,    16,
      16,    16,    16,   388,   389,   391,     1,   389,   389,     1,
     389,    16,    16,    16,    16,    16,   386,    86,   382,    10,
      22,    10,    22,    22,    10,    10,   240,   243,   244,   197,
     251,   264,    10,   237,   185,   186,   188,   246,   107,    65,
      66,    71,    81,   180,   302,   304,   305,   306,   309,   311,
     211,   251,   211,   251,    39,   456,   161,    16,    36,    98,
     174,   436,   440,   263,   251,   456,   264,   167,    17,    98,
     161,   161,    10,    10,   242,   456,   440,   235,    10,    10,
     236,    10,    10,   441,    17,    19,    19,   440,   444,   444,
     367,   367,     1,   358,     1,    82,   374,   375,   437,   374,
     374,   357,    17,   440,   358,   357,    84,   246,   272,   273,
     448,   456,   356,    72,   440,   440,    10,    10,   440,    62,
      10,   101,   252,   253,   267,   268,   270,   452,   254,   452,
      10,    16,   290,   292,    17,    36,    15,   155,   317,   318,
     319,   320,   321,   452,   317,    98,    98,   101,   456,    10,
     237,   237,   237,   193,   456,   264,   200,    26,    98,   390,
     402,   449,    22,   388,   391,    18,   440,     1,    95,    96,
      97,   391,   419,   421,   423,   424,   427,    10,     1,   419,
     421,   422,   422,   419,   419,   421,   421,    10,    10,    10,
      10,    10,    10,   419,   419,   419,   421,   388,   391,    16,
     392,   393,   394,   441,   392,   392,    10,    98,   240,   264,
     203,    10,   237,   237,   237,   189,    16,    16,    16,     1,
      15,   302,   107,   304,   251,   264,   251,   264,   210,   340,
     456,    17,   175,   177,    19,    19,   264,   263,   456,   169,
     246,   448,    38,    10,    10,    79,    79,    80,    15,   358,
      80,   375,    15,    80,    80,   365,    10,   272,    10,    98,
     246,   224,    72,   257,   356,     1,    46,   251,   269,   253,
     359,   452,    10,    98,    98,    17,    98,   268,    17,   440,
     110,    57,    58,   318,   322,   323,   326,    10,    10,    98,
      10,    10,    98,    46,   322,   320,   456,   456,   456,    22,
      10,    10,    10,   237,   201,   456,    24,   391,   389,    22,
      26,    24,    26,    22,   436,   440,    17,    17,    19,    18,
      98,   427,   134,    98,    98,    98,    98,    98,    98,    98,
      98,    98,    98,    98,    26,    22,    16,   393,   394,   441,
     244,    10,   204,   456,    10,    10,    10,   237,   440,   440,
     310,   456,    84,   456,    84,   264,   456,   264,   456,   456,
      17,   456,   264,   243,   246,   168,   358,   358,   358,   358,
     351,    10,   273,   272,   356,    62,    10,   251,   264,   456,
      64,    65,    69,    70,    71,    78,    81,   347,   349,   360,
     364,   372,   373,   376,   378,   447,   268,   101,   456,    10,
     268,    17,     1,   456,     1,     8,    12,    16,    26,    99,
     324,   325,   328,   329,   333,    55,    58,   456,   456,    55,
     440,    10,   456,   389,    17,    24,    24,    16,   391,   398,
      24,    24,    19,    19,   386,   395,     8,    12,   425,   426,
     420,   421,   134,   428,   441,   420,   418,   440,   418,   420,
     420,   421,   421,   420,   420,   420,   421,    24,    24,   394,
      17,    98,   456,    10,    17,    17,    10,    22,     1,   302,
     456,   456,   456,   169,    17,    10,    62,   264,   456,    16,
     359,   452,    16,    16,    16,    15,    84,   257,   356,    10,
      22,    46,   251,   269,   257,   359,    10,    22,    59,   333,
      59,   325,    15,   329,   333,    16,     1,   324,    17,   449,
     391,    17,   449,   389,   391,   398,     8,    12,     8,    19,
      98,    98,   428,    98,    17,    98,    17,    98,    98,    98,
      98,    98,    98,    98,    98,    98,   389,   391,   394,    10,
     303,   304,    82,   307,   308,   437,   440,   440,    84,    84,
     243,   357,   456,     1,   440,   440,   351,   440,   456,   356,
      84,   440,   251,   264,   456,   359,    64,     8,   327,    17,
     333,   330,   332,   333,   333,    59,    59,    15,   449,    15,
     449,   425,   418,   418,    10,   440,    10,   416,   417,   440,
     418,   418,   418,   441,   418,   418,   418,   418,    17,    98,
      79,    15,   303,    80,   308,    15,    10,    17,    17,    17,
      10,    17,   257,   350,   359,    84,   264,   456,    64,    10,
      17,    15,    10,    17,   399,   440,    15,   399,    15,    17,
      98,    17,    98,    98,    17,    98,    17,    98,    17,    98,
      98,    98,    17,    98,    17,    98,    17,    98,    98,   394,
     303,   303,   303,   310,   348,   359,   452,   359,   440,   359,
     356,    84,   359,   456,    14,   331,   332,   333,    17,   399,
      17,   399,    10,   416,    10,   416,   416,    10,   417,    10,
     416,    10,   416,   418,   441,    10,   416,    10,   416,    10,
     416,   418,    17,    98,    17,    79,    10,    10,    84,    10,
      17,    17,    17,    17,    17,    17,    17,    17,    98,    17,
      98,    17,    17,    17,    17,    98,   394,    81,   348,   351,
      17,    10,    10,    10,    10,    10,    10,   416,    10,   416,
      10,    10,    10,    10,   416,    98,    15,    17,    17,    17,
      17,   394,   456,   359,    10,    10,    10,    98,   302,   394,
      84,    17,    98,   394,    98,   394,    98,   394,    98,   394,
      98,   394,    98,   394,    17
};


/* Prevent warning if -Wmissing-prototypes.  */
int yyparse (void);

/* Error token number */
#define YYTERROR 1

/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */


#define YYRHSLOC(Rhs, K) ((Rhs)[K].yystate.yyloc)
#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)				\
    do									\
      if (YYID (N))							\
	{								\
	  (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;	\
	  (Current).first_column = YYRHSLOC (Rhs, 1).first_column;	\
	  (Current).last_line    = YYRHSLOC (Rhs, N).last_line;		\
	  (Current).last_column  = YYRHSLOC (Rhs, N).last_column;	\
	}								\
      else								\
	{								\
	  (Current).first_line   = (Current).last_line   =		\
	    YYRHSLOC (Rhs, 0).last_line;				\
	  (Current).first_column = (Current).last_column =		\
	    YYRHSLOC (Rhs, 0).last_column;				\
	}								\
    while (YYID (0))

/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

# define YY_LOCATION_PRINT(File, Loc)			\
    fprintf (File, "%d.%d-%d.%d",			\
	     (Loc).first_line, (Loc).first_column,	\
	     (Loc).last_line,  (Loc).last_column)
#endif


#ifndef YY_LOCATION_PRINT
# define YY_LOCATION_PRINT(File, Loc) ((void) 0)
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */
#define YYLEX yylex ()

YYSTYPE yylval;

YYLTYPE yylloc;

int yynerrs;
int yychar;

static const int YYEOF = 0;
static const int YYEMPTY = -2;

typedef enum { yyok, yyaccept, yyabort, yyerr } YYRESULTTAG;

#define YYCHK(YYE)							     \
   do { YYRESULTTAG yyflag = YYE; if (yyflag != yyok) return yyflag; }	     \
   while (YYID (0))

#if YYDEBUG

# ifndef YYFPRINTF
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (YYID (0))


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

/*ARGSUSED*/
static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
{
  if (!yyvaluep)
    return;
  YYUSE (yylocationp);
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# else
  YYUSE (yyoutput);
# endif
  switch (yytype)
    {
      default:
	break;
    }
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
{
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  YY_LOCATION_PRINT (yyoutput, *yylocationp);
  YYFPRINTF (yyoutput, ": ");
  yy_symbol_value_print (yyoutput, yytype, yyvaluep, yylocationp);
  YYFPRINTF (yyoutput, ")");
}

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			    \
do {									    \
  if (yydebug)								    \
    {									    \
      YYFPRINTF (stderr, "%s ", Title);					    \
      yy_symbol_print (stderr, Type,					    \
		       Value, Location);  \
      YYFPRINTF (stderr, "\n");						    \
    }									    \
} while (YYID (0))

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;

#else /* !YYDEBUG */

# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)

#endif /* !YYDEBUG */

/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   SIZE_MAX < YYMAXDEPTH * sizeof (GLRStackItem)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif

/* Minimum number of free items on the stack allowed after an
   allocation.  This is to allow allocation and initialization
   to be completed by functions that call yyexpandGLRStack before the
   stack is expanded, thus insuring that all necessary pointers get
   properly redirected to new data.  */
#define YYHEADROOM 2

#ifndef YYSTACKEXPANDABLE
# if (! defined __cplusplus \
      || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
	  && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL))
#  define YYSTACKEXPANDABLE 1
# else
#  define YYSTACKEXPANDABLE 0
# endif
#endif

#if YYSTACKEXPANDABLE
# define YY_RESERVE_GLRSTACK(Yystack)			\
  do {							\
    if (Yystack->yyspaceLeft < YYHEADROOM)		\
      yyexpandGLRStack (Yystack);			\
  } while (YYID (0))
#else
# define YY_RESERVE_GLRSTACK(Yystack)			\
  do {							\
    if (Yystack->yyspaceLeft < YYHEADROOM)		\
      yyMemoryExhausted (Yystack);			\
  } while (YYID (0))
#endif


#if YYERROR_VERBOSE

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
yystpcpy (char *yydest, const char *yysrc)
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static size_t
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      size_t yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return strlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

#endif /* !YYERROR_VERBOSE */

/** State numbers, as in LALR(1) machine */
typedef int yyStateNum;

/** Rule numbers, as in LALR(1) machine */
typedef int yyRuleNum;

/** Grammar symbol */
typedef short int yySymbol;

/** Item references, as in LALR(1) machine */
typedef short int yyItemNum;

typedef struct yyGLRState yyGLRState;
typedef struct yyGLRStateSet yyGLRStateSet;
typedef struct yySemanticOption yySemanticOption;
typedef union yyGLRStackItem yyGLRStackItem;
typedef struct yyGLRStack yyGLRStack;

struct yyGLRState {
  /** Type tag: always true.  */
  yybool yyisState;
  /** Type tag for yysemantics.  If true, yysval applies, otherwise
   *  yyfirstVal applies.  */
  yybool yyresolved;
  /** Number of corresponding LALR(1) machine state.  */
  yyStateNum yylrState;
  /** Preceding state in this stack */
  yyGLRState* yypred;
  /** Source position of the first token produced by my symbol */
  size_t yyposn;
  union {
    /** First in a chain of alternative reductions producing the
     *  non-terminal corresponding to this state, threaded through
     *  yynext.  */
    yySemanticOption* yyfirstVal;
    /** Semantic value for this state.  */
    YYSTYPE yysval;
  } yysemantics;
  /** Source location for this state.  */
  YYLTYPE yyloc;
};

struct yyGLRStateSet {
  yyGLRState** yystates;
  /** During nondeterministic operation, yylookaheadNeeds tracks which
   *  stacks have actually needed the current lookahead.  During deterministic
   *  operation, yylookaheadNeeds[0] is not maintained since it would merely
   *  duplicate yychar != YYEMPTY.  */
  yybool* yylookaheadNeeds;
  size_t yysize, yycapacity;
};

struct yySemanticOption {
  /** Type tag: always false.  */
  yybool yyisState;
  /** Rule number for this reduction */
  yyRuleNum yyrule;
  /** The last RHS state in the list of states to be reduced.  */
  yyGLRState* yystate;
  /** The lookahead for this reduction.  */
  int yyrawchar;
  YYSTYPE yyval;
  YYLTYPE yyloc;
  /** Next sibling in chain of options.  To facilitate merging,
   *  options are chained in decreasing order by address.  */
  yySemanticOption* yynext;
};

/** Type of the items in the GLR stack.  The yyisState field
 *  indicates which item of the union is valid.  */
union yyGLRStackItem {
  yyGLRState yystate;
  yySemanticOption yyoption;
};

struct yyGLRStack {
  int yyerrState;
  /* To compute the location of the error token.  */
  yyGLRStackItem yyerror_range[3];

  YYJMP_BUF yyexception_buffer;
  yyGLRStackItem* yyitems;
  yyGLRStackItem* yynextFree;
  size_t yyspaceLeft;
  yyGLRState* yysplitPoint;
  yyGLRState* yylastDeleted;
  yyGLRStateSet yytops;
};

#if YYSTACKEXPANDABLE
static void yyexpandGLRStack (yyGLRStack* yystackp);
#endif

static void yyFail (yyGLRStack* yystackp, const char* yymsg)
  __attribute__ ((__noreturn__));
static void
yyFail (yyGLRStack* yystackp, const char* yymsg)
{
  if (yymsg != NULL)
    yyerror (yymsg);
  YYLONGJMP (yystackp->yyexception_buffer, 1);
}

static void yyMemoryExhausted (yyGLRStack* yystackp)
  __attribute__ ((__noreturn__));
static void
yyMemoryExhausted (yyGLRStack* yystackp)
{
  YYLONGJMP (yystackp->yyexception_buffer, 2);
}

#if YYDEBUG || YYERROR_VERBOSE
/** A printable representation of TOKEN.  */
static inline const char*
yytokenName (yySymbol yytoken)
{
  if (yytoken == YYEMPTY)
    return "";

  return yytname[yytoken];
}
#endif

/** Fill in YYVSP[YYLOW1 .. YYLOW0-1] from the chain of states starting
 *  at YYVSP[YYLOW0].yystate.yypred.  Leaves YYVSP[YYLOW1].yystate.yypred
 *  containing the pointer to the next state in the chain.  */
static void yyfillin (yyGLRStackItem *, int, int) __attribute__ ((__unused__));
static void
yyfillin (yyGLRStackItem *yyvsp, int yylow0, int yylow1)
{
  yyGLRState* s;
  int i;
  s = yyvsp[yylow0].yystate.yypred;
  for (i = yylow0-1; i >= yylow1; i -= 1)
    {
      YYASSERT (s->yyresolved);
      yyvsp[i].yystate.yyresolved = yytrue;
      yyvsp[i].yystate.yysemantics.yysval = s->yysemantics.yysval;
      yyvsp[i].yystate.yyloc = s->yyloc;
      s = yyvsp[i].yystate.yypred = s->yypred;
    }
}

/* Do nothing if YYNORMAL or if *YYLOW <= YYLOW1.  Otherwise, fill in
 * YYVSP[YYLOW1 .. *YYLOW-1] as in yyfillin and set *YYLOW = YYLOW1.
 * For convenience, always return YYLOW1.  */
static inline int yyfill (yyGLRStackItem *, int *, int, yybool)
     __attribute__ ((__unused__));
static inline int
yyfill (yyGLRStackItem *yyvsp, int *yylow, int yylow1, yybool yynormal)
{
  if (!yynormal && yylow1 < *yylow)
    {
      yyfillin (yyvsp, *yylow, yylow1);
      *yylow = yylow1;
    }
  return yylow1;
}

/** Perform user action for rule number YYN, with RHS length YYRHSLEN,
 *  and top stack item YYVSP.  YYLVALP points to place to put semantic
 *  value ($$), and yylocp points to place for location information
 *  (@$).  Returns yyok for normal return, yyaccept for YYACCEPT,
 *  yyerr for YYERROR, yyabort for YYABORT.  */
/*ARGSUSED*/ static YYRESULTTAG
yyuserAction (yyRuleNum yyn, int yyrhslen, yyGLRStackItem* yyvsp,
	      YYSTYPE* yyvalp,
	      YYLTYPE* YYOPTIONAL_LOC (yylocp),
	      yyGLRStack* yystackp
	      )
{
  yybool yynormal __attribute__ ((__unused__)) =
    (yystackp->yysplitPoint == NULL);
  int yylow;
# undef yyerrok
# define yyerrok (yystackp->yyerrState = 0)
# undef YYACCEPT
# define YYACCEPT return yyaccept
# undef YYABORT
# define YYABORT return yyabort
# undef YYERROR
# define YYERROR return yyerrok, yyerr
# undef YYRECOVERING
# define YYRECOVERING() (yystackp->yyerrState != 0)
# undef yyclearin
# define yyclearin (yychar = YYEMPTY)
# undef YYFILL
# define YYFILL(N) yyfill (yyvsp, &yylow, N, yynormal)
# undef YYBACKUP
# define YYBACKUP(Token, Value)						     \
  return yyerror (YY_("syntax error: cannot back up")),     \
	 yyerrok, yyerr

  yylow = 1;
  if (yyrhslen == 0)
    *yyvalp = yyval_default;
  else
    *yyvalp = yyvsp[YYFILL (1-yyrhslen)].yystate.yysemantics.yysval;
  YYLLOC_DEFAULT ((*yylocp), (yyvsp - yyrhslen), yyrhslen);
  yystackp->yyerror_range[1].yystate.yyloc = *yylocp;

  switch (yyn)
    {
        case 3:

/* Line 936 of glr.c  */
#line 135 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {identVerilog.resize(0);}
    break;

  case 5:

/* Line 936 of glr.c  */
#line 136 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {identVerilog.resize(0);}
    break;

  case 8:

/* Line 936 of glr.c  */
#line 147 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset;}
    break;

  case 9:

/* Line 936 of glr.c  */
#line 148 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset;}
    break;

  case 10:

/* Line 936 of glr.c  */
#line 149 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset;}
    break;

  case 19:

/* Line 936 of glr.c  */
#line 181 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {
                                if(!parseCode) 
								{ 
								   QCString confName=(((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.cstr);
								   Entry *conf=VerilogDocGen::makeNewEntry(confName.data(),Entry::VARIABLE_SEC,VerilogDocGen::CONFIGURATION,c_lloc.first_line);
                                   conf->type="configuration";
								   addGlobalVerilogMember(conf);
								}          
				            }
    break;

  case 38:

/* Line 936 of glr.c  */
#line 237 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {}
    break;

  case 54:

/* Line 936 of glr.c  */
#line 266 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {
                                    yydebug=0; //sets parser in debug mode
                                    if(!parseCode) { 
							              
											 lastModule=VerilogDocGen::makeNewEntry("",Entry::CLASS_SEC,VerilogDocGen::MODULE);
                                            currentVerilog=lastModule;
                                             currentVerilog->protection=Public;
					                         parseModule();
							                 CurrState=VerilogDocGen::STATE_MODULE;
				                             
										    }
                                            else {
											      parseModule();
                                         		  }
                               currVerilogType=0;						       
							   vbufreset();
							 }
    break;

  case 55:

/* Line 936 of glr.c  */
#line 285 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {
            if(!parseCode){ 
			        int ll=getVerilogLine();
	                currentVerilog->endBodyLine=ll;
			       } 	 
              vbufreset(); 
		   }
    break;

  case 56:

/* Line 936 of glr.c  */
#line 291 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {currentVerilog=0;vbufreset();}
    break;

  case 59:

/* Line 936 of glr.c  */
#line 301 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {currVerilogType=VerilogDocGen::PORT;}
    break;

  case 60:

/* Line 936 of glr.c  */
#line 301 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {currVerilogType=0;vbufreset();}
    break;

  case 62:

/* Line 936 of glr.c  */
#line 305 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::PARAMETER;}
    break;

  case 63:

/* Line 936 of glr.c  */
#line 305 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {currVerilogType=0;}
    break;

  case 64:

/* Line 936 of glr.c  */
#line 306 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::PARAMETER;}
    break;

  case 65:

/* Line 936 of glr.c  */
#line 306 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {currVerilogType=0;}
    break;

  case 70:

/* Line 936 of glr.c  */
#line 317 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {currVerilogType=VerilogDocGen::PORT;}
    break;

  case 71:

/* Line 936 of glr.c  */
#line 317 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {currVerilogType=0;vbufreset();}
    break;

  case 72:

/* Line 936 of glr.c  */
#line 318 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {currVerilogType=0;vbufreset();}
    break;

  case 73:

/* Line 936 of glr.c  */
#line 322 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {currVerilogType=0;vbufreset();}
    break;

  case 74:

/* Line 936 of glr.c  */
#line 326 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {parseListOfPorts();vbufreset();}
    break;

  case 75:

/* Line 936 of glr.c  */
#line 327 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {parseListOfPorts();vbufreset();}
    break;

  case 87:

/* Line 936 of glr.c  */
#line 349 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=0;vbufreset();}
    break;

  case 88:

/* Line 936 of glr.c  */
#line 350 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=0;vbufreset();}
    break;

  case 89:

/* Line 936 of glr.c  */
#line 351 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=0;vbufreset();}
    break;

  case 90:

/* Line 936 of glr.c  */
#line 352 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { vbufreset();}
    break;

  case 93:

/* Line 936 of glr.c  */
#line 361 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 94:

/* Line 936 of glr.c  */
#line 362 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 97:

/* Line 936 of glr.c  */
#line 365 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 99:

/* Line 936 of glr.c  */
#line 370 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 100:

/* Line 936 of glr.c  */
#line 371 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 101:

/* Line 936 of glr.c  */
#line 372 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 102:

/* Line 936 of glr.c  */
#line 373 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 103:

/* Line 936 of glr.c  */
#line 374 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 104:

/* Line 936 of glr.c  */
#line 375 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 105:

/* Line 936 of glr.c  */
#line 376 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 114:

/* Line 936 of glr.c  */
#line 387 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 115:

/* Line 936 of glr.c  */
#line 388 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {}
    break;

  case 116:

/* Line 936 of glr.c  */
#line 389 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {}
    break;

  case 117:

/* Line 936 of glr.c  */
#line 393 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { if(parseCode) currVerilogType=VerilogDocGen::DEFPARAM;}
    break;

  case 118:

/* Line 936 of glr.c  */
#line 393 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset(); if(parseCode) currVerilogType=0; }
    break;

  case 119:

/* Line 936 of glr.c  */
#line 394 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset(); if(parseCode) currVerilogType=0;}
    break;

  case 120:

/* Line 936 of glr.c  */
#line 402 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::PARAMETER;}
    break;

  case 121:

/* Line 936 of glr.c  */
#line 402 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {currVerilogType=0;vbufreset();}
    break;

  case 122:

/* Line 936 of glr.c  */
#line 403 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::PARAMETER;}
    break;

  case 123:

/* Line 936 of glr.c  */
#line 403 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {currVerilogType=0;vbufreset();}
    break;

  case 124:

/* Line 936 of glr.c  */
#line 404 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::PARAMETER;}
    break;

  case 125:

/* Line 936 of glr.c  */
#line 404 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {currVerilogType=0;vbufreset();}
    break;

  case 126:

/* Line 936 of glr.c  */
#line 405 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::PARAMETER;}
    break;

  case 127:

/* Line 936 of glr.c  */
#line 405 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {currVerilogType=0;vbufreset();}
    break;

  case 128:

/* Line 936 of glr.c  */
#line 406 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::PARAMETER;}
    break;

  case 129:

/* Line 936 of glr.c  */
#line 406 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {currVerilogType=0;vbufreset();}
    break;

  case 131:

/* Line 936 of glr.c  */
#line 410 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::PARAMETER;}
    break;

  case 132:

/* Line 936 of glr.c  */
#line 410 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {currVerilogType=0;vbufreset();}
    break;

  case 133:

/* Line 936 of glr.c  */
#line 411 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::PARAMETER;}
    break;

  case 134:

/* Line 936 of glr.c  */
#line 411 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {currVerilogType=0;vbufreset();}
    break;

  case 135:

/* Line 936 of glr.c  */
#line 412 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::PARAMETER;}
    break;

  case 136:

/* Line 936 of glr.c  */
#line 412 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {currVerilogType=0;vbufreset();}
    break;

  case 137:

/* Line 936 of glr.c  */
#line 413 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::PARAMETER;}
    break;

  case 138:

/* Line 936 of glr.c  */
#line 413 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {currVerilogType=0;vbufreset();}
    break;

  case 139:

/* Line 936 of glr.c  */
#line 414 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::PARAMETER;}
    break;

  case 140:

/* Line 936 of glr.c  */
#line 414 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {currVerilogType=0;vbufreset();}
    break;

  case 141:

/* Line 936 of glr.c  */
#line 415 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {currVerilogType=0;vbufreset();}
    break;

  case 142:

/* Line 936 of glr.c  */
#line 418 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::PARAMETER;}
    break;

  case 143:

/* Line 936 of glr.c  */
#line 418 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=0;vbufreset();}
    break;

  case 144:

/* Line 936 of glr.c  */
#line 419 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::PARAMETER;}
    break;

  case 145:

/* Line 936 of glr.c  */
#line 419 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=0;vbufreset();}
    break;

  case 147:

/* Line 936 of glr.c  */
#line 427 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::INOUT; }
    break;

  case 148:

/* Line 936 of glr.c  */
#line 427 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode)parsePortDir(currentVerilog,3);vbufreset();}
    break;

  case 149:

/* Line 936 of glr.c  */
#line 428 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::INOUT; }
    break;

  case 150:

/* Line 936 of glr.c  */
#line 428 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode)parsePortDir(currentVerilog,3);vbufreset();}
    break;

  case 151:

/* Line 936 of glr.c  */
#line 429 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode)parsePortDir(currentVerilog,3);vbufreset();}
    break;

  case 152:

/* Line 936 of glr.c  */
#line 430 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode)parsePortDir(currentVerilog,3);vbufreset();}
    break;

  case 153:

/* Line 936 of glr.c  */
#line 433 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::INPUT; }
    break;

  case 154:

/* Line 936 of glr.c  */
#line 433 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode)parsePortDir(currentVerilog,3);vbufreset();}
    break;

  case 155:

/* Line 936 of glr.c  */
#line 434 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::INPUT; }
    break;

  case 156:

/* Line 936 of glr.c  */
#line 434 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode)parsePortDir(currentVerilog,3);vbufreset();}
    break;

  case 157:

/* Line 936 of glr.c  */
#line 435 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode)parsePortDir(currentVerilog,3);vbufreset();}
    break;

  case 158:

/* Line 936 of glr.c  */
#line 436 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode)parsePortDir(currentVerilog,3);vbufreset();}
    break;

  case 159:

/* Line 936 of glr.c  */
#line 441 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::OUTPUT; }
    break;

  case 160:

/* Line 936 of glr.c  */
#line 441 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode)parsePortDir(currentVerilog,3);vbufreset();}
    break;

  case 161:

/* Line 936 of glr.c  */
#line 442 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::OUTPUT; }
    break;

  case 162:

/* Line 936 of glr.c  */
#line 442 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode)parsePortDir(currentVerilog,3);vbufreset();}
    break;

  case 163:

/* Line 936 of glr.c  */
#line 444 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::OUTPUT; }
    break;

  case 164:

/* Line 936 of glr.c  */
#line 444 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode)parsePortDir(currentVerilog,3);vbufreset();}
    break;

  case 166:

/* Line 936 of glr.c  */
#line 447 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode)parsePortDir(currentVerilog,3);vbufreset();}
    break;

  case 167:

/* Line 936 of glr.c  */
#line 448 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode)parsePortDir(currentVerilog,3);vbufreset();}
    break;

  case 168:

/* Line 936 of glr.c  */
#line 449 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode)parsePortDir(currentVerilog,3);vbufreset();}
    break;

  case 179:

/* Line 936 of glr.c  */
#line 477 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { vbufreset();}
    break;

  case 180:

/* Line 936 of glr.c  */
#line 478 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { vbufreset();}
    break;

  case 183:

/* Line 936 of glr.c  */
#line 485 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 185:

/* Line 936 of glr.c  */
#line 490 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 186:

/* Line 936 of glr.c  */
#line 491 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 187:

/* Line 936 of glr.c  */
#line 492 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 188:

/* Line 936 of glr.c  */
#line 493 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 189:

/* Line 936 of glr.c  */
#line 494 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 190:

/* Line 936 of glr.c  */
#line 495 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 191:

/* Line 936 of glr.c  */
#line 496 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 192:

/* Line 936 of glr.c  */
#line 497 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 193:

/* Line 936 of glr.c  */
#line 498 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 194:

/* Line 936 of glr.c  */
#line 499 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 195:

/* Line 936 of glr.c  */
#line 500 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 200:

/* Line 936 of glr.c  */
#line 513 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();currVerilogType=0;}
    break;

  case 201:

/* Line 936 of glr.c  */
#line 514 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 202:

/* Line 936 of glr.c  */
#line 516 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::TIME; }
    break;

  case 203:

/* Line 936 of glr.c  */
#line 516 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();currVerilogType=0;}
    break;

  case 204:

/* Line 936 of glr.c  */
#line 517 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 205:

/* Line 936 of glr.c  */
#line 520 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {currVerilogType=0;}
    break;

  case 206:

/* Line 936 of glr.c  */
#line 521 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {currVerilogType=0;}
    break;

  case 207:

/* Line 936 of glr.c  */
#line 522 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { vbufreset();}
    break;

  case 208:

/* Line 936 of glr.c  */
#line 525 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::TIME; }
    break;

  case 209:

/* Line 936 of glr.c  */
#line 525 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();currVerilogType=0;}
    break;

  case 210:

/* Line 936 of glr.c  */
#line 526 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 219:

/* Line 936 of glr.c  */
#line 555 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {}
    break;

  case 226:

/* Line 936 of glr.c  */
#line 574 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode) {parseReg(currentVerilog);}vbufreset();}
    break;

  case 227:

/* Line 936 of glr.c  */
#line 577 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode) {parseReg(currentVerilog);}vbufreset();}
    break;

  case 228:

/* Line 936 of glr.c  */
#line 578 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode) {parseReg(currentVerilog);}vbufreset();}
    break;

  case 244:

/* Line 936 of glr.c  */
#line 617 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode) {
                                                                   							parseReg(currentVerilog);}
																							vbufreset();}
    break;

  case 245:

/* Line 936 of glr.c  */
#line 620 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode) parseReg(currentVerilog);vbufreset();}
    break;

  case 246:

/* Line 936 of glr.c  */
#line 628 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode) {parseReg(currentVerilog);}vbufreset();}
    break;

  case 247:

/* Line 936 of glr.c  */
#line 630 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {
                          			 if(currVerilogType==VerilogDocGen::PARAMETER && !parseCode)
									 parseParam(currentVerilog);
									 vbufreset();
	                   }
    break;

  case 251:

/* Line 936 of glr.c  */
#line 659 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode && currentFunctionVerilog)
						                                {
														  currentFunctionVerilog->endBodyLine=getVerilogPrevLine();
														} vbufreset(); CurrState=0;}
    break;

  case 252:

/* Line 936 of glr.c  */
#line 667 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode && currentFunctionVerilog){currentFunctionVerilog->endBodyLine=getVerilogPrevLine();} vbufreset();CurrState=0 ;}
    break;

  case 254:

/* Line 936 of glr.c  */
#line 671 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { vbufreset();CurrState=0; }
    break;

  case 255:

/* Line 936 of glr.c  */
#line 675 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {  if(!parseCode){
                             //    printf("\n  funcname [%s] --\n",getVerilogString());
                                 currentFunctionVerilog=VerilogDocGen::makeNewEntry("",Entry::FUNCTION_SEC,VerilogDocGen::FUNCTION);
								 currentFunctionVerilog->fileName=getVerilogParsingFile();
								 parseFunction(currentFunctionVerilog);
								 CurrState=VerilogDocGen::STATE_FUNCTION;
								 }
								 vbufreset();
							   }
    break;

  case 269:

/* Line 936 of glr.c  */
#line 711 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=0;}
    break;

  case 272:

/* Line 936 of glr.c  */
#line 725 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode && currentFunctionVerilog) { currentFunctionVerilog->endBodyLine=getVerilogPrevLine();} vbufreset();}
    break;

  case 274:

/* Line 936 of glr.c  */
#line 729 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode && currentFunctionVerilog) { currentFunctionVerilog->endBodyLine=getVerilogPrevLine();} vbufreset();}
    break;

  case 275:

/* Line 936 of glr.c  */
#line 731 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode && currentFunctionVerilog) { currentFunctionVerilog->endBodyLine=getVerilogPrevLine();} vbufreset();}
    break;

  case 276:

/* Line 936 of glr.c  */
#line 732 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { vbufreset();}
    break;

  case 277:

/* Line 936 of glr.c  */
#line 735 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {  if(!parseCode){
                             //    printf("\n  funcname [%s] --\n",getVerilogString());
                                 currentFunctionVerilog=VerilogDocGen::makeNewEntry("",Entry::FUNCTION_SEC,VerilogDocGen::TASK);
								 currentFunctionVerilog->fileName=getVerilogParsingFile();
								 parseFunction(currentFunctionVerilog);
								 CurrState=VerilogDocGen::STATE_FUNCTION;
								 }
								 vbufreset();
							   }
    break;

  case 287:

/* Line 936 of glr.c  */
#line 771 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {
                             if(!parseCode){
							   parsePortDir(currentVerilog,3);}
							   vbufreset();
                     }
    break;

  case 288:

/* Line 936 of glr.c  */
#line 776 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode){
							   parsePortDir(currentVerilog,3);}
							   vbufreset();
                      }
    break;

  case 289:

/* Line 936 of glr.c  */
#line 780 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode){
							   parsePortDir(currentVerilog,3);}
							   vbufreset();
                       }
    break;

  case 290:

/* Line 936 of glr.c  */
#line 785 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {
                             if(!parseCode){
							   parsePortDir(currentVerilog,3);}
							   vbufreset();
                   }
    break;

  case 291:

/* Line 936 of glr.c  */
#line 790 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {
                             if(!parseCode){
							   parsePortDir(currentVerilog,3);}
							   vbufreset();
                    }
    break;

  case 298:

/* Line 936 of glr.c  */
#line 808 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { if(!parseCode )currVerilogType=VerilogDocGen::INOUT;}
    break;

  case 299:

/* Line 936 of glr.c  */
#line 809 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { if(!parseCode)currVerilogType=VerilogDocGen::OUTPUT;}
    break;

  case 300:

/* Line 936 of glr.c  */
#line 810 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { if(!parseCode)currVerilogType=VerilogDocGen::INPUT;}
    break;

  case 301:

/* Line 936 of glr.c  */
#line 811 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { if(!parseCode){parsePortDir(currentVerilog,3);vbufreset();}}
    break;

  case 304:

/* Line 936 of glr.c  */
#line 819 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode){currVerilogType=VerilogDocGen::INPUT;parsePortDir(currentVerilog,3);}vbufreset();}
    break;

  case 305:

/* Line 936 of glr.c  */
#line 820 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode){currVerilogType=VerilogDocGen::INPUT;parsePortDir(currentVerilog,3);}vbufreset();}
    break;

  case 306:

/* Line 936 of glr.c  */
#line 821 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode){currVerilogType=VerilogDocGen::INPUT;parsePortDir(currentVerilog,3);}vbufreset();}
    break;

  case 307:

/* Line 936 of glr.c  */
#line 822 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode){currVerilogType=VerilogDocGen::INPUT;parsePortDir(currentVerilog,3);}vbufreset();}
    break;

  case 308:

/* Line 936 of glr.c  */
#line 823 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode){currVerilogType=VerilogDocGen::INPUT;parsePortDir(currentVerilog,3);}vbufreset();}
    break;

  case 309:

/* Line 936 of glr.c  */
#line 824 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode){currVerilogType=VerilogDocGen::INPUT;parsePortDir(currentVerilog,3);}vbufreset();}
    break;

  case 310:

/* Line 936 of glr.c  */
#line 825 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode){currVerilogType=VerilogDocGen::INPUT;parsePortDir(currentVerilog,3);}vbufreset();}
    break;

  case 311:

/* Line 936 of glr.c  */
#line 826 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { vbufreset(); }
    break;

  case 324:

/* Line 936 of glr.c  */
#line 850 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 325:

/* Line 936 of glr.c  */
#line 851 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 326:

/* Line 936 of glr.c  */
#line 852 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 336:

/* Line 936 of glr.c  */
#line 873 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { vbufreset(); }
    break;

  case 349:

/* Line 936 of glr.c  */
#line 915 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { 
                    						     moduleParamName=prevName;	
                    					         moduleLine=c_lloc.first_line;
                    						}
    break;

  case 350:

/* Line 936 of glr.c  */
#line 918 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();moduleLine=0;}
    break;

  case 352:

/* Line 936 of glr.c  */
#line 919 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 360:

/* Line 936 of glr.c  */
#line 934 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {}
    break;

  case 363:

/* Line 936 of glr.c  */
#line 941 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { }
    break;

  case 365:

/* Line 936 of glr.c  */
#line 946 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 366:

/* Line 936 of glr.c  */
#line 947 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { vbufreset();}
    break;

  case 367:

/* Line 936 of glr.c  */
#line 951 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset(); currVerilogType=0;}
    break;

  case 368:

/* Line 936 of glr.c  */
#line 952 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset(); currVerilogType=0;}
    break;

  case 369:

/* Line 936 of glr.c  */
#line 953 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset(); currVerilogType=0;}
    break;

  case 370:

/* Line 936 of glr.c  */
#line 956 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { 
                            QCString secName((((yyGLRStackItem const *)yyvsp)[YYFILL ((0) - (2))].yystate.yysemantics.yysval.cstr));
							QCString firstName((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.cstr));
							//int u=getVerilogEndLine();
							//QCString secName(getVerilogString());
							 if(moduleParamName.isEmpty()){
							   moduleParamName=secName;
							  moduleLine=c_lloc.last_line;
							   }
							 parseModuleInst(firstName,moduleParamName);
							 moduleParamName.resize(0);
							     if(parseCode){
							  currVerilogType=VerilogDocGen::COMPONENT;
							  vbufreset();
							  }
							  }
    break;

  case 379:

/* Line 936 of glr.c  */
#line 1002 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {CurrState=VerilogDocGen::STATE_GENERATE;generateItem=true;}
    break;

  case 380:

/* Line 936 of glr.c  */
#line 1002 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {CurrState=0;generateItem=false;}
    break;

  case 381:

/* Line 936 of glr.c  */
#line 1003 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {CurrState=0;generateItem=false;}
    break;

  case 386:

/* Line 936 of glr.c  */
#line 1016 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 387:

/* Line 936 of glr.c  */
#line 1017 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 388:

/* Line 936 of glr.c  */
#line 1018 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 389:

/* Line 936 of glr.c  */
#line 1019 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 390:

/* Line 936 of glr.c  */
#line 1020 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 403:

/* Line 936 of glr.c  */
#line 1048 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { vbufreset();}
    break;

  case 404:

/* Line 936 of glr.c  */
#line 1049 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { vbufreset();}
    break;

  case 405:

/* Line 936 of glr.c  */
#line 1058 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();currentVerilog=0;}
    break;

  case 407:

/* Line 936 of glr.c  */
#line 1064 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { if(!parseCode) { 
							               //  printf("\n  name_of_mod [%s] [%d]--\n",getVerilogString(),getVerilogLine());
                                            lastModule=VerilogDocGen::makeNewEntry("",Entry::CLASS_SEC,VerilogDocGen::MODULE);
                                             currentVerilog=lastModule;
                                             currentVerilog->protection=Private;
					                        //  currentVerilog->stat=TRUE;
					                         parseModule();
							                 CurrState=VerilogDocGen::STATE_MODULE;

										    }
                                            else {
											      parseModule();
                                              //    currVerilogType=VerilogDocGen::MODULE;
												  }
						        vbufreset();
							 }
    break;

  case 408:

/* Line 936 of glr.c  */
#line 1086 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {parseListOfPorts();vbufreset();}
    break;

  case 409:

/* Line 936 of glr.c  */
#line 1087 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {parseListOfPorts();vbufreset();}
    break;

  case 420:

/* Line 936 of glr.c  */
#line 1108 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::OUTPUT;if(!parseCode)parsePortDir(currentVerilog,3);vbufreset();}
    break;

  case 421:

/* Line 936 of glr.c  */
#line 1109 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::OUTPUT;if(!parseCode)parsePortDir(currentVerilog,3);vbufreset();}
    break;

  case 422:

/* Line 936 of glr.c  */
#line 1110 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::OUTPUT;if(!parseCode)parsePortDir(currentVerilog,3);vbufreset();}
    break;

  case 423:

/* Line 936 of glr.c  */
#line 1111 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::OUTPUT;if(!parseCode)parsePortDir(currentVerilog,3);vbufreset();}
    break;

  case 424:

/* Line 936 of glr.c  */
#line 1114 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::INPUT;if(!parseCode)parsePortDir(currentVerilog,3);vbufreset();}
    break;

  case 425:

/* Line 936 of glr.c  */
#line 1115 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::INPUT;if(!parseCode)parsePortDir(currentVerilog,3);vbufreset();}
    break;

  case 426:

/* Line 936 of glr.c  */
#line 1117 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode) parseReg(currentVerilog);vbufreset();}
    break;

  case 427:

/* Line 936 of glr.c  */
#line 1118 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode) parseReg(currentVerilog);vbufreset();}
    break;

  case 429:

/* Line 936 of glr.c  */
#line 1128 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { vbufreset();}
    break;

  case 430:

/* Line 936 of glr.c  */
#line 1129 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { vbufreset();}
    break;

  case 431:

/* Line 936 of glr.c  */
#line 1130 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { vbufreset();}
    break;

  case 432:

/* Line 936 of glr.c  */
#line 1131 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { vbufreset();}
    break;

  case 437:

/* Line 936 of glr.c  */
#line 1145 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { vbufreset(); }
    break;

  case 438:

/* Line 936 of glr.c  */
#line 1146 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { vbufreset(); }
    break;

  case 439:

/* Line 936 of glr.c  */
#line 1149 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { identVerilog+=(((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.cstr);writeDigit(); }
    break;

  case 451:

/* Line 936 of glr.c  */
#line 1174 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { identVerilog+=(((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.cstr);writeDigit(); }
    break;

  case 470:

/* Line 936 of glr.c  */
#line 1219 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { vbufreset(); }
    break;

  case 471:

/* Line 936 of glr.c  */
#line 1220 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { vbufreset();  }
    break;

  case 472:

/* Line 936 of glr.c  */
#line 1223 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {
                               currVerilogType=VerilogDocGen::ALWAYS;
                               prevName.resize(0);
                     		   }
    break;

  case 473:

/* Line 936 of glr.c  */
#line 1226 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {
                                            if(!parseCode && currentFunctionVerilog)
											 {
											  currentFunctionVerilog->endBodyLine=getVerilogEndLine();
											  if( currentFunctionVerilog->endBodyLine<currentFunctionVerilog->startLine || c_lloc.first_line>currentFunctionVerilog->endBodyLine ) // awlays without end
											   currentFunctionVerilog->endBodyLine=c_lloc.first_line;
											  currVerilogType=0;
											  CurrState=0;
											  }
											   vbufreset();}
    break;

  case 474:

/* Line 936 of glr.c  */
#line 1236 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { vbufreset();currVerilogType=0;}
    break;

  case 478:

/* Line 936 of glr.c  */
#line 1243 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 482:

/* Line 936 of glr.c  */
#line 1249 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 504:

/* Line 936 of glr.c  */
#line 1301 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode && currVerilogType==VerilogDocGen::ALWAYS)parseAlways(true);}
    break;

  case 511:

/* Line 936 of glr.c  */
#line 1310 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {
                                            if(!parseCode){
                                             if(currentFunctionVerilog && currentFunctionVerilog->spec==VerilogDocGen::ALWAYS){
                                             VerilogDocGen::adjustMemberName(prevName); 
                                             currentFunctionVerilog->name=prevName;
                                            }
                                          }
                                         }
    break;

  case 524:

/* Line 936 of glr.c  */
#line 1338 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 539:

/* Line 936 of glr.c  */
#line 1365 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 542:

/* Line 936 of glr.c  */
#line 1370 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {currVerilogType=0;}
    break;

  case 543:

/* Line 936 of glr.c  */
#line 1370 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {currVerilogType=0;}
    break;

  case 545:

/* Line 936 of glr.c  */
#line 1376 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { parseAlways(); vbufreset();currVerilogType=0;}
    break;

  case 546:

/* Line 936 of glr.c  */
#line 1377 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { parseAlways(); vbufreset();currVerilogType=0;}
    break;

  case 547:

/* Line 936 of glr.c  */
#line 1378 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { parseAlways(); vbufreset();currVerilogType=0;}
    break;

  case 548:

/* Line 936 of glr.c  */
#line 1379 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { parseAlways(); vbufreset();currVerilogType=0;}
    break;

  case 549:

/* Line 936 of glr.c  */
#line 1380 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { parseAlways(); vbufreset();currVerilogType=0;}
    break;

  case 567:

/* Line 936 of glr.c  */
#line 1419 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { vbufreset();}
    break;

  case 569:

/* Line 936 of glr.c  */
#line 1421 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { vbufreset();}
    break;

  case 571:

/* Line 936 of glr.c  */
#line 1423 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { vbufreset();}
    break;

  case 593:

/* Line 936 of glr.c  */
#line 1475 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { vbufreset(); }
    break;

  case 594:

/* Line 936 of glr.c  */
#line 1476 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { vbufreset(); }
    break;

  case 595:

/* Line 936 of glr.c  */
#line 1480 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { vbufreset(); }
    break;

  case 596:

/* Line 936 of glr.c  */
#line 1481 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { vbufreset(); }
    break;

  case 597:

/* Line 936 of glr.c  */
#line 1485 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 598:

/* Line 936 of glr.c  */
#line 1486 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 599:

/* Line 936 of glr.c  */
#line 1487 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 600:

/* Line 936 of glr.c  */
#line 1488 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 601:

/* Line 936 of glr.c  */
#line 1489 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 790:

/* Line 936 of glr.c  */
#line 1902 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { identVerilog+=(((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.cstr);writeDigit(); }
    break;

  case 791:

/* Line 936 of glr.c  */
#line 1903 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {if(parseCode) {writePrevVerilogWords(identVerilog);writeVerilogFont("vhdllogic",identVerilog.data());identVerilog.resize(0);}}
    break;

  case 792:

/* Line 936 of glr.c  */
#line 1914 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 793:

/* Line 936 of glr.c  */
#line 1915 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { vbufreset(); }
    break;

  case 795:

/* Line 936 of glr.c  */
#line 1919 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { vbufreset(); }
    break;

  case 796:

/* Line 936 of glr.c  */
#line 1920 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { vbufreset(); }
    break;

  case 802:

/* Line 936 of glr.c  */
#line 1932 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {
										 }
    break;

  case 803:

/* Line 936 of glr.c  */
#line 1936 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    { parseString(); }
    break;

  case 804:

/* Line 936 of glr.c  */
#line 1939 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {
                    	//if(parseCode) 
						      identVerilog+=(((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.cstr); 
						  //    fprintf(stderr,"\n String: %s",identVerilog.data());
							 }
    break;

  case 805:

/* Line 936 of glr.c  */
#line 1944 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"
    {}
    break;



/* Line 936 of glr.c  */
#line 5744 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.cpp"
      default: break;
    }

  return yyok;
# undef yyerrok
# undef YYABORT
# undef YYACCEPT
# undef YYERROR
# undef YYBACKUP
# undef yyclearin
# undef YYRECOVERING
}


/*ARGSUSED*/ static void
yyuserMerge (int yyn, YYSTYPE* yy0, YYSTYPE* yy1)
{
  YYUSE (yy0);
  YYUSE (yy1);

  switch (yyn)
    {
      
      default: break;
    }
}

			      /* Bison grammar-table manipulation.  */

/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

/*ARGSUSED*/
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, YYLTYPE *yylocationp)
{
  YYUSE (yyvaluep);
  YYUSE (yylocationp);

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {

      default:
	break;
    }
}

/** Number of symbols composing the right hand side of rule #RULE.  */
static inline int
yyrhsLength (yyRuleNum yyrule)
{
  return yyr2[yyrule];
}

static void
yydestroyGLRState (char const *yymsg, yyGLRState *yys)
{
  if (yys->yyresolved)
    yydestruct (yymsg, yystos[yys->yylrState],
		&yys->yysemantics.yysval, &yys->yyloc);
  else
    {
#if YYDEBUG
      if (yydebug)
	{
	  if (yys->yysemantics.yyfirstVal)
	    YYFPRINTF (stderr, "%s unresolved ", yymsg);
	  else
	    YYFPRINTF (stderr, "%s incomplete ", yymsg);
	  yy_symbol_print (stderr, yystos[yys->yylrState],
			   NULL, &yys->yyloc);
	  YYFPRINTF (stderr, "\n");
	}
#endif

      if (yys->yysemantics.yyfirstVal)
	{
	  yySemanticOption *yyoption = yys->yysemantics.yyfirstVal;
	  yyGLRState *yyrh;
	  int yyn;
	  for (yyrh = yyoption->yystate, yyn = yyrhsLength (yyoption->yyrule);
	       yyn > 0;
	       yyrh = yyrh->yypred, yyn -= 1)
	    yydestroyGLRState (yymsg, yyrh);
	}
    }
}

/** Left-hand-side symbol for rule #RULE.  */
static inline yySymbol
yylhsNonterm (yyRuleNum yyrule)
{
  return yyr1[yyrule];
}

#define yyis_pact_ninf(yystate) \
  ((yystate) == YYPACT_NINF)

/** True iff LR state STATE has only a default reduction (regardless
 *  of token).  */
static inline yybool
yyisDefaultedState (yyStateNum yystate)
{
  return yyis_pact_ninf (yypact[yystate]);
}

/** The default reduction for STATE, assuming it has one.  */
static inline yyRuleNum
yydefaultAction (yyStateNum yystate)
{
  return yydefact[yystate];
}

#define yyis_table_ninf(yytable_value) \
  YYID (0)

/** Set *YYACTION to the action to take in YYSTATE on seeing YYTOKEN.
 *  Result R means
 *    R < 0:  Reduce on rule -R.
 *    R = 0:  Error.
 *    R > 0:  Shift to state R.
 *  Set *CONFLICTS to a pointer into yyconfl to 0-terminated list of
 *  conflicting reductions.
 */
static inline void
yygetLRActions (yyStateNum yystate, int yytoken,
		int* yyaction, const short int** yyconflicts)
{
  int yyindex = yypact[yystate] + yytoken;
  if (yyindex < 0 || YYLAST < yyindex || yycheck[yyindex] != yytoken)
    {
      *yyaction = -yydefact[yystate];
      *yyconflicts = yyconfl;
    }
  else if (! yyis_table_ninf (yytable[yyindex]))
    {
      *yyaction = yytable[yyindex];
      *yyconflicts = yyconfl + yyconflp[yyindex];
    }
  else
    {
      *yyaction = 0;
      *yyconflicts = yyconfl + yyconflp[yyindex];
    }
}

static inline yyStateNum
yyLRgotoState (yyStateNum yystate, yySymbol yylhs)
{
  int yyr;
  yyr = yypgoto[yylhs - YYNTOKENS] + yystate;
  if (0 <= yyr && yyr <= YYLAST && yycheck[yyr] == yystate)
    return yytable[yyr];
  else
    return yydefgoto[yylhs - YYNTOKENS];
}

static inline yybool
yyisShiftAction (int yyaction)
{
  return 0 < yyaction;
}

static inline yybool
yyisErrorAction (int yyaction)
{
  return yyaction == 0;
}

				/* GLRStates */

/** Return a fresh GLRStackItem.  Callers should call
 * YY_RESERVE_GLRSTACK afterwards to make sure there is sufficient
 * headroom.  */

static inline yyGLRStackItem*
yynewGLRStackItem (yyGLRStack* yystackp, yybool yyisState)
{
  yyGLRStackItem* yynewItem = yystackp->yynextFree;
  yystackp->yyspaceLeft -= 1;
  yystackp->yynextFree += 1;
  yynewItem->yystate.yyisState = yyisState;
  return yynewItem;
}

/** Add a new semantic action that will execute the action for rule
 *  RULENUM on the semantic values in RHS to the list of
 *  alternative actions for STATE.  Assumes that RHS comes from
 *  stack #K of *STACKP. */
static void
yyaddDeferredAction (yyGLRStack* yystackp, size_t yyk, yyGLRState* yystate,
		     yyGLRState* rhs, yyRuleNum yyrule)
{
  yySemanticOption* yynewOption =
    &yynewGLRStackItem (yystackp, yyfalse)->yyoption;
  yynewOption->yystate = rhs;
  yynewOption->yyrule = yyrule;
  if (yystackp->yytops.yylookaheadNeeds[yyk])
    {
      yynewOption->yyrawchar = yychar;
      yynewOption->yyval = yylval;
      yynewOption->yyloc = yylloc;
    }
  else
    yynewOption->yyrawchar = YYEMPTY;
  yynewOption->yynext = yystate->yysemantics.yyfirstVal;
  yystate->yysemantics.yyfirstVal = yynewOption;

  YY_RESERVE_GLRSTACK (yystackp);
}

				/* GLRStacks */

/** Initialize SET to a singleton set containing an empty stack.  */
static yybool
yyinitStateSet (yyGLRStateSet* yyset)
{
  yyset->yysize = 1;
  yyset->yycapacity = 16;
  yyset->yystates = (yyGLRState**) YYMALLOC (16 * sizeof yyset->yystates[0]);
  if (! yyset->yystates)
    return yyfalse;
  yyset->yystates[0] = NULL;
  yyset->yylookaheadNeeds =
    (yybool*) YYMALLOC (16 * sizeof yyset->yylookaheadNeeds[0]);
  if (! yyset->yylookaheadNeeds)
    {
      YYFREE (yyset->yystates);
      return yyfalse;
    }
  return yytrue;
}

static void yyfreeStateSet (yyGLRStateSet* yyset)
{
  YYFREE (yyset->yystates);
  YYFREE (yyset->yylookaheadNeeds);
}

/** Initialize STACK to a single empty stack, with total maximum
 *  capacity for all stacks of SIZE.  */
static yybool
yyinitGLRStack (yyGLRStack* yystackp, size_t yysize)
{
  yystackp->yyerrState = 0;
  yynerrs = 0;
  yystackp->yyspaceLeft = yysize;
  yystackp->yyitems =
    (yyGLRStackItem*) YYMALLOC (yysize * sizeof yystackp->yynextFree[0]);
  if (!yystackp->yyitems)
    return yyfalse;
  yystackp->yynextFree = yystackp->yyitems;
  yystackp->yysplitPoint = NULL;
  yystackp->yylastDeleted = NULL;
  return yyinitStateSet (&yystackp->yytops);
}


#if YYSTACKEXPANDABLE
# define YYRELOC(YYFROMITEMS,YYTOITEMS,YYX,YYTYPE) \
  &((YYTOITEMS) - ((YYFROMITEMS) - (yyGLRStackItem*) (YYX)))->YYTYPE

/** If STACK is expandable, extend it.  WARNING: Pointers into the
    stack from outside should be considered invalid after this call.
    We always expand when there are 1 or fewer items left AFTER an
    allocation, so that we can avoid having external pointers exist
    across an allocation.  */
static void
yyexpandGLRStack (yyGLRStack* yystackp)
{
  yyGLRStackItem* yynewItems;
  yyGLRStackItem* yyp0, *yyp1;
  size_t yysize, yynewSize;
  size_t yyn;
  yysize = yystackp->yynextFree - yystackp->yyitems;
  if (YYMAXDEPTH - YYHEADROOM < yysize)
    yyMemoryExhausted (yystackp);
  yynewSize = 2*yysize;
  if (YYMAXDEPTH < yynewSize)
    yynewSize = YYMAXDEPTH;
  yynewItems = (yyGLRStackItem*) YYMALLOC (yynewSize * sizeof yynewItems[0]);
  if (! yynewItems)
    yyMemoryExhausted (yystackp);
  for (yyp0 = yystackp->yyitems, yyp1 = yynewItems, yyn = yysize;
       0 < yyn;
       yyn -= 1, yyp0 += 1, yyp1 += 1)
    {
      *yyp1 = *yyp0;
      if (*(yybool *) yyp0)
	{
	  yyGLRState* yys0 = &yyp0->yystate;
	  yyGLRState* yys1 = &yyp1->yystate;
	  if (yys0->yypred != NULL)
	    yys1->yypred =
	      YYRELOC (yyp0, yyp1, yys0->yypred, yystate);
	  if (! yys0->yyresolved && yys0->yysemantics.yyfirstVal != NULL)
	    yys1->yysemantics.yyfirstVal =
	      YYRELOC(yyp0, yyp1, yys0->yysemantics.yyfirstVal, yyoption);
	}
      else
	{
	  yySemanticOption* yyv0 = &yyp0->yyoption;
	  yySemanticOption* yyv1 = &yyp1->yyoption;
	  if (yyv0->yystate != NULL)
	    yyv1->yystate = YYRELOC (yyp0, yyp1, yyv0->yystate, yystate);
	  if (yyv0->yynext != NULL)
	    yyv1->yynext = YYRELOC (yyp0, yyp1, yyv0->yynext, yyoption);
	}
    }
  if (yystackp->yysplitPoint != NULL)
    yystackp->yysplitPoint = YYRELOC (yystackp->yyitems, yynewItems,
				 yystackp->yysplitPoint, yystate);

  for (yyn = 0; yyn < yystackp->yytops.yysize; yyn += 1)
    if (yystackp->yytops.yystates[yyn] != NULL)
      yystackp->yytops.yystates[yyn] =
	YYRELOC (yystackp->yyitems, yynewItems,
		 yystackp->yytops.yystates[yyn], yystate);
  YYFREE (yystackp->yyitems);
  yystackp->yyitems = yynewItems;
  yystackp->yynextFree = yynewItems + yysize;
  yystackp->yyspaceLeft = yynewSize - yysize;
}
#endif

static void
yyfreeGLRStack (yyGLRStack* yystackp)
{
  YYFREE (yystackp->yyitems);
  yyfreeStateSet (&yystackp->yytops);
}

/** Assuming that S is a GLRState somewhere on STACK, update the
 *  splitpoint of STACK, if needed, so that it is at least as deep as
 *  S.  */
static inline void
yyupdateSplit (yyGLRStack* yystackp, yyGLRState* yys)
{
  if (yystackp->yysplitPoint != NULL && yystackp->yysplitPoint > yys)
    yystackp->yysplitPoint = yys;
}

/** Invalidate stack #K in STACK.  */
static inline void
yymarkStackDeleted (yyGLRStack* yystackp, size_t yyk)
{
  if (yystackp->yytops.yystates[yyk] != NULL)
    yystackp->yylastDeleted = yystackp->yytops.yystates[yyk];
  yystackp->yytops.yystates[yyk] = NULL;
}

/** Undelete the last stack that was marked as deleted.  Can only be
    done once after a deletion, and only when all other stacks have
    been deleted.  */
static void
yyundeleteLastStack (yyGLRStack* yystackp)
{
  if (yystackp->yylastDeleted == NULL || yystackp->yytops.yysize != 0)
    return;
  yystackp->yytops.yystates[0] = yystackp->yylastDeleted;
  yystackp->yytops.yysize = 1;
  YYDPRINTF ((stderr, "Restoring last deleted stack as stack #0.\n"));
  yystackp->yylastDeleted = NULL;
}

static inline void
yyremoveDeletes (yyGLRStack* yystackp)
{
  size_t yyi, yyj;
  yyi = yyj = 0;
  while (yyj < yystackp->yytops.yysize)
    {
      if (yystackp->yytops.yystates[yyi] == NULL)
	{
	  if (yyi == yyj)
	    {
	      YYDPRINTF ((stderr, "Removing dead stacks.\n"));
	    }
	  yystackp->yytops.yysize -= 1;
	}
      else
	{
	  yystackp->yytops.yystates[yyj] = yystackp->yytops.yystates[yyi];
	  /* In the current implementation, it's unnecessary to copy
	     yystackp->yytops.yylookaheadNeeds[yyi] since, after
	     yyremoveDeletes returns, the parser immediately either enters
	     deterministic operation or shifts a token.  However, it doesn't
	     hurt, and the code might evolve to need it.  */
	  yystackp->yytops.yylookaheadNeeds[yyj] =
	    yystackp->yytops.yylookaheadNeeds[yyi];
	  if (yyj != yyi)
	    {
	      YYDPRINTF ((stderr, "Rename stack %lu -> %lu.\n",
			  (unsigned long int) yyi, (unsigned long int) yyj));
	    }
	  yyj += 1;
	}
      yyi += 1;
    }
}

/** Shift to a new state on stack #K of STACK, corresponding to LR state
 * LRSTATE, at input position POSN, with (resolved) semantic value SVAL.  */
static inline void
yyglrShift (yyGLRStack* yystackp, size_t yyk, yyStateNum yylrState,
	    size_t yyposn,
	    YYSTYPE* yyvalp, YYLTYPE* yylocp)
{
  yyGLRState* yynewState = &yynewGLRStackItem (yystackp, yytrue)->yystate;

  yynewState->yylrState = yylrState;
  yynewState->yyposn = yyposn;
  yynewState->yyresolved = yytrue;
  yynewState->yypred = yystackp->yytops.yystates[yyk];
  yynewState->yysemantics.yysval = *yyvalp;
  yynewState->yyloc = *yylocp;
  yystackp->yytops.yystates[yyk] = yynewState;

  YY_RESERVE_GLRSTACK (yystackp);
}

/** Shift stack #K of YYSTACK, to a new state corresponding to LR
 *  state YYLRSTATE, at input position YYPOSN, with the (unresolved)
 *  semantic value of YYRHS under the action for YYRULE.  */
static inline void
yyglrShiftDefer (yyGLRStack* yystackp, size_t yyk, yyStateNum yylrState,
		 size_t yyposn, yyGLRState* rhs, yyRuleNum yyrule)
{
  yyGLRState* yynewState = &yynewGLRStackItem (yystackp, yytrue)->yystate;

  yynewState->yylrState = yylrState;
  yynewState->yyposn = yyposn;
  yynewState->yyresolved = yyfalse;
  yynewState->yypred = yystackp->yytops.yystates[yyk];
  yynewState->yysemantics.yyfirstVal = NULL;
  yystackp->yytops.yystates[yyk] = yynewState;

  /* Invokes YY_RESERVE_GLRSTACK.  */
  yyaddDeferredAction (yystackp, yyk, yynewState, rhs, yyrule);
}

/** Pop the symbols consumed by reduction #RULE from the top of stack
 *  #K of STACK, and perform the appropriate semantic action on their
 *  semantic values.  Assumes that all ambiguities in semantic values
 *  have been previously resolved.  Set *VALP to the resulting value,
 *  and *LOCP to the computed location (if any).  Return value is as
 *  for userAction.  */
static inline YYRESULTTAG
yydoAction (yyGLRStack* yystackp, size_t yyk, yyRuleNum yyrule,
	    YYSTYPE* yyvalp, YYLTYPE* yylocp)
{
  int yynrhs = yyrhsLength (yyrule);

  if (yystackp->yysplitPoint == NULL)
    {
      /* Standard special case: single stack.  */
      yyGLRStackItem* rhs = (yyGLRStackItem*) yystackp->yytops.yystates[yyk];
      YYASSERT (yyk == 0);
      yystackp->yynextFree -= yynrhs;
      yystackp->yyspaceLeft += yynrhs;
      yystackp->yytops.yystates[0] = & yystackp->yynextFree[-1].yystate;
      return yyuserAction (yyrule, yynrhs, rhs,
			   yyvalp, yylocp, yystackp);
    }
  else
    {
      /* At present, doAction is never called in nondeterministic
       * mode, so this branch is never taken.  It is here in
       * anticipation of a future feature that will allow immediate
       * evaluation of selected actions in nondeterministic mode.  */
      int yyi;
      yyGLRState* yys;
      yyGLRStackItem yyrhsVals[YYMAXRHS + YYMAXLEFT + 1];
      yys = yyrhsVals[YYMAXRHS + YYMAXLEFT].yystate.yypred
	= yystackp->yytops.yystates[yyk];
      if (yynrhs == 0)
	/* Set default location.  */
	yyrhsVals[YYMAXRHS + YYMAXLEFT - 1].yystate.yyloc = yys->yyloc;
      for (yyi = 0; yyi < yynrhs; yyi += 1)
	{
	  yys = yys->yypred;
	  YYASSERT (yys);
	}
      yyupdateSplit (yystackp, yys);
      yystackp->yytops.yystates[yyk] = yys;
      return yyuserAction (yyrule, yynrhs, yyrhsVals + YYMAXRHS + YYMAXLEFT - 1,
			   yyvalp, yylocp, yystackp);
    }
}

#if !YYDEBUG
# define YY_REDUCE_PRINT(Args)
#else
# define YY_REDUCE_PRINT(Args)		\
do {					\
  if (yydebug)				\
    yy_reduce_print Args;		\
} while (YYID (0))

/*----------------------------------------------------------.
| Report that the RULE is going to be reduced on stack #K.  |
`----------------------------------------------------------*/

/*ARGSUSED*/ static inline void
yy_reduce_print (yyGLRStack* yystackp, size_t yyk, yyRuleNum yyrule,
		 YYSTYPE* yyvalp, YYLTYPE* yylocp)
{
  int yynrhs = yyrhsLength (yyrule);
  yybool yynormal __attribute__ ((__unused__)) =
    (yystackp->yysplitPoint == NULL);
  yyGLRStackItem* yyvsp = (yyGLRStackItem*) yystackp->yytops.yystates[yyk];
  int yylow = 1;
  int yyi;
  YYUSE (yyvalp);
  YYUSE (yylocp);
  YYFPRINTF (stderr, "Reducing stack %lu by rule %d (line %lu):\n",
	     (unsigned long int) yyk, yyrule - 1,
	     (unsigned long int) yyrline[yyrule]);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
		       &(((yyGLRStackItem const *)yyvsp)[YYFILL ((yyi + 1) - (yynrhs))].yystate.yysemantics.yysval)
		       , &(((yyGLRStackItem const *)yyvsp)[YYFILL ((yyi + 1) - (yynrhs))].yystate.yyloc)		       );
      YYFPRINTF (stderr, "\n");
    }
}
#endif

/** Pop items off stack #K of STACK according to grammar rule RULE,
 *  and push back on the resulting nonterminal symbol.  Perform the
 *  semantic action associated with RULE and store its value with the
 *  newly pushed state, if FORCEEVAL or if STACK is currently
 *  unambiguous.  Otherwise, store the deferred semantic action with
 *  the new state.  If the new state would have an identical input
 *  position, LR state, and predecessor to an existing state on the stack,
 *  it is identified with that existing state, eliminating stack #K from
 *  the STACK.  In this case, the (necessarily deferred) semantic value is
 *  added to the options for the existing state's semantic value.
 */
static inline YYRESULTTAG
yyglrReduce (yyGLRStack* yystackp, size_t yyk, yyRuleNum yyrule,
	     yybool yyforceEval)
{
  size_t yyposn = yystackp->yytops.yystates[yyk]->yyposn;

  if (yyforceEval || yystackp->yysplitPoint == NULL)
    {
      YYSTYPE yysval;
      YYLTYPE yyloc;

      YY_REDUCE_PRINT ((yystackp, yyk, yyrule, &yysval, &yyloc));
      YYCHK (yydoAction (yystackp, yyk, yyrule, &yysval,
			 &yyloc));
      YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyrule], &yysval, &yyloc);
      yyglrShift (yystackp, yyk,
		  yyLRgotoState (yystackp->yytops.yystates[yyk]->yylrState,
				 yylhsNonterm (yyrule)),
		  yyposn, &yysval, &yyloc);
    }
  else
    {
      size_t yyi;
      int yyn;
      yyGLRState* yys, *yys0 = yystackp->yytops.yystates[yyk];
      yyStateNum yynewLRState;

      for (yys = yystackp->yytops.yystates[yyk], yyn = yyrhsLength (yyrule);
	   0 < yyn; yyn -= 1)
	{
	  yys = yys->yypred;
	  YYASSERT (yys);
	}
      yyupdateSplit (yystackp, yys);
      yynewLRState = yyLRgotoState (yys->yylrState, yylhsNonterm (yyrule));
      YYDPRINTF ((stderr,
		  "Reduced stack %lu by rule #%d; action deferred.  Now in state %d.\n",
		  (unsigned long int) yyk, yyrule - 1, yynewLRState));
      for (yyi = 0; yyi < yystackp->yytops.yysize; yyi += 1)
	if (yyi != yyk && yystackp->yytops.yystates[yyi] != NULL)
	  {
	    yyGLRState* yyp, *yysplit = yystackp->yysplitPoint;
	    yyp = yystackp->yytops.yystates[yyi];
	    while (yyp != yys && yyp != yysplit && yyp->yyposn >= yyposn)
	      {
		if (yyp->yylrState == yynewLRState && yyp->yypred == yys)
		  {
		    yyaddDeferredAction (yystackp, yyk, yyp, yys0, yyrule);
		    yymarkStackDeleted (yystackp, yyk);
		    YYDPRINTF ((stderr, "Merging stack %lu into stack %lu.\n",
				(unsigned long int) yyk,
				(unsigned long int) yyi));
		    return yyok;
		  }
		yyp = yyp->yypred;
	      }
	  }
      yystackp->yytops.yystates[yyk] = yys;
      yyglrShiftDefer (yystackp, yyk, yynewLRState, yyposn, yys0, yyrule);
    }
  return yyok;
}

static size_t
yysplitStack (yyGLRStack* yystackp, size_t yyk)
{
  if (yystackp->yysplitPoint == NULL)
    {
      YYASSERT (yyk == 0);
      yystackp->yysplitPoint = yystackp->yytops.yystates[yyk];
    }
  if (yystackp->yytops.yysize >= yystackp->yytops.yycapacity)
    {
      yyGLRState** yynewStates;
      yybool* yynewLookaheadNeeds;

      yynewStates = NULL;

      if (yystackp->yytops.yycapacity
	  > (YYSIZEMAX / (2 * sizeof yynewStates[0])))
	yyMemoryExhausted (yystackp);
      yystackp->yytops.yycapacity *= 2;

      yynewStates =
	(yyGLRState**) YYREALLOC (yystackp->yytops.yystates,
				  (yystackp->yytops.yycapacity
				   * sizeof yynewStates[0]));
      if (yynewStates == NULL)
	yyMemoryExhausted (yystackp);
      yystackp->yytops.yystates = yynewStates;

      yynewLookaheadNeeds =
	(yybool*) YYREALLOC (yystackp->yytops.yylookaheadNeeds,
			     (yystackp->yytops.yycapacity
			      * sizeof yynewLookaheadNeeds[0]));
      if (yynewLookaheadNeeds == NULL)
	yyMemoryExhausted (yystackp);
      yystackp->yytops.yylookaheadNeeds = yynewLookaheadNeeds;
    }
  yystackp->yytops.yystates[yystackp->yytops.yysize]
    = yystackp->yytops.yystates[yyk];
  yystackp->yytops.yylookaheadNeeds[yystackp->yytops.yysize]
    = yystackp->yytops.yylookaheadNeeds[yyk];
  yystackp->yytops.yysize += 1;
  return yystackp->yytops.yysize-1;
}

/** True iff Y0 and Y1 represent identical options at the top level.
 *  That is, they represent the same rule applied to RHS symbols
 *  that produce the same terminal symbols.  */
static yybool
yyidenticalOptions (yySemanticOption* yyy0, yySemanticOption* yyy1)
{
  if (yyy0->yyrule == yyy1->yyrule)
    {
      yyGLRState *yys0, *yys1;
      int yyn;
      for (yys0 = yyy0->yystate, yys1 = yyy1->yystate,
	   yyn = yyrhsLength (yyy0->yyrule);
	   yyn > 0;
	   yys0 = yys0->yypred, yys1 = yys1->yypred, yyn -= 1)
	if (yys0->yyposn != yys1->yyposn)
	  return yyfalse;
      return yytrue;
    }
  else
    return yyfalse;
}

/** Assuming identicalOptions (Y0,Y1), destructively merge the
 *  alternative semantic values for the RHS-symbols of Y1 and Y0.  */
static void
yymergeOptionSets (yySemanticOption* yyy0, yySemanticOption* yyy1)
{
  yyGLRState *yys0, *yys1;
  int yyn;
  for (yys0 = yyy0->yystate, yys1 = yyy1->yystate,
       yyn = yyrhsLength (yyy0->yyrule);
       yyn > 0;
       yys0 = yys0->yypred, yys1 = yys1->yypred, yyn -= 1)
    {
      if (yys0 == yys1)
	break;
      else if (yys0->yyresolved)
	{
	  yys1->yyresolved = yytrue;
	  yys1->yysemantics.yysval = yys0->yysemantics.yysval;
	}
      else if (yys1->yyresolved)
	{
	  yys0->yyresolved = yytrue;
	  yys0->yysemantics.yysval = yys1->yysemantics.yysval;
	}
      else
	{
	  yySemanticOption** yyz0p;
	  yySemanticOption* yyz1;
	  yyz0p = &yys0->yysemantics.yyfirstVal;
	  yyz1 = yys1->yysemantics.yyfirstVal;
	  while (YYID (yytrue))
	    {
	      if (yyz1 == *yyz0p || yyz1 == NULL)
		break;
	      else if (*yyz0p == NULL)
		{
		  *yyz0p = yyz1;
		  break;
		}
	      else if (*yyz0p < yyz1)
		{
		  yySemanticOption* yyz = *yyz0p;
		  *yyz0p = yyz1;
		  yyz1 = yyz1->yynext;
		  (*yyz0p)->yynext = yyz;
		}
	      yyz0p = &(*yyz0p)->yynext;
	    }
	  yys1->yysemantics.yyfirstVal = yys0->yysemantics.yyfirstVal;
	}
    }
}

/** Y0 and Y1 represent two possible actions to take in a given
 *  parsing state; return 0 if no combination is possible,
 *  1 if user-mergeable, 2 if Y0 is preferred, 3 if Y1 is preferred.  */
static int
yypreference (yySemanticOption* y0, yySemanticOption* y1)
{
  yyRuleNum r0 = y0->yyrule, r1 = y1->yyrule;
  int p0 = yydprec[r0], p1 = yydprec[r1];

  if (p0 == p1)
    {
      if (yymerger[r0] == 0 || yymerger[r0] != yymerger[r1])
	return 0;
      else
	return 1;
    }
  if (p0 == 0 || p1 == 0)
    return 0;
  if (p0 < p1)
    return 3;
  if (p1 < p0)
    return 2;
  return 0;
}

static YYRESULTTAG yyresolveValue (yyGLRState* yys,
				   yyGLRStack* yystackp);


/** Resolve the previous N states starting at and including state S.  If result
 *  != yyok, some states may have been left unresolved possibly with empty
 *  semantic option chains.  Regardless of whether result = yyok, each state
 *  has been left with consistent data so that yydestroyGLRState can be invoked
 *  if necessary.  */
static YYRESULTTAG
yyresolveStates (yyGLRState* yys, int yyn,
		 yyGLRStack* yystackp)
{
  if (0 < yyn)
    {
      YYASSERT (yys->yypred);
      YYCHK (yyresolveStates (yys->yypred, yyn-1, yystackp));
      if (! yys->yyresolved)
	YYCHK (yyresolveValue (yys, yystackp));
    }
  return yyok;
}

/** Resolve the states for the RHS of OPT, perform its user action, and return
 *  the semantic value and location.  Regardless of whether result = yyok, all
 *  RHS states have been destroyed (assuming the user action destroys all RHS
 *  semantic values if invoked).  */
static YYRESULTTAG
yyresolveAction (yySemanticOption* yyopt, yyGLRStack* yystackp,
		 YYSTYPE* yyvalp, YYLTYPE* yylocp)
{
  yyGLRStackItem yyrhsVals[YYMAXRHS + YYMAXLEFT + 1];
  int yynrhs;
  int yychar_current;
  YYSTYPE yylval_current;
  YYLTYPE yylloc_current;
  YYRESULTTAG yyflag;

  yynrhs = yyrhsLength (yyopt->yyrule);
  yyflag = yyresolveStates (yyopt->yystate, yynrhs, yystackp);
  if (yyflag != yyok)
    {
      yyGLRState *yys;
      for (yys = yyopt->yystate; yynrhs > 0; yys = yys->yypred, yynrhs -= 1)
	yydestroyGLRState ("Cleanup: popping", yys);
      return yyflag;
    }

  yyrhsVals[YYMAXRHS + YYMAXLEFT].yystate.yypred = yyopt->yystate;
  if (yynrhs == 0)
    /* Set default location.  */
    yyrhsVals[YYMAXRHS + YYMAXLEFT - 1].yystate.yyloc = yyopt->yystate->yyloc;
  yychar_current = yychar;
  yylval_current = yylval;
  yylloc_current = yylloc;
  yychar = yyopt->yyrawchar;
  yylval = yyopt->yyval;
  yylloc = yyopt->yyloc;
  yyflag = yyuserAction (yyopt->yyrule, yynrhs,
			   yyrhsVals + YYMAXRHS + YYMAXLEFT - 1,
			   yyvalp, yylocp, yystackp);
  yychar = yychar_current;
  yylval = yylval_current;
  yylloc = yylloc_current;
  return yyflag;
}

#if YYDEBUG
static void
yyreportTree (yySemanticOption* yyx, int yyindent)
{
  int yynrhs = yyrhsLength (yyx->yyrule);
  int yyi;
  yyGLRState* yys;
  yyGLRState* yystates[1 + YYMAXRHS];
  yyGLRState yyleftmost_state;

  for (yyi = yynrhs, yys = yyx->yystate; 0 < yyi; yyi -= 1, yys = yys->yypred)
    yystates[yyi] = yys;
  if (yys == NULL)
    {
      yyleftmost_state.yyposn = 0;
      yystates[0] = &yyleftmost_state;
    }
  else
    yystates[0] = yys;

  if (yyx->yystate->yyposn < yys->yyposn + 1)
    YYFPRINTF (stderr, "%*s%s -> <Rule %d, empty>\n",
	       yyindent, "", yytokenName (yylhsNonterm (yyx->yyrule)),
	       yyx->yyrule - 1);
  else
    YYFPRINTF (stderr, "%*s%s -> <Rule %d, tokens %lu .. %lu>\n",
	       yyindent, "", yytokenName (yylhsNonterm (yyx->yyrule)),
	       yyx->yyrule - 1, (unsigned long int) (yys->yyposn + 1),
	       (unsigned long int) yyx->yystate->yyposn);
  for (yyi = 1; yyi <= yynrhs; yyi += 1)
    {
      if (yystates[yyi]->yyresolved)
	{
	  if (yystates[yyi-1]->yyposn+1 > yystates[yyi]->yyposn)
	    YYFPRINTF (stderr, "%*s%s <empty>\n", yyindent+2, "",
		       yytokenName (yyrhs[yyprhs[yyx->yyrule]+yyi-1]));
	  else
	    YYFPRINTF (stderr, "%*s%s <tokens %lu .. %lu>\n", yyindent+2, "",
		       yytokenName (yyrhs[yyprhs[yyx->yyrule]+yyi-1]),
		       (unsigned long int) (yystates[yyi - 1]->yyposn + 1),
		       (unsigned long int) yystates[yyi]->yyposn);
	}
      else
	yyreportTree (yystates[yyi]->yysemantics.yyfirstVal, yyindent+2);
    }
}
#endif

/*ARGSUSED*/ static YYRESULTTAG
yyreportAmbiguity (yySemanticOption* yyx0,
		   yySemanticOption* yyx1)
{
  YYUSE (yyx0);
  YYUSE (yyx1);

#if YYDEBUG
  YYFPRINTF (stderr, "Ambiguity detected.\n");
  YYFPRINTF (stderr, "Option 1,\n");
  yyreportTree (yyx0, 2);
  YYFPRINTF (stderr, "\nOption 2,\n");
  yyreportTree (yyx1, 2);
  YYFPRINTF (stderr, "\n");
#endif

  yyerror (YY_("syntax is ambiguous"));
  return yyabort;
}

/** Starting at and including state S1, resolve the location for each of the
 *  previous N1 states that is unresolved.  The first semantic option of a state
 *  is always chosen.  */
static void
yyresolveLocations (yyGLRState* yys1, int yyn1,
		    yyGLRStack *yystackp)
{
  if (0 < yyn1)
    {
      yyresolveLocations (yys1->yypred, yyn1 - 1, yystackp);
      if (!yys1->yyresolved)
	{
	  yySemanticOption *yyoption;
	  yyGLRStackItem yyrhsloc[1 + YYMAXRHS];
	  int yynrhs;
	  int yychar_current;
	  YYSTYPE yylval_current;
	  YYLTYPE yylloc_current;
	  yyoption = yys1->yysemantics.yyfirstVal;
	  YYASSERT (yyoption != NULL);
	  yynrhs = yyrhsLength (yyoption->yyrule);
	  if (yynrhs > 0)
	    {
	      yyGLRState *yys;
	      int yyn;
	      yyresolveLocations (yyoption->yystate, yynrhs,
				  yystackp);
	      for (yys = yyoption->yystate, yyn = yynrhs;
		   yyn > 0;
		   yys = yys->yypred, yyn -= 1)
		yyrhsloc[yyn].yystate.yyloc = yys->yyloc;
	    }
	  else
	    {
	      /* Both yyresolveAction and yyresolveLocations traverse the GSS
		 in reverse rightmost order.  It is only necessary to invoke
		 yyresolveLocations on a subforest for which yyresolveAction
		 would have been invoked next had an ambiguity not been
		 detected.  Thus the location of the previous state (but not
		 necessarily the previous state itself) is guaranteed to be
		 resolved already.  */
	      yyGLRState *yyprevious = yyoption->yystate;
	      yyrhsloc[0].yystate.yyloc = yyprevious->yyloc;
	    }
	  yychar_current = yychar;
	  yylval_current = yylval;
	  yylloc_current = yylloc;
	  yychar = yyoption->yyrawchar;
	  yylval = yyoption->yyval;
	  yylloc = yyoption->yyloc;
	  YYLLOC_DEFAULT ((yys1->yyloc), yyrhsloc, yynrhs);
	  yychar = yychar_current;
	  yylval = yylval_current;
	  yylloc = yylloc_current;
	}
    }
}

/** Resolve the ambiguity represented in state S, perform the indicated
 *  actions, and set the semantic value of S.  If result != yyok, the chain of
 *  semantic options in S has been cleared instead or it has been left
 *  unmodified except that redundant options may have been removed.  Regardless
 *  of whether result = yyok, S has been left with consistent data so that
 *  yydestroyGLRState can be invoked if necessary.  */
static YYRESULTTAG
yyresolveValue (yyGLRState* yys, yyGLRStack* yystackp)
{
  yySemanticOption* yyoptionList = yys->yysemantics.yyfirstVal;
  yySemanticOption* yybest;
  yySemanticOption** yypp;
  yybool yymerge;
  YYSTYPE yysval;
  YYRESULTTAG yyflag;
  YYLTYPE *yylocp = &yys->yyloc;

  yybest = yyoptionList;
  yymerge = yyfalse;
  for (yypp = &yyoptionList->yynext; *yypp != NULL; )
    {
      yySemanticOption* yyp = *yypp;

      if (yyidenticalOptions (yybest, yyp))
	{
	  yymergeOptionSets (yybest, yyp);
	  *yypp = yyp->yynext;
	}
      else
	{
	  switch (yypreference (yybest, yyp))
	    {
	    case 0:
	      yyresolveLocations (yys, 1, yystackp);
	      return yyreportAmbiguity (yybest, yyp);
	      break;
	    case 1:
	      yymerge = yytrue;
	      break;
	    case 2:
	      break;
	    case 3:
	      yybest = yyp;
	      yymerge = yyfalse;
	      break;
	    default:
	      /* This cannot happen so it is not worth a YYASSERT (yyfalse),
		 but some compilers complain if the default case is
		 omitted.  */
	      break;
	    }
	  yypp = &yyp->yynext;
	}
    }

  if (yymerge)
    {
      yySemanticOption* yyp;
      int yyprec = yydprec[yybest->yyrule];
      yyflag = yyresolveAction (yybest, yystackp, &yysval,
				yylocp);
      if (yyflag == yyok)
	for (yyp = yybest->yynext; yyp != NULL; yyp = yyp->yynext)
	  {
	    if (yyprec == yydprec[yyp->yyrule])
	      {
		YYSTYPE yysval_other;
		YYLTYPE yydummy;
		yyflag = yyresolveAction (yyp, yystackp, &yysval_other,
					  &yydummy);
		if (yyflag != yyok)
		  {
		    yydestruct ("Cleanup: discarding incompletely merged value for",
				yystos[yys->yylrState],
				&yysval, yylocp);
		    break;
		  }
		yyuserMerge (yymerger[yyp->yyrule], &yysval, &yysval_other);
	      }
	  }
    }
  else
    yyflag = yyresolveAction (yybest, yystackp, &yysval, yylocp);

  if (yyflag == yyok)
    {
      yys->yyresolved = yytrue;
      yys->yysemantics.yysval = yysval;
    }
  else
    yys->yysemantics.yyfirstVal = NULL;
  return yyflag;
}

static YYRESULTTAG
yyresolveStack (yyGLRStack* yystackp)
{
  if (yystackp->yysplitPoint != NULL)
    {
      yyGLRState* yys;
      int yyn;

      for (yyn = 0, yys = yystackp->yytops.yystates[0];
	   yys != yystackp->yysplitPoint;
	   yys = yys->yypred, yyn += 1)
	continue;
      YYCHK (yyresolveStates (yystackp->yytops.yystates[0], yyn, yystackp
			     ));
    }
  return yyok;
}

static void
yycompressStack (yyGLRStack* yystackp)
{
  yyGLRState* yyp, *yyq, *yyr;

  if (yystackp->yytops.yysize != 1 || yystackp->yysplitPoint == NULL)
    return;

  for (yyp = yystackp->yytops.yystates[0], yyq = yyp->yypred, yyr = NULL;
       yyp != yystackp->yysplitPoint;
       yyr = yyp, yyp = yyq, yyq = yyp->yypred)
    yyp->yypred = yyr;

  yystackp->yyspaceLeft += yystackp->yynextFree - yystackp->yyitems;
  yystackp->yynextFree = ((yyGLRStackItem*) yystackp->yysplitPoint) + 1;
  yystackp->yyspaceLeft -= yystackp->yynextFree - yystackp->yyitems;
  yystackp->yysplitPoint = NULL;
  yystackp->yylastDeleted = NULL;

  while (yyr != NULL)
    {
      yystackp->yynextFree->yystate = *yyr;
      yyr = yyr->yypred;
      yystackp->yynextFree->yystate.yypred = &yystackp->yynextFree[-1].yystate;
      yystackp->yytops.yystates[0] = &yystackp->yynextFree->yystate;
      yystackp->yynextFree += 1;
      yystackp->yyspaceLeft -= 1;
    }
}

static YYRESULTTAG
yyprocessOneStack (yyGLRStack* yystackp, size_t yyk,
		   size_t yyposn)
{
  int yyaction;
  const short int* yyconflicts;
  yyRuleNum yyrule;

  while (yystackp->yytops.yystates[yyk] != NULL)
    {
      yyStateNum yystate = yystackp->yytops.yystates[yyk]->yylrState;
      YYDPRINTF ((stderr, "Stack %lu Entering state %d\n",
		  (unsigned long int) yyk, yystate));

      YYASSERT (yystate != YYFINAL);

      if (yyisDefaultedState (yystate))
	{
	  yyrule = yydefaultAction (yystate);
	  if (yyrule == 0)
	    {
	      YYDPRINTF ((stderr, "Stack %lu dies.\n",
			  (unsigned long int) yyk));
	      yymarkStackDeleted (yystackp, yyk);
	      return yyok;
	    }
	  YYCHK (yyglrReduce (yystackp, yyk, yyrule, yyfalse));
	}
      else
	{
	  yySymbol yytoken;
	  yystackp->yytops.yylookaheadNeeds[yyk] = yytrue;
	  if (yychar == YYEMPTY)
	    {
	      YYDPRINTF ((stderr, "Reading a token: "));
	      yychar = YYLEX;
	    }

	  if (yychar <= YYEOF)
	    {
	      yychar = yytoken = YYEOF;
	      YYDPRINTF ((stderr, "Now at end of input.\n"));
	    }
	  else
	    {
	      yytoken = YYTRANSLATE (yychar);
	      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
	    }

	  yygetLRActions (yystate, yytoken, &yyaction, &yyconflicts);

	  while (*yyconflicts != 0)
	    {
	      size_t yynewStack = yysplitStack (yystackp, yyk);
	      YYDPRINTF ((stderr, "Splitting off stack %lu from %lu.\n",
			  (unsigned long int) yynewStack,
			  (unsigned long int) yyk));
	      YYCHK (yyglrReduce (yystackp, yynewStack,
				  *yyconflicts, yyfalse));
	      YYCHK (yyprocessOneStack (yystackp, yynewStack,
					yyposn));
	      yyconflicts += 1;
	    }

	  if (yyisShiftAction (yyaction))
	    break;
	  else if (yyisErrorAction (yyaction))
	    {
	      YYDPRINTF ((stderr, "Stack %lu dies.\n",
			  (unsigned long int) yyk));
	      yymarkStackDeleted (yystackp, yyk);
	      break;
	    }
	  else
	    YYCHK (yyglrReduce (yystackp, yyk, -yyaction,
				yyfalse));
	}
    }
  return yyok;
}

/*ARGSUSED*/ static void
yyreportSyntaxError (yyGLRStack* yystackp)
{
  if (yystackp->yyerrState == 0)
    {
#if YYERROR_VERBOSE
      int yyn;
      yyn = yypact[yystackp->yytops.yystates[0]->yylrState];
      if (YYPACT_NINF < yyn && yyn <= YYLAST)
	{
	  yySymbol yytoken = YYTRANSLATE (yychar);
	  size_t yysize0 = yytnamerr (NULL, yytokenName (yytoken));
	  size_t yysize = yysize0;
	  size_t yysize1;
	  yybool yysize_overflow = yyfalse;
	  char* yymsg = NULL;
	  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
	  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
	  int yyx;
	  char *yyfmt;
	  char const *yyf;
	  static char const yyunexpected[] = "syntax error, unexpected %s";
	  static char const yyexpecting[] = ", expecting %s";
	  static char const yyor[] = " or %s";
	  char yyformat[sizeof yyunexpected
			+ sizeof yyexpecting - 1
			+ ((YYERROR_VERBOSE_ARGS_MAXIMUM - 2)
			   * (sizeof yyor - 1))];
	  char const *yyprefix = yyexpecting;

	  /* Start YYX at -YYN if negative to avoid negative indexes in
	     YYCHECK.  */
	  int yyxbegin = yyn < 0 ? -yyn : 0;

	  /* Stay within bounds of both yycheck and yytname.  */
	  int yychecklim = YYLAST - yyn + 1;
	  int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
	  int yycount = 1;

	  yyarg[0] = yytokenName (yytoken);
	  yyfmt = yystpcpy (yyformat, yyunexpected);

	  for (yyx = yyxbegin; yyx < yyxend; ++yyx)
	    if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
	      {
		if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
		  {
		    yycount = 1;
		    yysize = yysize0;
		    yyformat[sizeof yyunexpected - 1] = '\0';
		    break;
		  }
		yyarg[yycount++] = yytokenName (yyx);
		yysize1 = yysize + yytnamerr (NULL, yytokenName (yyx));
		yysize_overflow |= yysize1 < yysize;
		yysize = yysize1;
		yyfmt = yystpcpy (yyfmt, yyprefix);
		yyprefix = yyor;
	      }

	  yyf = YY_(yyformat);
	  yysize1 = yysize + strlen (yyf);
	  yysize_overflow |= yysize1 < yysize;
	  yysize = yysize1;

	  if (!yysize_overflow)
	    yymsg = (char *) YYMALLOC (yysize);

	  if (yymsg)
	    {
	      char *yyp = yymsg;
	      int yyi = 0;
	      while ((*yyp = *yyf))
		{
		  if (*yyp == '%' && yyf[1] == 's' && yyi < yycount)
		    {
		      yyp += yytnamerr (yyp, yyarg[yyi++]);
		      yyf += 2;
		    }
		  else
		    {
		      yyp++;
		      yyf++;
		    }
		}
	      yyerror (yymsg);
	      YYFREE (yymsg);
	    }
	  else
	    {
	      yyerror (YY_("syntax error"));
	      yyMemoryExhausted (yystackp);
	    }
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror (YY_("syntax error"));
      yynerrs += 1;
    }
}

/* Recover from a syntax error on *YYSTACKP, assuming that *YYSTACKP->YYTOKENP,
   yylval, and yylloc are the syntactic category, semantic value, and location
   of the lookahead.  */
/*ARGSUSED*/ static void
yyrecoverSyntaxError (yyGLRStack* yystackp)
{
  size_t yyk;
  int yyj;

  if (yystackp->yyerrState == 3)
    /* We just shifted the error token and (perhaps) took some
       reductions.  Skip tokens until we can proceed.  */
    while (YYID (yytrue))
      {
	yySymbol yytoken;
	if (yychar == YYEOF)
	  yyFail (yystackp, NULL);
	if (yychar != YYEMPTY)
	  {
	    /* We throw away the lookahead, but the error range
	       of the shifted error token must take it into account.  */
	    yyGLRState *yys = yystackp->yytops.yystates[0];
	    yyGLRStackItem yyerror_range[3];
	    yyerror_range[1].yystate.yyloc = yys->yyloc;
	    yyerror_range[2].yystate.yyloc = yylloc;
	    YYLLOC_DEFAULT ((yys->yyloc), yyerror_range, 2);
	    yytoken = YYTRANSLATE (yychar);
	    yydestruct ("Error: discarding",
			yytoken, &yylval, &yylloc);
	  }
	YYDPRINTF ((stderr, "Reading a token: "));
	yychar = YYLEX;
	if (yychar <= YYEOF)
	  {
	    yychar = yytoken = YYEOF;
	    YYDPRINTF ((stderr, "Now at end of input.\n"));
	  }
	else
	  {
	    yytoken = YYTRANSLATE (yychar);
	    YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
	  }
	yyj = yypact[yystackp->yytops.yystates[0]->yylrState];
	if (yyis_pact_ninf (yyj))
	  return;
	yyj += yytoken;
	if (yyj < 0 || YYLAST < yyj || yycheck[yyj] != yytoken)
	  {
	    if (yydefact[yystackp->yytops.yystates[0]->yylrState] != 0)
	      return;
	  }
	else if (yytable[yyj] != 0 && ! yyis_table_ninf (yytable[yyj]))
	  return;
      }

  /* Reduce to one stack.  */
  for (yyk = 0; yyk < yystackp->yytops.yysize; yyk += 1)
    if (yystackp->yytops.yystates[yyk] != NULL)
      break;
  if (yyk >= yystackp->yytops.yysize)
    yyFail (yystackp, NULL);
  for (yyk += 1; yyk < yystackp->yytops.yysize; yyk += 1)
    yymarkStackDeleted (yystackp, yyk);
  yyremoveDeletes (yystackp);
  yycompressStack (yystackp);

  /* Now pop stack until we find a state that shifts the error token.  */
  yystackp->yyerrState = 3;
  while (yystackp->yytops.yystates[0] != NULL)
    {
      yyGLRState *yys = yystackp->yytops.yystates[0];
      yyj = yypact[yys->yylrState];
      if (! yyis_pact_ninf (yyj))
	{
	  yyj += YYTERROR;
	  if (0 <= yyj && yyj <= YYLAST && yycheck[yyj] == YYTERROR
	      && yyisShiftAction (yytable[yyj]))
	    {
	      /* Shift the error token having adjusted its location.  */
	      YYLTYPE yyerrloc;
	      yystackp->yyerror_range[2].yystate.yyloc = yylloc;
	      YYLLOC_DEFAULT (yyerrloc, (yystackp->yyerror_range), 2);
	      YY_SYMBOL_PRINT ("Shifting", yystos[yytable[yyj]],
			       &yylval, &yyerrloc);
	      yyglrShift (yystackp, 0, yytable[yyj],
			  yys->yyposn, &yylval, &yyerrloc);
	      yys = yystackp->yytops.yystates[0];
	      break;
	    }
	}
      yystackp->yyerror_range[1].yystate.yyloc = yys->yyloc;
      if (yys->yypred != NULL)
	yydestroyGLRState ("Error: popping", yys);
      yystackp->yytops.yystates[0] = yys->yypred;
      yystackp->yynextFree -= 1;
      yystackp->yyspaceLeft += 1;
    }
  if (yystackp->yytops.yystates[0] == NULL)
    yyFail (yystackp, NULL);
}

#define YYCHK1(YYE)							     \
  do {									     \
    switch (YYE) {							     \
    case yyok:								     \
      break;								     \
    case yyabort:							     \
      goto yyabortlab;							     \
    case yyaccept:							     \
      goto yyacceptlab;							     \
    case yyerr:								     \
      goto yyuser_error;						     \
    default:								     \
      goto yybuglab;							     \
    }									     \
  } while (YYID (0))


/*----------.
| yyparse.  |
`----------*/

int
yyparse (void)
{
  int yyresult;
  yyGLRStack yystack;
  yyGLRStack* const yystackp = &yystack;
  size_t yyposn;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yychar = YYEMPTY;
  yylval = yyval_default;

#if YYLTYPE_IS_TRIVIAL
  yylloc.first_line   = yylloc.last_line   = 1;
  yylloc.first_column = yylloc.last_column = 1;
#endif


  if (! yyinitGLRStack (yystackp, YYINITDEPTH))
    goto yyexhaustedlab;
  switch (YYSETJMP (yystack.yyexception_buffer))
    {
    case 0: break;
    case 1: goto yyabortlab;
    case 2: goto yyexhaustedlab;
    default: goto yybuglab;
    }
  yyglrShift (&yystack, 0, 0, 0, &yylval, &yylloc);
  yyposn = 0;

  while (YYID (yytrue))
    {
      /* For efficiency, we have two loops, the first of which is
	 specialized to deterministic operation (single stack, no
	 potential ambiguity).  */
      /* Standard mode */
      while (YYID (yytrue))
	{
	  yyRuleNum yyrule;
	  int yyaction;
	  const short int* yyconflicts;

	  yyStateNum yystate = yystack.yytops.yystates[0]->yylrState;
	  YYDPRINTF ((stderr, "Entering state %d\n", yystate));
	  if (yystate == YYFINAL)
	    goto yyacceptlab;
	  if (yyisDefaultedState (yystate))
	    {
	      yyrule = yydefaultAction (yystate);
	      if (yyrule == 0)
		{
		  yystack.yyerror_range[1].yystate.yyloc = yylloc;
		  yyreportSyntaxError (&yystack);
		  goto yyuser_error;
		}
	      YYCHK1 (yyglrReduce (&yystack, 0, yyrule, yytrue));
	    }
	  else
	    {
	      yySymbol yytoken;
	      if (yychar == YYEMPTY)
		{
		  YYDPRINTF ((stderr, "Reading a token: "));
		  yychar = YYLEX;
		}

	      if (yychar <= YYEOF)
		{
		  yychar = yytoken = YYEOF;
		  YYDPRINTF ((stderr, "Now at end of input.\n"));
		}
	      else
		{
		  yytoken = YYTRANSLATE (yychar);
		  YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
		}

	      yygetLRActions (yystate, yytoken, &yyaction, &yyconflicts);
	      if (*yyconflicts != 0)
		break;
	      if (yyisShiftAction (yyaction))
		{
		  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);
		  yychar = YYEMPTY;
		  yyposn += 1;
		  yyglrShift (&yystack, 0, yyaction, yyposn, &yylval, &yylloc);
		  if (0 < yystack.yyerrState)
		    yystack.yyerrState -= 1;
		}
	      else if (yyisErrorAction (yyaction))
		{
		  yystack.yyerror_range[1].yystate.yyloc = yylloc;
		  yyreportSyntaxError (&yystack);
		  goto yyuser_error;
		}
	      else
		YYCHK1 (yyglrReduce (&yystack, 0, -yyaction, yytrue));
	    }
	}

      while (YYID (yytrue))
	{
	  yySymbol yytoken_to_shift;
	  size_t yys;

	  for (yys = 0; yys < yystack.yytops.yysize; yys += 1)
	    yystackp->yytops.yylookaheadNeeds[yys] = yychar != YYEMPTY;

	  /* yyprocessOneStack returns one of three things:

	      - An error flag.  If the caller is yyprocessOneStack, it
		immediately returns as well.  When the caller is finally
		yyparse, it jumps to an error label via YYCHK1.

	      - yyok, but yyprocessOneStack has invoked yymarkStackDeleted
		(&yystack, yys), which sets the top state of yys to NULL.  Thus,
		yyparse's following invocation of yyremoveDeletes will remove
		the stack.

	      - yyok, when ready to shift a token.

	     Except in the first case, yyparse will invoke yyremoveDeletes and
	     then shift the next token onto all remaining stacks.  This
	     synchronization of the shift (that is, after all preceding
	     reductions on all stacks) helps prevent double destructor calls
	     on yylval in the event of memory exhaustion.  */

	  for (yys = 0; yys < yystack.yytops.yysize; yys += 1)
	    YYCHK1 (yyprocessOneStack (&yystack, yys, yyposn));
	  yyremoveDeletes (&yystack);
	  if (yystack.yytops.yysize == 0)
	    {
	      yyundeleteLastStack (&yystack);
	      if (yystack.yytops.yysize == 0)
		yyFail (&yystack, YY_("syntax error"));
	      YYCHK1 (yyresolveStack (&yystack));
	      YYDPRINTF ((stderr, "Returning to deterministic operation.\n"));
	      yystack.yyerror_range[1].yystate.yyloc = yylloc;
	      yyreportSyntaxError (&yystack);
	      goto yyuser_error;
	    }

	  /* If any yyglrShift call fails, it will fail after shifting.  Thus,
	     a copy of yylval will already be on stack 0 in the event of a
	     failure in the following loop.  Thus, yychar is set to YYEMPTY
	     before the loop to make sure the user destructor for yylval isn't
	     called twice.  */
	  yytoken_to_shift = YYTRANSLATE (yychar);
	  yychar = YYEMPTY;
	  yyposn += 1;
	  for (yys = 0; yys < yystack.yytops.yysize; yys += 1)
	    {
	      int yyaction;
	      const short int* yyconflicts;
	      yyStateNum yystate = yystack.yytops.yystates[yys]->yylrState;
	      yygetLRActions (yystate, yytoken_to_shift, &yyaction,
			      &yyconflicts);
	      /* Note that yyconflicts were handled by yyprocessOneStack.  */
	      YYDPRINTF ((stderr, "On stack %lu, ", (unsigned long int) yys));
	      YY_SYMBOL_PRINT ("shifting", yytoken_to_shift, &yylval, &yylloc);
	      yyglrShift (&yystack, yys, yyaction, yyposn,
			  &yylval, &yylloc);
	      YYDPRINTF ((stderr, "Stack %lu now in state #%d\n",
			  (unsigned long int) yys,
			  yystack.yytops.yystates[yys]->yylrState));
	    }

	  if (yystack.yytops.yysize == 1)
	    {
	      YYCHK1 (yyresolveStack (&yystack));
	      YYDPRINTF ((stderr, "Returning to deterministic operation.\n"));
	      yycompressStack (&yystack);
	      break;
	    }
	}
      continue;
    yyuser_error:
      yyrecoverSyntaxError (&yystack);
      yyposn = yystack.yytops.yystates[0]->yyposn;
    }

 yyacceptlab:
  yyresult = 0;
  goto yyreturn;

 yybuglab:
  YYASSERT (yyfalse);
  goto yyabortlab;

 yyabortlab:
  yyresult = 1;
  goto yyreturn;

 yyexhaustedlab:
  yyerror (YY_("memory exhausted"));
  yyresult = 2;
  goto yyreturn;

 yyreturn:
  if (yychar != YYEMPTY)
    yydestruct ("Cleanup: discarding lookahead",
		YYTRANSLATE (yychar),
		&yylval, &yylloc);

  /* If the stack is well-formed, pop the stack until it is empty,
     destroying its entries as we go.  But free the stack regardless
     of whether it is well-formed.  */
  if (yystack.yyitems)
    {
      yyGLRState** yystates = yystack.yytops.yystates;
      if (yystates)
	{
	  size_t yysize = yystack.yytops.yysize;
	  size_t yyk;
	  for (yyk = 0; yyk < yysize; yyk += 1)
	    if (yystates[yyk])
	      {
		while (yystates[yyk])
		  {
		    yyGLRState *yys = yystates[yyk];
		    yystack.yyerror_range[1].yystate.yyloc = yys->yyloc;
		    if (yys->yypred != NULL)
		      yydestroyGLRState ("Cleanup: popping", yys);
		    yystates[yyk] = yys->yypred;
		    yystack.yynextFree -= 1;
		    yystack.yyspaceLeft += 1;
		  }
		break;
	      }
	}
      yyfreeGLRStack (&yystack);
    }

  /* Make sure YYID is used.  */
  return YYID (yyresult);
}

/* DEBUGGING ONLY */
#if YYDEBUG
static void yypstack (yyGLRStack* yystackp, size_t yyk)
  __attribute__ ((__unused__));
static void yypdumpstack (yyGLRStack* yystackp) __attribute__ ((__unused__));

static void
yy_yypstack (yyGLRState* yys)
{
  if (yys->yypred)
    {
      yy_yypstack (yys->yypred);
      YYFPRINTF (stderr, " -> ");
    }
  YYFPRINTF (stderr, "%d@%lu", yys->yylrState,
             (unsigned long int) yys->yyposn);
}

static void
yypstates (yyGLRState* yyst)
{
  if (yyst == NULL)
    YYFPRINTF (stderr, "<null>");
  else
    yy_yypstack (yyst);
  YYFPRINTF (stderr, "\n");
}

static void
yypstack (yyGLRStack* yystackp, size_t yyk)
{
  yypstates (yystackp->yytops.yystates[yyk]);
}

#define YYINDEX(YYX)							     \
    ((YYX) == NULL ? -1 : (yyGLRStackItem*) (YYX) - yystackp->yyitems)


static void
yypdumpstack (yyGLRStack* yystackp)
{
  yyGLRStackItem* yyp;
  size_t yyi;
  for (yyp = yystackp->yyitems; yyp < yystackp->yynextFree; yyp += 1)
    {
      YYFPRINTF (stderr, "%3lu. ",
                 (unsigned long int) (yyp - yystackp->yyitems));
      if (*(yybool *) yyp)
	{
	  YYFPRINTF (stderr, "Res: %d, LR State: %d, posn: %lu, pred: %ld",
		     yyp->yystate.yyresolved, yyp->yystate.yylrState,
		     (unsigned long int) yyp->yystate.yyposn,
		     (long int) YYINDEX (yyp->yystate.yypred));
	  if (! yyp->yystate.yyresolved)
	    YYFPRINTF (stderr, ", firstVal: %ld",
		       (long int) YYINDEX (yyp->yystate
                                             .yysemantics.yyfirstVal));
	}
      else
	{
	  YYFPRINTF (stderr, "Option. rule: %d, state: %ld, next: %ld",
		     yyp->yyoption.yyrule - 1,
		     (long int) YYINDEX (yyp->yyoption.yystate),
		     (long int) YYINDEX (yyp->yyoption.yynext));
	}
      YYFPRINTF (stderr, "\n");
    }
  YYFPRINTF (stderr, "Tops:");
  for (yyi = 0; yyi < yystackp->yytops.yysize; yyi += 1)
    YYFPRINTF (stderr, "%lu: %ld; ", (unsigned long int) yyi,
	       (long int) YYINDEX (yystackp->yytops.yystates[yyi]));
  YYFPRINTF (stderr, "\n");
}
#endif



/* Line 2634 of glr.c  */
#line 1951 "g:\\dox163\\doxygen-svn\\src\\\\..\\src\\verilogparser.y"

//------ ------------------------------------------------------------------------------------------------

 Entry* getCurrVerilogEntry(){return current;}
 Entry* getCurrVerilog(){return currentVerilog; }
 QCString getCurrVerilogParsingClass(){return currVerilogClass; }

 void initVerilogParser(Entry* ee,bool pc){
  identVerilog.resize(0);
  currVerilogInst.resize(0);
  currVerilogClass.resize(0);
  currentVerilog=0;
  generateItem=false;
  currentFunctionVerilog=0;
  parseCode=pc;
  briefString.resize(0);
  briefLine=0;
if(pc) return;
  current_rootVerilog=ee;
  lastModule=0;
  current=new Entry;
  VerilogDocGen::initEntry(current);
  current_rootVerilog->name=QCString("XXX"); // dummy name for root
}
/*
 Entry* VerilogDocGen::makeNewEntry(char* name,int sec,int spec,int line,bool add){


 Entry *e=current;
 
 if(parseCode) // should not happend!
 assert(0);

if(add){ // features like 'include xxx or 'define xxx must not be inserted here
 if(lastModule)
    addSubEntry(lastModule,e); 
  else
    addSubEntry(current_rootVerilog,e); 
}
   if(line){
  	  e->bodyLine=line;
      e->startLine=line;
  }else
   {
     e->bodyLine=getVerilogPrevLine();
     e->startLine=getVerilogPrevLine();
   }
   
  e->section=sec;
  e->spec=spec;
  e->name=name;

  current=new Entry;
  VerilogDocGen::initEntry(current);
   return e;
 }
 */
 
 Entry* VerilogDocGen::makeNewEntry(char* name,int sec,int spec,int line,bool add){
 
  Entry *e=current;
  int entLine=getVerilogPrevLine();
  
  if(e->briefLine>0 && e->brief.data())
  {
     briefString=e->brief;
   if(line)
     briefLine=line;
   else
	 briefLine=entLine;
  }

  if(entLine==briefLine && briefString.data())
  {
   e->brief=briefString;
  }
  else
	  briefString.resize(0);

 if(parseCode) // should not happen!
 assert(0);

if(add){ // features like 'include xxx or 'define xxx must not be inserted here
 if(lastModule)
    addSubEntry(lastModule,e); 
  else
    addSubEntry(current_rootVerilog,e); 
}
   if(line){
  	  e->bodyLine=line;
      e->startLine=line;
  }else
   {
     e->bodyLine=entLine;
     e->startLine=entLine;
   }
   
  e->section=sec;
  e->spec=spec;
  e->name=name;
  e->name.stripPrefix("\\");// escaped_identifier ??

  current=new Entry;
  VerilogDocGen::initEntry(current);
  
  return e;
 }

void addSubEntry(Entry* root, Entry* e) {
 if(e==NULL || root==NULL) return;
  root->addSubEntry(e);
 } 




//-------------------------------------------------------------------------

// extracts module/primitive name

void parseModule(){
 
 QCString mod(getVerilogString());
 VhdlDocGen::deleteAllChars(mod,'\n');
 VhdlDocGen::deleteAllChars(mod,' ');
 VhdlDocGen::deleteAllChars(mod,';');
 VhdlDocGen::deleteAllChars(mod,'(');
 
 QRegExp reg("[^_a-zA-Z0-9$]");

 int ll=mod.find(reg);

 if(ll>-1){
//  char c=mod.at(ll);
  QCString val=mod.remove(ll,1);

 }

//if(mod.len>80)

 if(parseCode) {
 //generateVerilogClassOrGlobalLink(mod.data());
 currVerilogClass=mod;
 return;
 }
  currentVerilog->name=mod;
 }//parseModuleName


// extracts module instances [ module_name name,module_name #(...) name]

void parseModuleInst(QCString& first, QCString& sec) {
 
if(currVerilogType==VerilogDocGen::DEFPARAM ) return; // || generateItem 



 VhdlDocGen::deleteAllChars(sec,'(');
 VhdlDocGen::deleteAllChars(sec,'\n');
 VhdlDocGen::deleteAllChars(sec,')');
 VhdlDocGen::deleteAllChars(sec,' ');
 VhdlDocGen::deleteAllChars(sec,',');
 VhdlDocGen::deleteAllChars(sec,';');
 QCString temp=sec;
//while(sec.stripPrefix(" "));

if(sec!=first && (sec.contains("#")==0))
{ 
 //QStringList ql=QStringList::split(first.data(),sec,false);
int oo=sec.findRev(first.data());
if(oo>0) 
 sec=sec.left(oo);
}
else
 sec=getLastLetter();

if(temp.contains("#"))
{ 
 int ii=temp.find("#");
 sec=temp.left(ii);
while(sec.stripPrefix(" "));
}


 if(parseCode){
     VhdlDocGen::deleteAllChars(sec,'\t');
   currVerilogInst=sec;
   return;
  }
 else {
  Entry* pTemp=VerilogDocGen::makeNewEntry(sec.data(),Entry::VARIABLE_SEC,VerilogDocGen::COMPONENT,moduleLine);
  pTemp->type=first;
 if(generateItem) 
  pTemp->args="[generate]";
 
 if(sec==first)return;
if(currentVerilog)
 if(!findExtendsComponent(currentVerilog->extends,sec)){	
  	BaseInfo *bb=new BaseInfo(sec,Private,Normal);
    currentVerilog->extends->append(bb);						
   }
  }
}


void parseListOfPorts() {
 
  QCString type;

 QCString mod(getVerilogString());
 
 VhdlDocGen::deleteAllChars(mod,' ');
 VhdlDocGen::deleteAllChars(mod,'\n');
 VhdlDocGen::deleteAllChars(mod,';');
 VhdlDocGen::deleteAllChars(mod,')');
 VhdlDocGen::deleteAllChars(mod,'(');
  QStringList ql=QStringList::split(",",mod,false);
  QCString name=(QCString)ql[0];
if(!parseCode) {
  for(uint j=0;j<ql.count();j++) {
  QCString name=(QCString)ql[j];
   int i=name.find('[');
  if(i > 0){
    type=mod.right(mod.length()-i);
    name=mod.left(i);
  }
  
 name.prepend(VhdlDocGen::getRecordNumber().data());
 Entry* pTemp=VerilogDocGen::makeNewEntry(name.data(),Entry::VARIABLE_SEC,VerilogDocGen::PORT,c_lloc.first_line);
  pTemp->type=type; 
   }
  return;
 }	

 }//parseListOfPorts



void parseReg(Entry* e){

// "reg"|"integer\real\event"|wire"|"tri"|"tri1"|"supply0"|"wand"|"triand"|"tri0"|"supply1"|"wor"|"trior"|"trireg"

static QCString prevType;
static QCString sigType;
static QRegExp qregg("[ \\[]");
QCString regType;
QCString qcs;

int p,l;
     
QCString mods=getVerilogString();
 if((generateItem || CurrState==VerilogDocGen::STATE_FUNCTION || CurrState==VerilogDocGen::STATE_TASK )) return;

QCString mod(getVerilogString());

int port_type=0;

VhdlDocGen::deleteAllChars(mod,'(');
VhdlDocGen::deleteAllChars(mod,')');
VhdlDocGen::deleteAllChars(mod,';');
VhdlDocGen::deleteAllChars(mod,'\n');
VhdlDocGen::deleteAllChars(mod,',');

if(mod.contains("="))
{
 int i=mod.find("=");
 //qcs=mod.right(mod.length()-i-1);
 VhdlDocGen::deleteAllChars(qcs,' ');
 mod=mod.left(i);
}
  
 mod=mod.simplifyWhiteSpace(); 
  
//while(mod.stripPrefix(" "));
  p=qregg.match(mod,0,&l);

 if(p>0){
  sigType=mod.left(p);
  prevType.resize(0);
  mod.stripPrefix(sigType.data());
  while(mod.stripPrefix(" "));
  if(!mod.stripPrefix("signed ")){
  if(mod.stripPrefix("signed["))
    {mod.prepend("[");sigType.append(" signed ");}
  if(mod.stripPrefix("scalared "))
   sigType.append(" scalared ");
  if(mod.stripPrefix("vectored "))
    sigType.append(" vectored ");
 }
// else
  
}

 
 while(mod.stripPrefix(" "));
 

VhdlDocGen::deleteAllChars(mod,' ');

  int i=mod.find(']');
  int h=mod.find('[');

  if(h==0){
  	prevType+=mod.left(i+1);
  	mod=mod.right(mod.length()-i-1);
  h=mod.find('[');
  }

  if(h > 0){
   if(port_type!=2){ 
	regType=mod.right(mod.length()-h);
    mod=mod.left(h);
   }
   else {
    int ii=mod.find('[');
	if(ii>0){
  	prevType=mod.mid(ii,mod.length());
   	mod=mod.left(ii);
   }
  }
 }

  QStringList ql=QStringList::split(",",mod,false);
 uint len=ql.count() ;
 for(uint j=0;j<len;j++) {
  QCString name=(QCString)ql[j];
  name.prepend(VhdlDocGen::getRecordNumber().data());
  fprintf(stderr," [preLine %d%] ",getVerilogPrevLine());
  Entry* pTemp=VerilogDocGen::makeNewEntry(name.data(),Entry::VARIABLE_SEC,getVerilogPrevLine());
 // pTemp->type=prevType;
 
  if((prevType.isEmpty() && len==1) || (!regType.isEmpty() && len==1))
     pTemp->type=regType;
 else
  pTemp->args=regType;
    
  pTemp->args+=sigType+prevType; 
 // if(!prevType.isEmpty() && !regType.isEmpty())
 // pTemp->args+=prevType; 

 pTemp->args+=qcs;
  pTemp->spec=VerilogDocGen::SIGNAL;//currVerilogType;
  
  regType=prevType;
  if(getVerilogToken()==SEM_TOK)
   { prevType="";sigType="";}
  
  }
} // parsReg


// extracts function/task prototype 

void parseFunction(Entry* curF)
{
  QCString mod(getVerilogString());
  QCString type; 
 
 VhdlDocGen::deleteAllChars(mod,'\n');
 VhdlDocGen::deleteAllChars(mod,';');
  while(mod.stripPrefix(" "));
 
  int i=mod.findRev(']');
  if(i > 0){
    type=mod.left(i+1);
   	mod=mod.right(mod.length()-i-1);
  }
  else {
  QStringList ql=QStringList::split(" ",mod,false);
  if(ql.count()>1) {
    type=(QCString)ql[0];
	mod=(QCString)ql[1];
  }
  }
 
 VhdlDocGen::deleteAllChars(mod,' ');
 VhdlDocGen::deleteAllChars(type,' ');

  curF->name+=mod;
  if(type.stripPrefix("automatic"))
   curF->type+="automatic "+type; 
   else
  curF->type+=type;
}
							   

// extract (local)parameter declaration 

void parseParam(Entry* e)
{
   QCString prevType,qcs;
  QRegExp regg("[ \t]");

  if((CurrState==VerilogDocGen::STATE_FUNCTION || CurrState==VerilogDocGen::STATE_TASK  || generateItem)) return;
  
  QCString mod(getVerilogString());
  VhdlDocGen::deleteAllChars(mod,';');
  VhdlDocGen::deleteAllChars(mod,'\n');
  VhdlDocGen::deleteAllChars(mod,',');

  mod=mod.simplifyWhiteSpace();

  if(mod.stripPrefix("#"))
  {
  if(mod.at(mod.length()-1)==')') 
    mod.remove(mod.length()-1,1);
  
  while(mod.stripPrefix(" "));
   mod.stripPrefix("(");
  }

if(mod.contains("="))
{
 int i=mod.find("=");
 qcs=mod.right(mod.length()-i-1);
 while(qcs.stripPrefix(" "));
 mod=mod.left(i);
}

 while(mod.stripPrefix(" "));

 int j=mod.find(regg,0);
			 if(j>0){
			 bool bb=false;
			 QCString sem=mod.mid(0,j);
			 if(sem=="integer"){ prevType=sem;bb=true;}
			 else if(sem=="real"){prevType=sem;bb=true;}
			 else if(sem=="realtime"){prevType=sem;bb=true;}
			 else if(sem=="time"){prevType=sem;bb=true;}
			 else if(sem=="signed"){prevType=sem;bb=true;}
			 else if(sem=="wire"){prevType=sem;bb=true;}
			 if(bb)
			 mod.stripPrefix(sem.data());
			 }

 
 while(mod.stripPrefix(" "));
  
  int i=mod.find(']');
  if(i > 0){
    prevType+=" ";
	prevType+=mod.left(i+1);
   	mod=mod.right(mod.length()-i-1);
  }
 

  VhdlDocGen::deleteAllChars(mod,' ');


// each local member must get its unique number, because in Verilog
// two local variables can have the same identifier.
// ( input Q, reg Q)
  mod.prepend(VhdlDocGen::getRecordNumber().data());
 
  Entry* pTemp=VerilogDocGen::makeNewEntry(mod.data(),Entry::VARIABLE_SEC,VerilogDocGen::PARAMETER,getVerilogPrevLine());
  //pTemp->fileName+=getVerilogParsingFile();
  pTemp->type=prevType;
  pTemp->args=qcs;
  
  
}

// extract  input/output ports

void parsePortDir(Entry* e,int port)
{

static QCString prevType;
static QCString type; 

QCString mod(getVerilogString());
 VhdlDocGen::deleteAllChars(mod,'\n');
 VhdlDocGen::deleteAllChars(mod,')');
 VhdlDocGen::deleteAllChars(mod,'(');
 VhdlDocGen::deleteAllChars(mod,';');
 VhdlDocGen::deleteAllChars(mod,',');

 while(mod.stripPrefix(" "));


if(mod.stripPrefix("input"))
 prevType="";
else if(mod.stripPrefix("output"))
  prevType=""; 
else if(mod.stripPrefix("inout"))
  prevType="";
else {
             QRegExp regg("[ \\[]");
  			 int j=mod.find(regg,0);
			 if(j>0){
			 type=mod.mid(0,j);
			 mod.stripPrefix(type.data());
			 }
	 } 


while(mod.stripPrefix(" "));
 
QRegExp regg("[ \t]");
 int j=mod.find(regg,0);
			 if(j>0){
			 bool bb=false;
			 QCString sem=mod.mid(0,j);
			 if(sem=="integer"){ prevType=sem;bb=true;}
			 else if(sem=="real"){prevType=sem;bb=true;}
			 else if(sem=="realtime"){prevType=sem;bb=true;}
			 else if(sem=="time"){prevType=sem;bb=true;}
			 else if(sem=="signed"){prevType=sem;bb=true;}
			 else if(sem=="wire"){prevType=sem;bb=true;}
			 if(bb)
			 mod.stripPrefix(sem.data());
			 }

while(mod.stripPrefix(" "));
  
  int i=mod.findRev(']');
  if(i > 0){
    prevType+=" ";
	prevType+=mod.left(i+1);
   	mod=mod.right(mod.length()-i-1);
  }
  else{ 
  int j=mod.find(regg,0);
   if(j>0){
    QCString sem=mod.mid(0,j);
	if(sem=="reg"){		
     mod=mod.right(mod.length()-j-1);
     prevType+=" reg";
     }
    }
   }
  
  VhdlDocGen::deleteAllChars(mod,' ');
  mod.prepend(VhdlDocGen::getRecordNumber().data());
  if(CurrState==VerilogDocGen::STATE_MODULE){  
  Entry* pTemp=VerilogDocGen::makeNewEntry(mod.data(),Entry::VARIABLE_SEC,0,c_lloc.first_line);
  pTemp->type=prevType;
  pTemp->args=type;
   assert(currVerilogType!=0);
  pTemp->spec=currVerilogType;
//   VerilogDocGen::addSubEntry(currentVerilog,pTemp);
  }
  else
  { 
   if(CurrState==VerilogDocGen::STATE_FUNCTION){
      Argument *arg=new Argument;
      
      switch(currVerilogType) {
      
      case VerilogDocGen::INPUT: arg->type="Input";break;
      case VerilogDocGen::INOUT:arg->type="Inout";break;         
      case VerilogDocGen::OUTPUT:arg->type="Output";break;         
      default:break;
      }                           
        arg->defval=prevType;                         
        arg->name=mod;//(QCString)ql[j];	
	  currentFunctionVerilog->argList->append(arg);
	  VerilogDocGen::adjustMemberName(mod); 
	  currentFunctionVerilog->args+=mod;//(QCString)ql[j]+",";
  } 
 }
 

  if(getVerilogToken()==SEM_TOK)//end of line
  {prevType="";type="";}
}

void parseAlways(bool bBody)
{

if(currVerilogType!=VerilogDocGen::ALWAYS || generateItem) return ;

QRegExp regg1("[ \t]or[ \t]");

QCString mod(getVerilogString());
QCString type; 
QStringList ql;
bool sem=false;

 VhdlDocGen::deleteAllChars(mod,'@');
 VhdlDocGen::deleteAllChars(mod,'\n');
 VhdlDocGen::deleteAllChars(mod,'(');
 VhdlDocGen::deleteAllChars(mod,')');
 VhdlDocGen::deleteAllChars(mod,';'); 

if(mod.contains(","))
  ql=QStringList::split(",",mod,false);
 else
  ql=QStringList::split(regg1,mod,false);
 

 if(!parseCode) {
 currentFunctionVerilog=VerilogDocGen::makeNewEntry(VhdlDocGen::getProcessNumber().data(),Entry::FUNCTION_SEC,VerilogDocGen::ALWAYS);
  currentFunctionVerilog->stat=TRUE;
  currentFunctionVerilog->fileName=getVerilogParsingFile();
  if(!bBody)
  for(uint j=0;j<ql.count();j++) {
  QCString ll=(QCString)ql[j];
  if(ll=="or" || ll=="and" || ll=="xor") continue; 
  if(sem)
	  currentFunctionVerilog->args+=',';
	  Argument *arg=new Argument;
      arg->name=ll.simplifyWhiteSpace();	
	  currentFunctionVerilog->argList->append(arg);
      currentFunctionVerilog->args+=ll; 
      sem = true;
 }
 return;
}


}//parseAlways



 // sets the current parsing module (only for parsing inline_sources)             
 void VerilogDocGen::setCurrVerilogClass(QCString& cl){ currVerilogClass = cl;}
   
 //-------------------------------------------------------------------------------------------  
           
 int MyParserConv::parse(MyParserConv* conv){
  myconv=conv;
  assert(myconv);
  return c_parse();
 } 
        
int c_lex(void){
 return myconv->doLex(); 
}


void c_error(const char * err){
   if(err){// && !parseCode){
  fprintf(stderr,"\n\nerror  at line [%d]... : in file [%s]\n\n",c_lloc.first_line,getVerilogParsingFile());
  vbufreset();
//  exit(0);
  }
  
   } 
    
int getVerilogToken(){return c_char;}
 //------------------------------------------------------------------------------------------------  

// writes a digit to the source

void writeDigit()
 {
   if(parseCode) {
     writePrevVerilogWords(identVerilog);
	 writeVerilogFont("vhdllogic",identVerilog.data());
	 printVerilogBuffer(true);
	 }
	identVerilog.resize(0);

 }// writeDigit

// prints and links the parsed identifiers  

void parseString(){				
					 				
					if(parseCode ) { 
					 //   printVerilogStringList();
						 identVerilog=identVerilog.stripWhiteSpace();
				   	  writePrevVerilogWords(identVerilog);
						 bool b=false;
					 
					 if(currVerilogType==VerilogDocGen::DEFPARAM){
				       QCString s(getVerilogString());
                       if(s.contains(".")==0)
                           b=generateVerilogMemLink(currVerilogClass,identVerilog,VerilogDocGen::COMPONENT);
				       else if(s.contains("="))
                           b=generateVerilogMemLink(currVerilogClass,identVerilog,-1);
                       else
				         b=generateVerilogMemLink(currVerilogInst,identVerilog,-1);	       
				     }
					 else if(currVerilogType==VerilogDocGen::COMPONENT){
					    QCString tt(getVerilogString());
					    if(tt.contains('('))
					     b=generateVerilogMemLink(currVerilogClass,identVerilog,VerilogDocGen::PORT);
				        else if(!b)   
				         b=generateVerilogMemLink(currVerilogInst,identVerilog,VerilogDocGen::PORT);
				        if(!b)   
				         b=generateVerilogMemLink(currVerilogClass,identVerilog,-1);    
					   }
				    /*
				      else if(currVerilogType==VerilogDocGen::NETTYPE){
                       QCString tt(getVerilogString());
                      if(tt.contains("["))
                         b=generateVerilogMemLink(currVerilogClass,identVerilog,-1);
                       else{
                      	 codifyVerilogString(identVerilog.data(),"vhdlcharacter");
				         b=true;
				          }
                      	 }
				      */
				      else if(currVerilogType==VerilogDocGen::PORT)
                        b=generateVerilogMemLink(currVerilogClass,identVerilog,VerilogDocGen::PORT);
				     else if(currVerilogType==VerilogDocGen::PARAMETER)
                        b=generateVerilogMemLink(currVerilogClass,identVerilog,VerilogDocGen::PARAMETER);
				     else if(currVerilogType==VerilogDocGen::SIGNAL)
                        b=generateVerilogMemLink(currVerilogClass,identVerilog,VerilogDocGen::SIGNAL);
				     else if(currVerilogType==VerilogDocGen::INPUT)
                        b=generateVerilogMemLink(currVerilogClass,identVerilog,VerilogDocGen::INPUT);				       
         		     else if(currVerilogType==VerilogDocGen::OUTPUT)
                        b=generateVerilogMemLink(currVerilogClass,identVerilog,VerilogDocGen::OUTPUT);
				     else if(currVerilogType==VerilogDocGen::INOUT)
                        b=generateVerilogMemLink(currVerilogClass,identVerilog,VerilogDocGen::INOUT);
				   
				     else if(currVerilogType==VerilogDocGen::ALWAYS)
                        b=generateVerilogMemLink(currVerilogClass,identVerilog,VerilogDocGen::ALWAYS);
						
				     if(!b){
					   b =  generateVerilogMemLink(currVerilogClass,identVerilog,-1); 
					   if(!b && getClass(identVerilog.data()))
                       b=generateVerilogClassOrGlobalLink(identVerilog.data());
					  if(!b){
					  const QCString*  col=VerilogDocGen::findKeyWord(identVerilog.data());
					  if(col) 
					  codifyVerilogString(identVerilog.data(),col->data());
					  else					  
					  codifyVerilogString(identVerilog.data(),"vhdlchar");
					   }   
					 }
					   printVerilogBuffer(true);
					  }
				    prevName=identVerilog;
				    identVerilog.resize(0);
				 
}// parseString

// inits the parser

 //---------------------------------------------------------------------------------------------------  


// do not include the same class twice 

bool findExtendsComponent(QList<BaseInfo> *extend,QCString& compName)
{
 for(uint j=0;j<extend->count();j++){
  BaseInfo *bb=extend->at(j);
  if(bb->name==compName)
   return true;
 }
 return false;
}// findExtendsComponent


