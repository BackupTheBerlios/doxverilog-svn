
/* A Bison parser, made by GNU Bison 2.4.1.  */

/* Skeleton implementation for Bison GLR parsers in C
   
      Copyright (C) 2002, 2003, 2004, 2005, 2006 Free Software Foundation, Inc.
   
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.
   
   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C GLR parser skeleton written by Paul Hilfinger.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.4.1"

/* Skeleton name.  */
#define YYSKELETON_NAME "glr.c"

/* Pure parsers.  */
#define YYPURE 0

/* Using locations.  */
#define YYLSP_NEEDED 1


/* Substitute the variable and function names.  */
#define yyparse c_parse
#define yylex   c_lex
#define yyerror c_error
#define yylval  c_lval
#define yychar  c_char
#define yydebug c_debug
#define yynerrs c_nerrs
#define yylloc  c_lloc

/* Copy the first part of user declarations.  */

/* Line 172 of glr.c  */
#line 33 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"


#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "verilogdocgen.h"
#include "membergroup.h"
//#include "verilogparser.hpp"
#include "vhdldocgen.h"
#include "doxygen.h"
#include "searchindex.h"
#include "verilogscanner.h"
#include "commentscan.h"

#define YYMAXDEPTH 15000

static MyParserConv* myconv=0;

static int CurrState;
static bool generateItem=false;
static int          currVerilogType;
static Entry*       current=0;
static Entry*		current_rootVerilog  ;
static Entry*		currentVerilog=0  ;
static Entry*       currentFunctionVerilog=0;
static Entry*       lastModule=0;

static Entry        prevDocEntryVerilog;

static bool         parseCode=FALSE; 

static QCString     currVerilogClass;
static QCString     identVerilog; // last written word
static QCString     currVerilogInst;
static QCString     prevName; // stores the last parsed word
static QCString     moduleParamName; // stores name of  module xxx#(paramList) xxx ();
static int          moduleLine=0;

static int briefLine;
static QCString briefString;

int c_lex (void);
void c_error (char const *);


// functions for  verilog parser ---------------------

static void parseString();
static void writeDigit();
static void initVerilogParser();
static void parseModule();
static void parseFunction(Entry* e);
static void parseReg(Entry* e);
static void parsePortDir(Entry* e,int type);
static void parseParam(Entry* e);
static void parseListOfPorts();
static void parseAlways(bool b=false);
static void parseModuleInst(QCString& first,QCString& sec);


bool findExtendsComponent(QList<BaseInfo> *extend,QCString& compName);
void addSubEntry(Entry* root, Entry* e);


/* Line 172 of glr.c  */
#line 132 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.cpp"



#include "verilogparser.hpp"

/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 1
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* Enabling the token table.  */
#ifndef YYTOKEN_TABLE
# define YYTOKEN_TABLE 0
#endif

/* Default (constant) value used for initialization for null
   right-hand sides.  Unlike the standard yacc.c template,
   here we set the default value of $$ to a zeroed-out value.
   Since the default value is undefined, this behavior is
   technically correct.  */
static YYSTYPE yyval_default;

/* Copy the second part of user declarations.  */


/* Line 243 of glr.c  */
#line 167 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.cpp"

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#ifndef YY_
# if YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(e) ((void) (e))
#else
# define YYUSE(e) /* empty */
#endif

/* Identity function, used to suppress warnings about constant conditions.  */
#ifndef lint
# define YYID(n) (n)
#else
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static int
YYID (int i)
#else
static int
YYID (i)
    int i;
#endif
{
  return i;
}
#endif

#ifndef YYFREE
# define YYFREE free
#endif
#ifndef YYMALLOC
# define YYMALLOC malloc
#endif
#ifndef YYREALLOC
# define YYREALLOC realloc
#endif

#define YYSIZEMAX ((size_t) -1)

#ifdef __cplusplus
   typedef bool yybool;
#else
   typedef unsigned char yybool;
#endif
#define yytrue 1
#define yyfalse 0

#ifndef YYSETJMP
# include <setjmp.h>
# define YYJMP_BUF jmp_buf
# define YYSETJMP(env) setjmp (env)
# define YYLONGJMP(env, val) longjmp (env, val)
#endif

/*-----------------.
| GCC extensions.  |
`-----------------*/

#ifndef __attribute__
/* This feature is available in gcc versions 2.5 and later.  */
# if (! defined __GNUC__ || __GNUC__ < 2 \
      || (__GNUC__ == 2 && __GNUC_MINOR__ < 5) || __STRICT_ANSI__)
#  define __attribute__(Spec) /* empty */
# endif
#endif

#define YYOPTIONAL_LOC(Name) Name

#ifndef YYASSERT
# define YYASSERT(condition) ((void) ((condition) || (abort (), 0)))
#endif

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  14
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   5013

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  136
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  320
/* YYNRULES -- Number of rules.  */
#define YYNRULES  803
/* YYNRULES -- Number of states.  */
#define YYNSTATES  1755
/* YYMAXRHS -- Maximum number of symbols on right-hand side of rule.  */
#define YYMAXRHS 25
/* YYMAXLEFT -- Maximum number of symbols to the left of a handle
   accessed by $0, $-1, etc., in any rule.  */
#define YYMAXLEFT 0

/* YYTRANSLATE(X) -- Bison symbol number corresponding to X.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   390

#define YYTRANSLATE(YYX)						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const unsigned char yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const unsigned short int yyprhs[] =
{
       0,     0,     3,     5,     6,     9,    12,    14,    16,    18,
      20,    22,    25,    27,    29,    35,    39,    46,    52,    58,
      60,    64,    68,    70,    73,    77,    81,    85,    89,    93,
      95,    98,   101,   104,   106,   109,   113,   114,   117,   119,
     121,   123,   129,   134,   141,   148,   155,   162,   169,   177,
     185,   193,   195,   197,   199,   202,   203,   206,   208,   211,
     212,   218,   223,   224,   229,   230,   237,   238,   240,   242,
     245,   246,   251,   255,   259,   261,   265,   267,   272,   278,
     280,   284,   288,   290,   292,   294,   299,   304,   307,   310,
     313,   316,   318,   321,   325,   328,   331,   334,   337,   340,
     343,   346,   349,   352,   355,   358,   361,   364,   366,   368,
     370,   372,   374,   376,   378,   380,   382,   384,   385,   390,
     394,   395,   401,   402,   408,   409,   414,   415,   421,   422,
     429,   433,   434,   439,   440,   446,   447,   454,   455,   461,
     462,   468,   472,   477,   481,   485,   486,   492,   493,   500,
     506,   513,   514,   520,   521,   528,   534,   541,   542,   547,
     548,   552,   553,   556,   561,   565,   571,   576,   578,   580,
     582,   584,   586,   588,   591,   594,   597,   599,   603,   607,
     611,   615,   619,   623,   630,   637,   645,   653,   662,   670,
     678,   686,   695,   703,   707,   708,   710,   712,   714,   718,
     722,   723,   728,   732,   738,   743,   747,   748,   753,   757,
     759,   762,   768,   774,   778,   782,   786,   790,   795,   798,
     800,   804,   806,   808,   810,   812,   814,   818,   821,   826,
     828,   832,   834,   838,   840,   842,   846,   848,   852,   855,
     857,   859,   863,   865,   869,   873,   877,   881,   887,   893,
     903,   916,   928,   932,   934,   935,   937,   939,   941,   943,
     945,   946,   948,   949,   951,   953,   956,   958,   961,   964,
     968,   976,   983,   994,  1004,  1008,  1010,  1013,  1015,  1018,
    1020,  1022,  1025,  1027,  1031,  1033,  1039,  1043,  1048,  1055,
    1063,  1064,  1066,  1067,  1069,  1070,  1072,  1076,  1080,  1084,
    1088,  1090,  1094,  1099,  1105,  1109,  1113,  1120,  1128,  1134,
    1138,  1140,  1142,  1144,  1146,  1149,  1152,  1155,  1158,  1161,
    1164,  1167,  1170,  1175,  1181,  1185,  1187,  1191,  1193,  1196,
    1201,  1205,  1210,  1216,  1220,  1224,  1226,  1230,  1232,  1236,
    1243,  1249,  1254,  1258,  1261,  1263,  1265,  1267,  1268,  1269,
    1276,  1277,  1282,  1284,  1288,  1293,  1299,  1301,  1303,  1305,
    1309,  1311,  1313,  1317,  1323,  1328,  1333,  1338,  1342,  1345,
    1347,  1349,  1351,  1355,  1358,  1360,  1364,  1367,  1368,  1373,
    1377,  1379,  1382,  1384,  1386,  1388,  1390,  1392,  1394,  1396,
    1402,  1410,  1417,  1419,  1422,  1426,  1430,  1433,  1447,  1451,
    1457,  1461,  1465,  1471,  1482,  1493,  1495,  1497,  1501,  1505,
    1507,  1511,  1515,  1517,  1520,  1523,  1526,  1529,  1532,  1536,
    1541,  1548,  1552,  1556,  1560,  1564,  1568,  1570,  1574,  1578,
    1583,  1588,  1590,  1593,  1598,  1605,  1611,  1615,  1617,  1619,
    1621,  1624,  1627,  1631,  1636,  1641,  1643,  1645,  1647,  1649,
    1651,  1653,  1655,  1657,  1663,  1668,  1672,  1674,  1678,  1685,
    1691,  1693,  1699,  1704,  1708,  1713,  1715,  1719,  1723,  1726,
    1730,  1731,  1735,  1739,  1744,  1748,  1752,  1755,  1761,  1766,
    1771,  1774,  1777,  1780,  1783,  1786,  1790,  1792,  1795,  1799,
    1806,  1812,  1817,  1820,  1822,  1825,  1829,  1833,  1840,  1846,
    1849,  1854,  1858,  1859,  1864,  1870,  1875,  1878,  1882,  1886,
    1889,  1891,  1894,  1898,  1901,  1904,  1907,  1910,  1913,  1917,
    1920,  1924,  1927,  1930,  1933,  1936,  1938,  1940,  1944,  1947,
    1950,  1953,  1956,  1959,  1962,  1964,  1967,  1970,  1975,  1977,
    1979,  1980,  1987,  1991,  1994,  1999,  2002,  2007,  2011,  2016,
    2018,  2021,  2024,  2026,  2030,  2034,  2037,  2043,  2049,  2057,
    2065,  2070,  2076,  2084,  2089,  2096,  2103,  2110,  2114,  2121,
    2125,  2127,  2130,  2134,  2138,  2141,  2144,  2150,  2156,  2166,
    2169,  2175,  2181,  2191,  2197,  2203,  2206,  2208,  2212,  2215,
    2217,  2221,  2224,  2228,  2230,  2233,  2235,  2237,  2239,  2241,
    2243,  2247,  2251,  2255,  2259,  2263,  2267,  2270,  2273,  2276,
    2280,  2287,  2293,  2300,  2302,  2306,  2308,  2312,  2316,  2318,
    2323,  2328,  2330,  2334,  2336,  2342,  2350,  2364,  2390,  2392,
    2396,  2400,  2407,  2413,  2424,  2434,  2440,  2448,  2450,  2452,
    2454,  2460,  2466,  2469,  2471,  2473,  2475,  2477,  2479,  2481,
    2483,  2485,  2487,  2489,  2491,  2493,  2495,  2507,  2517,  2529,
    2539,  2553,  2565,  2577,  2587,  2592,  2604,  2614,  2618,  2632,
    2644,  2656,  2666,  2678,  2688,  2700,  2710,  2722,  2736,  2748,
    2756,  2764,  2774,  2776,  2780,  2782,  2784,  2786,  2788,  2793,
    2796,  2800,  2802,  2804,  2806,  2808,  2810,  2815,  2818,  2821,
    2824,  2827,  2829,  2833,  2835,  2837,  2841,  2848,  2852,  2854,
    2858,  2863,  2868,  2872,  2874,  2876,  2880,  2885,  2889,  2894,
    2896,  2900,  2905,  2910,  2912,  2916,  2919,  2924,  2930,  2932,
    2935,  2939,  2941,  2943,  2945,  2947,  2950,  2954,  2956,  2960,
    2965,  2971,  2973,  2979,  2981,  2983,  2985,  2987,  2989,  2991,
    2993,  2996,  2998,  3000,  3003,  3005,  3007,  3009,  3011,  3014,
    3018,  3021,  3025,  3027,  3029,  3031,  3033,  3036,  3039,  3042,
    3045,  3047,  3049,  3051,  3053,  3055,  3057,  3059,  3061,  3064,
    3068,  3072,  3077,  3080,  3082,  3084,  3086,  3088,  3090,  3092,
    3095,  3099,  3103,  3104,  3108,  3112,  3114,  3118,  3122,  3124,
    3126,  3130,  3132,  3134
};

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
static const short int yyrhs[] =
{
     137,     0,    -1,   138,    -1,    -1,   139,   156,    -1,   138,
     156,    -1,   180,    -1,   141,    -1,   144,    -1,   142,    -1,
     145,    -1,   109,    10,    -1,   453,    -1,     7,    -1,   112,
      23,   143,    24,    10,    -1,   112,     1,    10,    -1,   110,
     146,    10,   147,   148,   111,    -1,   110,   146,    10,   147,
     111,    -1,   110,   146,    10,     1,   111,    -1,   454,    -1,
     127,   150,    10,    -1,   127,     1,    10,    -1,   149,    -1,
     148,   149,    -1,    82,   153,    10,    -1,   151,   153,    10,
      -1,   151,   154,    10,    -1,   152,   153,    10,    -1,   152,
     154,    10,    -1,   453,    -1,   150,   453,    -1,   117,   453,
      -1,   118,   453,    -1,   116,    -1,   116,   150,    -1,   115,
     453,   155,    -1,    -1,    15,   110,    -1,   157,    -1,   310,
      -1,   140,    -1,   450,   160,    10,   163,   161,    -1,   450,
     160,    10,   161,    -1,   450,   160,   164,    10,   163,   161,
      -1,   450,   160,   170,    10,   163,   161,    -1,   450,   160,
     172,    10,   163,   161,    -1,   450,   160,   172,    10,     1,
     161,    -1,   450,   160,   170,    10,     1,   161,    -1,   450,
     160,    16,    17,    10,   163,   161,    -1,   450,   160,   164,
     170,    10,   163,   161,    -1,   450,   160,   164,   172,    10,
     163,   161,    -1,   454,    -1,    52,    -1,    54,    -1,   159,
     158,    -1,    -1,   162,    53,    -1,   179,    -1,   163,   179,
      -1,    -1,    29,    16,   165,   166,    17,    -1,    29,    16,
       1,    17,    -1,    -1,    38,   167,   169,   241,    -1,    -1,
     166,    98,    38,   168,   169,   241,    -1,    -1,   244,    -1,
     446,    -1,   446,   244,    -1,    -1,    16,   171,   173,    17,
      -1,    16,     1,    17,    -1,    16,   258,    17,    -1,   174,
      -1,   173,    98,   174,    -1,   175,    -1,    11,   175,    16,
      17,    -1,    11,   175,    16,   175,    17,    -1,   177,    -1,
      37,   176,    36,    -1,   176,    98,   177,    -1,   177,    -1,
     454,    -1,     8,    -1,   454,    18,   438,    19,    -1,   454,
      18,   434,    19,    -1,   450,   197,    -1,   450,   200,    -1,
     450,   203,    -1,     1,    10,    -1,   180,    -1,   178,    10,
      -1,   178,     1,    10,    -1,   450,   298,    -1,   450,   184,
      -1,   450,   190,    -1,   450,   378,    -1,   450,   196,    -1,
     450,   181,    -1,   450,   182,    -1,   450,   336,    -1,   450,
     272,    -1,   450,   332,    -1,   450,   279,    -1,   450,   339,
      -1,   450,   340,    -1,   213,    -1,   219,    -1,   212,    -1,
     216,    -1,   220,    -1,   217,    -1,   210,    -1,   211,    -1,
     253,    -1,   245,    -1,    -1,    51,   183,   235,    10,    -1,
      51,     1,    10,    -1,    -1,   103,   244,   185,   235,    10,
      -1,    -1,   103,   267,   186,   235,    10,    -1,    -1,   103,
     187,   235,    10,    -1,    -1,   103,   446,   188,   235,    10,
      -1,    -1,   103,   446,   244,   189,   235,    10,    -1,   103,
       1,    10,    -1,    -1,    38,   191,   235,    10,    -1,    -1,
      38,   267,   192,   235,    10,    -1,    -1,    38,   446,   244,
     193,   235,    10,    -1,    -1,    38,   244,   194,   235,    10,
      -1,    -1,    38,   446,   195,   235,    10,    -1,    38,     1,
      10,    -1,    87,   244,   238,    10,    -1,    87,   238,    10,
      -1,    87,     1,    10,    -1,    -1,    40,   249,   262,   198,
     454,    -1,    -1,    40,   209,   249,   262,   199,   454,    -1,
     197,    98,   249,   262,   454,    -1,   197,    98,   209,   249,
     262,   454,    -1,    -1,   101,   249,   262,   201,   454,    -1,
      -1,   101,   209,   249,   262,   202,   454,    -1,   200,    98,
     249,   262,   454,    -1,   200,    98,   209,   249,   262,   454,
      -1,    -1,    39,   208,   204,   454,    -1,    -1,    39,   205,
     454,    -1,    -1,    39,   206,    -1,   203,    98,    39,   338,
      -1,   203,    98,   454,    -1,   203,    98,    39,   208,   454,
      -1,   203,    98,    39,   454,    -1,    47,    -1,   104,    -1,
     209,    -1,   244,    -1,   446,    -1,    46,    -1,   208,   102,
      -1,   208,   244,    -1,   208,   207,    -1,     3,    -1,    49,
     229,    10,    -1,    49,     1,    10,    -1,   108,   232,    10,
      -1,   108,     1,    10,    -1,   104,   239,    10,    -1,   104,
       1,    10,    -1,     3,   214,   249,   262,   234,    10,    -1,
       3,   214,   249,   262,   233,    10,    -1,     3,   214,   249,
     262,   225,   233,    10,    -1,     3,   214,   249,   262,   225,
     234,    10,    -1,     3,   223,   214,   249,   262,   225,   233,
      10,    -1,     3,   223,   214,   249,   262,   233,    10,    -1,
       3,   223,   214,   249,   262,   234,    10,    -1,     3,   224,
     214,   249,   262,   234,    10,    -1,     3,   224,   214,   249,
     262,   225,   234,    10,    -1,     3,   224,   214,   249,   262,
     233,    10,    -1,     3,     1,    10,    -1,    -1,   215,    -1,
      44,    -1,    45,    -1,    48,   239,    10,    -1,    48,     1,
      10,    -1,    -1,   126,   218,   239,    10,    -1,   126,     1,
      10,    -1,    46,   249,   244,   239,    10,    -1,    46,   249,
     239,    10,    -1,    46,     1,    10,    -1,    -1,    47,   221,
     239,    10,    -1,    47,     1,    10,    -1,   243,    -1,   222,
     243,    -1,    16,     4,    98,     5,    17,    -1,    16,     5,
      98,     4,    17,    -1,    16,     1,    17,    -1,    16,    41,
      17,    -1,    16,    42,    17,    -1,    16,    43,    17,    -1,
      29,    16,   226,    17,    -1,    29,   228,    -1,   228,    -1,
     226,    98,   228,    -1,   225,    -1,   439,    -1,   230,    -1,
     231,    -1,   454,    -1,   230,    98,   454,    -1,   454,   222,
      -1,   231,    98,   454,   222,    -1,   454,    -1,   232,    98,
     454,    -1,   240,    -1,   233,    98,   240,    -1,   229,    -1,
     241,    -1,   235,    98,   241,    -1,   454,    -1,   454,    22,
     438,    -1,   454,   222,    -1,   236,    -1,   242,    -1,   238,
      98,   242,    -1,   237,    -1,   239,    98,   237,    -1,   454,
      22,   438,    -1,   453,    22,   438,    -1,   454,    22,   439,
      -1,    18,   433,    15,   433,    19,    -1,    18,   441,    15,
     440,    19,    -1,    63,   248,   249,   247,   246,    10,   250,
     357,    64,    -1,    63,   248,   249,   247,   246,    16,   252,
      17,    10,   255,   357,    64,    -1,    63,   248,   249,   247,
     246,    16,   252,    17,    10,   357,    64,    -1,    63,     1,
      64,    -1,   454,    -1,    -1,   244,    -1,   104,    -1,    48,
      -1,    47,    -1,   126,    -1,    -1,   100,    -1,    -1,   102,
      -1,   251,    -1,   250,   251,    -1,   268,    -1,   265,    10,
      -1,   450,   266,    -1,   252,    98,   266,    -1,    61,   248,
     254,    10,   256,   354,    62,    -1,    61,   248,   254,    10,
     354,    62,    -1,    61,   248,   254,    16,   258,    17,    10,
     255,   354,    62,    -1,    61,   248,   254,    16,   258,    17,
      10,   354,    62,    -1,    61,     1,    62,    -1,   454,    -1,
     255,   268,    -1,   268,    -1,   256,   257,    -1,   257,    -1,
     268,    -1,   259,    10,    -1,   259,    -1,   258,    98,   259,
      -1,   260,    -1,   264,   249,   261,   262,   454,    -1,   264,
     267,   454,    -1,   260,    98,   267,   454,    -1,   260,    98,
     249,   261,   262,   454,    -1,   260,    98,   264,   249,   261,
     262,   454,    -1,    -1,    46,    -1,    -1,   244,    -1,    -1,
       3,    -1,   450,    40,   263,    -1,   450,    39,   263,    -1,
     450,   101,   263,    -1,   264,    98,   454,    -1,   266,    -1,
     265,    98,   266,    -1,   101,   249,   262,   454,    -1,   101,
      46,   249,   262,   454,    -1,   101,   267,   454,    -1,   266,
      98,   454,    -1,   266,    98,   101,   249,   262,   454,    -1,
     266,    98,   101,    46,   249,   262,   454,    -1,   266,    98,
     101,   267,   454,    -1,   101,     1,    10,    -1,    47,    -1,
      48,    -1,   126,    -1,   104,    -1,   450,   269,    -1,   450,
     210,    -1,   450,   212,    -1,   450,   184,    -1,   450,   190,
      -1,   450,   216,    -1,   450,   217,    -1,   450,   220,    -1,
      46,   244,   270,    10,    -1,    46,   446,   244,   270,    10,
      -1,    46,   270,    10,    -1,   271,    -1,   270,    98,   271,
      -1,   454,    -1,   454,   222,    -1,     6,   225,   274,    10,
      -1,     6,   274,    10,    -1,     6,   223,   274,    10,    -1,
       6,   223,   225,   274,    10,    -1,     6,   273,    10,    -1,
       6,     1,    10,    -1,   276,    -1,   273,    98,   276,    -1,
     275,    -1,   274,    98,   275,    -1,   277,    16,   278,    98,
     435,    17,    -1,    16,   278,    98,   435,    17,    -1,   277,
      16,   278,    17,    -1,    16,   278,    17,    -1,   454,   244,
      -1,   454,    -1,   445,    -1,   280,    -1,    -1,    -1,   454,
     281,   285,   284,   282,    10,    -1,    -1,   454,   284,   283,
      10,    -1,   291,    -1,   284,    98,   291,    -1,    29,    16,
     286,    17,    -1,    29,    16,     1,    17,    10,    -1,   287,
      -1,   289,    -1,   288,    -1,   287,    98,   288,    -1,   438,
      -1,   290,    -1,   289,    98,   290,    -1,    11,   454,    16,
     438,    17,    -1,    11,   454,    16,    17,    -1,   292,    16,
     293,    17,    -1,   292,    16,     1,    17,    -1,   292,    16,
      17,    -1,   454,   262,    -1,   294,    -1,   296,    -1,   295,
      -1,   294,    98,   295,    -1,   450,   438,    -1,   297,    -1,
     296,    98,   297,    -1,   450,   290,    -1,    -1,   106,   299,
     300,   107,    -1,   106,     1,   107,    -1,   302,    -1,   300,
     302,    -1,   302,    -1,    10,    -1,   303,    -1,   304,    -1,
     307,    -1,   309,    -1,   180,    -1,    65,    16,   438,    17,
     301,    -1,    65,    16,   438,    17,   301,    79,   301,    -1,
      66,    16,   438,    17,   305,    80,    -1,   306,    -1,   305,
     306,    -1,   435,    15,   301,    -1,    82,    15,   301,    -1,
      82,   301,    -1,    71,    16,   308,    10,   438,    10,   308,
      17,    81,    15,   454,   300,    84,    -1,   454,    22,   438,
      -1,    81,    15,   454,   300,    84,    -1,    81,   300,    84,
      -1,    81,     1,    84,    -1,    81,    15,   454,     1,    84,
      -1,   450,    56,   311,    16,   312,    17,    10,   315,   320,
      55,    -1,   450,    56,   311,    16,   313,    17,    10,   315,
     320,    55,    -1,   454,    -1,   454,    -1,   312,    98,   454,
      -1,   317,    98,   314,    -1,   318,    -1,   314,    98,   318,
      -1,   314,    98,   454,    -1,   316,    -1,   315,   316,    -1,
     317,    10,    -1,   318,    10,    -1,   319,    10,    -1,   316,
      10,    -1,   450,    39,   454,    -1,   450,    39,    46,   454,
      -1,   450,    39,    46,   454,    22,   438,    -1,   317,    98,
     454,    -1,   450,   101,   454,    -1,   318,    98,   454,    -1,
     450,    46,   454,    -1,   319,    98,   454,    -1,   321,    -1,
      58,   322,    59,    -1,    58,     1,    59,    -1,   324,    58,
     322,    59,    -1,   324,    58,     1,    59,    -1,   323,    -1,
     322,   323,    -1,   326,    15,   330,    10,    -1,   326,    15,
     328,    15,   329,    10,    -1,    57,   454,    22,   325,    10,
      -1,    57,     1,    10,    -1,     8,    -1,   327,    -1,   331,
      -1,   326,   327,    -1,   326,   331,    -1,    16,   331,    17,
      -1,    16,   331,   331,    17,    -1,   327,    16,   331,    17,
      -1,   331,    -1,   330,    -1,    14,    -1,   331,    -1,     8,
      -1,    99,    -1,    26,    -1,    12,    -1,   454,   223,   227,
     333,    10,    -1,   454,   223,   333,    10,    -1,   454,   333,
      10,    -1,   334,    -1,   333,    98,   334,    -1,   335,    16,
     278,    98,   435,    17,    -1,    16,   278,    98,   435,    17,
      -1,   292,    -1,    50,   223,   225,   337,    10,    -1,    50,
     225,   337,    10,    -1,    50,   337,    10,    -1,    50,   223,
     337,    10,    -1,   338,    -1,   337,    98,   338,    -1,   445,
      22,   438,    -1,    57,   355,    -1,    57,     1,    84,    -1,
      -1,    60,   341,   355,    -1,   340,     1,    84,    -1,   445,
      22,   360,   438,    -1,   445,    22,   438,    -1,   445,    22,
     360,    -1,   342,     1,    -1,   445,    23,    22,   360,   438,
      -1,   445,    23,    22,   438,    -1,   445,    23,    22,   360,
      -1,   343,     1,    -1,    50,   349,    -1,    76,   445,    -1,
      74,   338,    -1,    75,   445,    -1,   445,    22,   438,    -1,
     357,    -1,   450,    10,    -1,    81,   354,    84,    -1,    81,
      15,   454,   255,   354,    84,    -1,    81,    15,   454,   348,
      84,    -1,    81,   255,   354,    84,    -1,    81,    84,    -1,
     357,    -1,   348,   357,    -1,   445,    22,   438,    -1,    83,
     354,    72,    -1,    83,    15,   454,   255,   354,    72,    -1,
      83,    15,   454,   354,    72,    -1,    83,    72,    -1,    83,
      15,     1,    72,    -1,    83,     1,    72,    -1,    -1,    81,
     352,   354,    84,    -1,    81,   353,   255,   354,    84,    -1,
      81,   353,   354,    84,    -1,    81,    84,    -1,    81,   353,
      84,    -1,    81,     1,    84,    -1,    15,   454,    -1,   355,
      -1,   354,   355,    -1,   450,   342,    10,    -1,   450,   371,
      -1,   450,   369,    -1,   450,   362,    -1,   450,   364,    -1,
     450,   375,    -1,   450,   343,    10,    -1,   450,   350,    -1,
     450,   344,    10,    -1,   450,   367,    -1,   450,   351,    -1,
     450,   376,    -1,   450,   368,    -1,   355,    -1,    10,    -1,
     450,   345,    10,    -1,   450,   358,    -1,   450,   370,    -1,
     450,   374,    -1,   450,   347,    -1,   450,   362,    -1,   450,
     376,    -1,   371,    -1,    29,     8,    -1,    29,    12,    -1,
      29,    16,   439,    17,    -1,   359,    -1,   363,    -1,    -1,
      70,    16,   438,   361,    17,   363,    -1,    77,   454,    10,
      -1,    31,   454,    -1,    31,    16,   366,    17,    -1,    31,
      26,    -1,    31,    16,    26,    17,    -1,    31,   128,    17,
      -1,    14,    24,   454,    10,    -1,   438,    -1,    95,   438,
      -1,    96,   438,    -1,   365,    -1,   366,    98,   365,    -1,
     366,     6,   365,    -1,   360,   356,    -1,    73,    16,   438,
      17,   356,    -1,    65,    16,   438,    17,   356,    -1,    65,
      16,   438,    17,   356,    79,   356,    -1,    65,    16,   438,
      17,     1,    79,   356,    -1,    65,    16,     1,    17,    -1,
      65,    16,   438,    17,   346,    -1,    65,    16,   438,    17,
     346,    79,   346,    -1,    65,    16,     1,    17,    -1,    66,
      16,   438,    17,   372,    80,    -1,    66,    16,   438,    17,
       1,    80,    -1,    68,    16,   438,    17,   372,    80,    -1,
      68,     1,    80,    -1,    67,    16,   438,    17,   372,    80,
      -1,    67,     1,    80,    -1,   373,    -1,   372,   373,    -1,
     435,    15,   356,    -1,    82,    15,   356,    -1,    82,   356,
      -1,    69,   357,    -1,    70,    16,   438,    17,   357,    -1,
      78,    16,   438,    17,   357,    -1,    71,    16,   349,    10,
     438,    10,   349,    17,   357,    -1,    69,   355,    -1,    70,
      16,   438,    17,   355,    -1,    78,    16,   438,    17,   355,
      -1,    71,    16,   349,    10,   438,    10,   349,    17,   355,
      -1,   453,    16,   377,    17,    10,    -1,   453,    16,     1,
      17,    10,    -1,   453,    10,    -1,   438,    -1,   377,    98,
     438,    -1,   377,    98,    -1,    98,    -1,    85,   379,    86,
      -1,    85,    86,    -1,    85,     1,    86,    -1,   380,    -1,
     379,   380,    -1,   196,    -1,   383,    -1,   401,    -1,   381,
      -1,   382,    -1,   113,   387,    10,    -1,   114,   387,    10,
      -1,   114,     1,    10,    -1,   119,   387,    10,    -1,   120,
     387,    10,    -1,   120,     1,    10,    -1,   384,    10,    -1,
     393,    10,    -1,   399,    10,    -1,   385,    22,   390,    -1,
      16,   389,    22,    24,   389,    17,    -1,    16,   386,   388,
     387,    17,    -1,    16,   386,    26,    24,   387,    17,    -1,
     389,    -1,   386,    98,   389,    -1,   386,    -1,   400,    22,
      24,    -1,   400,    26,    24,    -1,   454,    -1,   454,    18,
     434,    19,    -1,   454,    18,   438,    19,    -1,   391,    -1,
      16,   391,    17,    -1,   392,    -1,    16,   392,    98,   392,
      17,    -1,    16,   392,    98,   392,    98,   392,    17,    -1,
      16,   392,    98,   392,    98,   392,    98,   392,    98,   392,
      98,   392,    17,    -1,    16,   392,    98,   392,    98,   392,
      98,   392,    98,   392,    98,   392,    98,   392,    98,   392,
      98,   392,    98,   392,    98,   392,    98,   392,    17,    -1,
     439,    -1,   394,    22,   390,    -1,   395,    22,   390,    -1,
      16,   398,   389,    22,    24,   396,    -1,    16,   389,    22,
      24,   396,    -1,    16,   398,   386,    26,    24,   387,   447,
      15,   397,    17,    -1,    16,   386,    26,    24,   387,   447,
      15,   397,    17,    -1,   389,   447,    15,   397,    17,    -1,
      16,   389,   447,    15,   397,    17,    17,    -1,   438,    -1,
      95,    -1,    96,    -1,    65,    16,   438,    17,   384,    -1,
      65,    16,   438,    17,   393,    -1,   125,   384,    -1,   447,
      -1,   405,    -1,   406,    -1,   407,    -1,   408,    -1,   409,
      -1,   410,    -1,   413,    -1,   412,    -1,   411,    -1,   404,
      -1,   402,    -1,   403,    -1,   122,    16,   417,    98,   418,
      98,   416,    98,   414,    17,    10,    -1,   122,    16,   417,
      98,   418,    98,   416,    17,    10,    -1,   123,    16,   417,
      98,   418,    98,   416,    98,   414,    17,    10,    -1,   123,
      16,   417,    98,   418,    98,   416,    17,    10,    -1,   124,
      16,   419,    98,   419,    98,   416,    98,   416,    98,   414,
      17,    10,    -1,   124,    16,   419,    98,   419,    98,   416,
      98,   416,    17,    10,    -1,    88,    16,   417,    98,   418,
      98,   416,    98,   414,    17,    10,    -1,    88,    16,   417,
      98,   418,    98,   416,    17,    10,    -1,    88,    16,     1,
      17,    -1,    89,    16,   417,    98,   418,    98,   416,    98,
     414,    17,    10,    -1,    89,    16,   417,    98,   418,    98,
     416,    17,    10,    -1,    89,     1,    10,    -1,    94,    16,
     419,    98,   419,    98,   416,    98,   416,    98,   414,    17,
      10,    -1,    94,    16,   419,    98,   419,    98,   416,    98,
     416,    17,    10,    -1,    93,    16,   417,    98,   418,    98,
     416,    98,   414,    17,    10,    -1,    93,    16,   417,    98,
     418,    98,   416,    17,    10,    -1,   121,    16,   417,    98,
     418,    98,   416,    98,   414,    17,    10,    -1,   121,    16,
     417,    98,   418,    98,   416,    17,    10,    -1,    92,    16,
     417,    98,   418,    98,   416,    98,   414,    17,    10,    -1,
      92,    16,   417,    98,   418,    98,   416,    17,    10,    -1,
     105,    16,   419,    98,   419,    98,   439,    98,   439,    17,
      10,    -1,   105,    16,   419,    98,   419,    98,   439,    98,
     439,    98,   414,    17,    10,    -1,    90,    16,   420,    98,
     416,    98,   438,    98,   414,    17,    10,    -1,    90,    16,
     420,    98,   416,    17,    10,    -1,    91,    16,   420,    98,
     416,    17,    10,    -1,    91,    16,   420,    98,   416,    98,
     414,    17,    10,    -1,   415,    -1,   414,    98,   415,    -1,
     438,    -1,   438,    -1,   419,    -1,   419,    -1,   421,   425,
     134,   426,    -1,   421,   425,    -1,   425,   134,   426,    -1,
     425,    -1,   419,    -1,    95,    -1,    96,    -1,   422,    -1,
      97,    18,   424,    19,    -1,     1,    19,    -1,     8,     8,
      -1,     8,    12,    -1,    12,     8,    -1,   423,    -1,   424,
      98,   423,    -1,   389,    -1,   439,    -1,    37,   435,    36,
      -1,    37,   438,    37,   435,    36,    36,    -1,    37,   429,
      36,    -1,   430,    -1,   429,    98,   430,    -1,   454,    18,
     434,    19,    -1,   454,    18,   438,    19,    -1,   454,   432,
     434,    -1,   428,    -1,   454,    -1,    16,   435,    17,    -1,
     449,    16,   435,    17,    -1,    18,   438,    19,    -1,   432,
      18,   438,    19,    -1,   438,    -1,   438,    15,   440,    -1,
     438,    13,    15,   442,    -1,   438,    14,    15,   442,    -1,
     438,    -1,   435,    98,   438,    -1,   453,   432,    -1,   453,
      18,   434,    19,    -1,   453,   432,    18,   434,    19,    -1,
     453,    -1,   453,   431,    -1,    16,   439,    17,    -1,   427,
      -1,   448,    -1,   436,    -1,     7,    -1,   443,   436,    -1,
     443,   449,   436,    -1,   437,    -1,   438,   444,   437,    -1,
     438,   444,   449,   437,    -1,   438,    99,   438,    15,   437,
      -1,   438,    -1,   438,    15,   438,    15,   439,    -1,   438,
      -1,   438,    -1,   438,    -1,    35,    -1,    20,    -1,    25,
      -1,    34,    -1,    34,    20,    -1,   132,    -1,    21,    -1,
      34,    21,    -1,   447,    -1,   133,    -1,    27,    -1,   447,
      -1,    22,    22,    -1,    22,    22,    22,    -1,    35,    22,
      -1,    35,    22,    22,    -1,   131,    -1,   130,    -1,    24,
      -1,    23,    -1,    23,    23,    -1,    23,    22,    -1,    24,
      22,    -1,    24,    24,    -1,    26,    -1,    28,    -1,    25,
      -1,    20,    -1,    21,    -1,    34,    -1,   132,    -1,   133,
      -1,    26,    26,    -1,    23,    23,    23,    -1,    24,    24,
      24,    -1,   454,    18,   434,    19,    -1,   454,   432,    -1,
     428,    -1,   453,    -1,   102,    -1,    14,    -1,    13,    -1,
       8,    -1,   447,     8,    -1,   128,   451,   129,    -1,   128,
       1,   129,    -1,    -1,   128,   451,   129,    -1,   128,     1,
     129,    -1,   452,    -1,   451,    98,   452,    -1,   454,    22,
     438,    -1,   454,    -1,   454,    -1,   453,    11,   454,    -1,
     455,    -1,    12,    -1,    32,   455,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const unsigned short int yyrline[] =
{
       0,   134,   134,   136,   136,   137,   138,   146,   148,   149,
     150,   153,   166,   167,   170,   171,   177,   178,   179,   182,
     192,   193,   198,   199,   203,   204,   205,   206,   207,   211,
     212,   216,   219,   223,   224,   227,   230,   231,   238,   239,
     242,   246,   247,   248,   250,   251,   252,   253,   254,   255,
     256,   261,   264,   265,   267,   286,   286,   294,   295,   302,
     302,   303,   306,   306,   307,   307,   310,   311,   312,   313,
     316,   316,   317,   321,   325,   326,   329,   330,   331,   334,
     335,   338,   339,   342,   343,   344,   345,   348,   349,   350,
     351,   358,   359,   360,   361,   362,   363,   364,   365,   369,
     370,   371,   372,   373,   374,   375,   376,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   392,   392,   393,
     401,   401,   402,   402,   403,   403,   404,   404,   405,   405,
     406,   409,   409,   410,   410,   411,   411,   412,   412,   413,
     413,   414,   417,   418,   419,   426,   426,   427,   427,   428,
     429,   432,   432,   433,   433,   434,   435,   440,   440,   441,
     441,   443,   443,   445,   446,   447,   448,   456,   457,   461,
     462,   463,   464,   465,   466,   467,   472,   476,   477,   480,
     481,   484,   485,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   503,   504,   508,   509,   512,   513,
     515,   515,   516,   519,   520,   521,   524,   524,   525,   528,
     529,   536,   537,   538,   543,   544,   545,   554,   555,   558,
     559,   562,   565,   572,   573,   576,   577,   581,   582,   586,
     587,   590,   591,   594,   597,   598,   603,   604,   605,   608,
     612,   613,   616,   619,   627,   629,   636,   644,   647,   655,
     663,   667,   670,   674,   687,   688,   689,   690,   691,   692,
     696,   697,   700,   701,   704,   705,   709,   710,   714,   715,
     723,   725,   727,   729,   731,   734,   746,   747,   750,   751,
     755,   756,   760,   761,   766,   770,   775,   779,   784,   789,
     797,   798,   800,   801,   803,   804,   807,   808,   809,   810,
     814,   815,   818,   819,   820,   821,   822,   823,   824,   825,
     829,   830,   831,   832,   839,   840,   841,   842,   843,   844,
     845,   846,   849,   850,   851,   855,   856,   859,   860,   867,
     868,   869,   870,   871,   872,   875,   876,   879,   880,   885,
     886,   891,   892,   895,   896,   904,   911,   914,   917,   914,
     918,   918,   922,   923,   926,   927,   929,   930,   933,   934,
     937,   940,   941,   945,   946,   950,   951,   952,   955,   975,
     976,   979,   980,   983,   987,   988,   991,  1001,  1001,  1002,
    1005,  1006,  1010,  1011,  1015,  1016,  1017,  1018,  1019,  1022,
    1023,  1026,  1029,  1030,  1033,  1034,  1035,  1039,  1042,  1045,
    1046,  1047,  1048,  1056,  1058,  1063,  1085,  1086,  1088,  1091,
    1092,  1093,  1096,  1097,  1100,  1101,  1102,  1104,  1107,  1108,
    1109,  1110,  1113,  1114,  1116,  1117,  1123,  1127,  1128,  1129,
    1130,  1134,  1135,  1138,  1139,  1144,  1145,  1148,  1152,  1153,
    1154,  1155,  1158,  1159,  1160,  1164,  1166,  1167,  1170,  1173,
    1174,  1175,  1176,  1184,  1185,  1186,  1189,  1190,  1193,  1194,
    1197,  1205,  1206,  1207,  1208,  1211,  1212,  1215,  1218,  1219,
    1222,  1222,  1234,  1238,  1239,  1240,  1241,  1244,  1245,  1246,
    1247,  1254,  1255,  1256,  1257,  1260,  1264,  1265,  1273,  1274,
    1275,  1276,  1277,  1282,  1283,  1286,  1289,  1290,  1291,  1292,
    1293,  1294,  1299,  1298,  1301,  1302,  1303,  1304,  1305,  1308,
    1317,  1318,  1326,  1327,  1328,  1329,  1330,  1331,  1332,  1333,
    1334,  1335,  1336,  1337,  1338,  1341,  1342,  1346,  1347,  1348,
    1349,  1350,  1351,  1352,  1355,  1361,  1362,  1363,  1366,  1367,
    1368,  1368,  1371,  1374,  1375,  1376,  1377,  1378,  1381,  1384,
    1385,  1386,  1389,  1390,  1391,  1394,  1396,  1402,  1403,  1404,
    1405,  1408,  1409,  1410,  1416,  1417,  1418,  1419,  1420,  1421,
    1425,  1426,  1430,  1431,  1432,  1439,  1440,  1441,  1442,  1446,
    1447,  1448,  1449,  1457,  1458,  1459,  1462,  1463,  1464,  1465,
    1472,  1473,  1474,  1478,  1479,  1483,  1484,  1485,  1486,  1487,
    1491,  1492,  1493,  1497,  1498,  1499,  1506,  1507,  1508,  1512,
    1517,  1518,  1519,  1522,  1523,  1526,  1529,  1530,  1540,  1541,
    1542,  1546,  1547,  1551,  1552,  1553,  1554,  1555,  1563,  1566,
    1567,  1571,  1572,  1576,  1578,  1584,  1585,  1589,  1591,  1592,
    1596,  1597,  1598,  1602,  1611,  1612,  1613,  1614,  1615,  1616,
    1617,  1618,  1619,  1620,  1621,  1622,  1626,  1627,  1630,  1631,
    1635,  1636,  1640,  1641,  1642,  1645,  1646,  1647,  1651,  1652,
    1655,  1656,  1658,  1659,  1663,  1664,  1667,  1668,  1671,  1672,
    1676,  1677,  1680,  1681,  1684,  1692,  1694,  1697,  1700,  1701,
    1702,  1703,  1706,  1710,  1711,  1712,  1715,  1716,  1719,  1720,
    1721,  1724,  1725,  1728,  1732,  1740,  1741,  1746,  1748,  1749,
    1752,  1753,  1754,  1755,  1756,  1765,  1766,  1774,  1775,  1780,
    1784,  1785,  1786,  1789,  1790,  1798,  1799,  1800,  1801,  1802,
    1803,  1804,  1806,  1810,  1811,  1812,  1813,  1816,  1817,  1818,
    1819,  1822,  1823,  1826,  1828,  1830,  1837,  1838,  1839,  1840,
    1841,  1842,  1843,  1844,  1845,  1846,  1850,  1851,  1853,  1854,
    1855,  1856,  1857,  1858,  1859,  1860,  1861,  1862,  1863,  1864,
    1865,  1866,  1867,  1868,  1869,  1870,  1871,  1872,  1873,  1874,
    1875,  1883,  1884,  1885,  1886,  1892,  1895,  1896,  1900,  1901,
    1912,  1913,  1916,  1917,  1918,  1921,  1922,  1925,  1926,  1929,
    1930,  1934,  1937,  1942
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "NET_TOK", "STR0_TOK", "STR1_TOK",
  "GATE_TOK", "STRING_TOK", "DIGIT_TOK", "UNDERSCORE_TOK", "SEM_TOK",
  "DOT_TOK", "LETTER_TOK", "PLUS_TOK", "MINUS_TOK", "COLON_TOK",
  "LBRACE_TOK", "RBRACE_TOK", "LBRACKET_TOK", "RBRACKET_TOK", "AND_TOK",
  "OR_TOK", "EQU_TOK", "GT_TOK", "LT_TOK", "NOT_TOK", "MULT_TOK",
  "PERCENTAL_TOK", "ENV_TOK", "PARA_TOK", "CHAR_TOK", "AT_TOK",
  "DOLLAR_TOK", "BASE_TOK", "SN_TOK", "EXCLAMATION_TOK", "RRAM_TOK",
  "LRAM_TOK", "PARAMETER_TOK", "OUTPUT_TOK", "INOUT_TOK", "SMALL_TOK",
  "MEDIUM_TOK", "LARGE_TOK", "VEC_TOK", "SCALAR_TOK", "REG_TOK",
  "TIME_TOK", "REAL_TOK", "EVENT_TOK", "ASSIGN_TOK", "DEFPARAM_TOK",
  "MODUL_TOK", "ENDMODUL_TOK", "MACRO_MODUL_TOK", "ENDPRIMITIVE_TOK",
  "PRIMITIVE_TOK", "INITIAL_TOK", "TABLE_TOK", "ENDTABLE_TOK",
  "ALWAYS_TOK", "TASK_TOK", "ENDTASK_TOK", "FUNC_TOK", "ENDFUNC_TOK",
  "IF_TOK", "CASE_TOK", "CASEX_TOK", "CASEZ_TOK", "FOREVER_TOK",
  "REPEAT_TOK", "FOR_TOK", "JOIN_TOK", "WAIT_TOK", "FORCE_TOK",
  "RELEASE_TOK", "DEASSIGN_TOK", "DISABLE_TOK", "WHILE_TOK", "ELSE_TOK",
  "ENDCASE_TOK", "BEGIN_TOK", "DEFAULT_TOK", "FORK_TOK", "END_TOK",
  "SPECIFY_TOK", "ENDSPECIFY_TOK", "SPECPARAM_TOK", "DSETUP_TOK",
  "DHOLD_TOK", "DWIDTH_TOK", "DPERIOD_TOK", "DSKEW_TOK", "DRECOVERY_TOK",
  "DSETUPHOLD_TOK", "POSEDGE_TOK", "NEGEDGE_TOK", "EDGE_TOK", "COMMA_TOK",
  "QUESTION_TOK", "AUTO_TOK", "INPUT_TOK", "SIGNED_TOK", "LOCALPARAM_TOK",
  "INTEGER_TOK", "NOCHANGE_TOK", "GENERATE_TOK", "ENDGENERATE_TOK",
  "GENVAR_TOK", "LIBRARY_TOK", "CONFIG_TOK", "ENDCONFIG_TOK",
  "INCLUDE_TOK", "PULSEON_DETECT_TOK", "PULSEONE_EVENT_TOK", "USE_TOK",
  "LIBLIST_TOK", "INSTANCE_TOK", "CELL_TOK", "SHOWCANCEL_TOK",
  "NOSHOWCANCEL_TOK", "REMOVAL_TOK", "FULLSKEW_TOK", "TIMESKEW_TOK",
  "RECREM_TOK", "IFNONE_TOK", "REALTIME_TOK", "DESIGN_TOK", "ATL_TOK",
  "ATR_TOK", "OOR_TOK", "AAND_TOK", "SNNOT_TOK", "NOTSN_TOK", "AAAND_TOK",
  "DEFINE_TOK", "$accept", "file", "lines", "$@1", "library_text",
  "library_descriptions", "library_declaration", "file_path_spec",
  "include_statement", "config_declaration", "identifier_conf",
  "design_statement", "config_rule_statement_list",
  "config_rule_statement", "aidentifier_list", "inst_clause",
  "cell_clause", "liblist_clause", "use_clause", "config", "description",
  "module_declaration", "name_of_module", "module_type", "module_keyword",
  "end_mod", "$@2", "module_option", "module_parameter_port_list", "$@3",
  "parameter_declaration_list", "$@4", "$@5", "signed_range",
  "list_of_ports", "$@6", "list_of_port_declarations", "port_list", "port",
  "port_expression", "port_reference_list", "port_reference",
  "port_declaration", "module_item", "module_or_generate_item",
  "module_or_generate_item_declaration", "parameter_override", "$@7",
  "local_parameter_declaration", "$@8", "$@9", "$@10", "$@11", "$@12",
  "parameter_declaration", "$@13", "$@14", "$@15", "$@16", "$@17",
  "specparam_declaration", "inout_declaration", "$@18", "$@19",
  "input_declaration", "$@20", "$@21", "output_declaration", "$@22",
  "$@23", "$@24", "output_var_type", "s_type", "net_type",
  "event_declaration", "genvar_declaration", "integer_declaration",
  "net_declaration", "xscalared", "scalared", "real_declaration",
  "realtime_declaration", "$@25", "reg_declaration", "time_declaration",
  "$@26", "dimension_list", "drive_strength", "charge_strength", "delay3",
  "delay_value_list", "delay2", "delay_value", "list_of_event_identifiers",
  "list_of_event_lists", "dim_list", "list_of_genvar_identifiers",
  "list_of_net_decl_assignments", "list_of_net_identifiers",
  "list_of_param_assignments", "real_type", "variable_type",
  "list_of_specparam_assignments", "list_of_variable_identifiers",
  "net_decl_assignment", "param_assignment", "specparam_assignment",
  "dimension", "range", "function_declaration", "name_of_function",
  "range_or_type", "automatic", "xsigned",
  "function_item_declaration_list", "function_item_declaration",
  "function_port_list", "task_declaration", "name_of_task",
  "block_item_declaration_list", "task_item_declaration_list",
  "task_item_declaration", "task_port_list", "task_port_item",
  "tf_port_declaration", "xreg", "xrange", "xnettype", "tf_port_dir",
  "tf_input_declaration_list", "tf_input_declaration", "task_port_type",
  "block_item_declaration", "block_reg_declaration",
  "list_of_block_variable_identifiers", "block_variable_type",
  "gate_instantiation", "pull_gate_instance_list",
  "cmos_switch_instance_list", "cmos_switch_instance",
  "pull_gate_instance", "name_of_gate_instance", "output_terminal",
  "module_instantiation", "module_identifier", "$@27", "$@28", "$@29",
  "module_instance_list", "parameter_value_assignment",
  "list_of_parameter_assignments", "ordered_parameter_assignment_list",
  "ordered_parameter_assignment", "named_parameter_assignment_list",
  "named_parameter_assignment", "module_instance", "identifier11",
  "list_of_port_connections", "ordered_port_connection_list",
  "ordered_port_connection", "named_port_connection_list",
  "named_port_connection", "generated_instantiation", "$@30",
  "generate_item_list", "generate_item_or_null", "generate_item",
  "generate_conditional_statement", "generate_case_statement",
  "genvar_module_case_item_list", "genvar_case_item",
  "generate_loop_statement", "genvar_assignment", "generate_block",
  "udp_declaration", "name_of_udp", "udp_port_list",
  "udp_declaration_port_list", "udp_input_declaration_list",
  "udp_port_declaration_list", "udp_port_declaration",
  "udp_output_declaration", "udp_input_declaration", "udp_reg_declaration",
  "udp_body", "combinational_body", "combinational_entry_list",
  "combinational_entry", "udp_initial_statement", "init_val",
  "edge_input_list", "edge_indicator", "current_state", "next_state",
  "output_symbol", "level_symbol", "udp_instantiation",
  "udp_instance_list", "udp_instance", "name_of_instance",
  "continuous_assign", "list_of_net_assignments", "net_assignment",
  "initial_construct", "always_construct", "$@31", "blocking_assignment",
  "nonblocking_assignment", "procedural_continuous_assignments",
  "function_blocking_assignment", "function_statement_or_null",
  "function_seq_block", "function_statement_list", "variable_assignment",
  "par_block", "seq_block", "$@32", "always_label", "statement_list",
  "statement", "statement_or_null", "function_statement",
  "function_case_statement", "delay_control", "delay_or_event_control",
  "$@33", "disable_statement", "event_control", "event_trigger",
  "event_expression", "event_expression_list",
  "procedural_timing_control_statement", "wait_statement",
  "conditional_statement", "function_conditional_statement",
  "case_statement", "case_item_list", "case_item",
  "function_loop_statement", "loop_statement", "system_task_enable",
  "expression_list_null", "specify_block", "specify_item_list",
  "specify_item", "pulsestyle_declaration", "showcancelled_declaration",
  "path_declaration", "simple_path_declaration",
  "parallel_path_description", "list_of_path_inputs",
  "list_of_path_outputs", "connection",
  "specify_input_terminal_descriptor", "path_delay_value",
  "list_of_path_delay_expressions", "path_delay_expression",
  "edge_sensitive_path_declaration",
  "parallel_edge_sensitive_path_description",
  "full_edge_sensitive_path_description", "example",
  "data_source_expression", "edge_identifier",
  "state_dependent_path_declaration", "polarity_operator",
  "system_timing_check", "fullskew_timing_check",
  "timingskew_timing_check", "recrem_timing_check", "setup_timing_check",
  "hold_timing_check", "setuphold_timing_check", "recovery_timing_check",
  "removal_timing_check", "skew_timing_check", "nochange_timing_check",
  "width_timing_check", "period_timing_check", "notify_register_list",
  "notify_register", "timing_check_limit", "data_event", "reference_event",
  "timing_check_event", "controlled_timing_check_event",
  "timing_check_event_control", "edge_control_specifier",
  "edge_descriptor", "edge_descriptor_list", "specify_terminal_descriptor",
  "timing_check_condition", "concatenation", "net_concatenation",
  "net_concatenation_value_list", "net_concatenation_value",
  "function_call", "expression_bracket_list",
  "dimension_constant_expression", "range_expression", "expression_list",
  "primary", "unprim", "expression", "mintypemax_expression",
  "lsb_constant_expression", "msb_constant_expression",
  "width_constant_expression", "unary_operator", "binary_operator",
  "net_lvalue", "signed", "pol_op", "number", "attribute_instance11",
  "attribute_instance", "attr_spec_list", "attr_spec", "simple_identifier",
  "identifier", "ident", 0
};
#endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const unsigned short int yyr1[] =
{
       0,   136,   137,   139,   138,   138,   138,   140,   141,   141,
     141,   142,   143,   143,   144,   144,   145,   145,   145,   146,
     147,   147,   148,   148,   149,   149,   149,   149,   149,   150,
     150,   151,   152,   153,   153,   154,   155,   155,   156,   156,
     156,   157,   157,   157,   157,   157,   157,   157,   157,   157,
     157,   158,   159,   159,   160,   162,   161,   163,   163,   165,
     164,   164,   167,   166,   168,   166,   169,   169,   169,   169,
     171,   170,   170,   172,   173,   173,   174,   174,   174,   175,
     175,   176,   176,   177,   177,   177,   177,   178,   178,   178,
     178,   179,   179,   179,   179,   179,   179,   179,   179,   180,
     180,   180,   180,   180,   180,   180,   180,   181,   181,   181,
     181,   181,   181,   181,   181,   181,   181,   183,   182,   182,
     185,   184,   186,   184,   187,   184,   188,   184,   189,   184,
     184,   191,   190,   192,   190,   193,   190,   194,   190,   195,
     190,   190,   196,   196,   196,   198,   197,   199,   197,   197,
     197,   201,   200,   202,   200,   200,   200,   204,   203,   205,
     203,   206,   203,   203,   203,   203,   203,   207,   207,   208,
     208,   208,   208,   208,   208,   208,   209,   210,   210,   211,
     211,   212,   212,   213,   213,   213,   213,   213,   213,   213,
     213,   213,   213,   213,   214,   214,   215,   215,   216,   216,
     218,   217,   217,   219,   219,   219,   221,   220,   220,   222,
     222,   223,   223,   223,   224,   224,   224,   225,   225,   226,
     226,   227,   228,   229,   229,   230,   230,   231,   231,   232,
     232,   233,   233,   234,   235,   235,   236,   236,   236,   237,
     238,   238,   239,   239,   240,   241,   242,   243,   244,   245,
     245,   245,   245,   246,   247,   247,   247,   247,   247,   247,
     248,   248,   249,   249,   250,   250,   251,   251,   252,   252,
     253,   253,   253,   253,   253,   254,   255,   255,   256,   256,
     257,   257,   258,   258,   259,   260,   260,   260,   260,   260,
     261,   261,   262,   262,   263,   263,   264,   264,   264,   264,
     265,   265,   266,   266,   266,   266,   266,   266,   266,   266,
     267,   267,   267,   267,   268,   268,   268,   268,   268,   268,
     268,   268,   269,   269,   269,   270,   270,   271,   271,   272,
     272,   272,   272,   272,   272,   273,   273,   274,   274,   275,
     275,   276,   276,   277,   277,   278,   279,   281,   282,   280,
     283,   280,   284,   284,   285,   285,   286,   286,   287,   287,
     288,   289,   289,   290,   290,   291,   291,   291,   292,   293,
     293,   294,   294,   295,   296,   296,   297,   299,   298,   298,
     300,   300,   301,   301,   302,   302,   302,   302,   302,   303,
     303,   304,   305,   305,   306,   306,   306,   307,   308,   309,
     309,   309,   309,   310,   310,   311,   312,   312,   313,   314,
     314,   314,   315,   315,   316,   316,   316,   316,   317,   317,
     317,   317,   318,   318,   319,   319,   320,   321,   321,   321,
     321,   322,   322,   323,   323,   324,   324,   325,   326,   326,
     326,   326,   327,   327,   327,   328,   329,   329,   330,   331,
     331,   331,   331,   332,   332,   332,   333,   333,   334,   334,
     335,   336,   336,   336,   336,   337,   337,   338,   339,   339,
     341,   340,   340,   342,   342,   342,   342,   343,   343,   343,
     343,   344,   344,   344,   344,   345,   346,   346,   347,   347,
     347,   347,   347,   348,   348,   349,   350,   350,   350,   350,
     350,   350,   352,   351,   351,   351,   351,   351,   351,   353,
     354,   354,   355,   355,   355,   355,   355,   355,   355,   355,
     355,   355,   355,   355,   355,   356,   356,   357,   357,   357,
     357,   357,   357,   357,   358,   359,   359,   359,   360,   360,
     361,   360,   362,   363,   363,   363,   363,   363,   364,   365,
     365,   365,   366,   366,   366,   367,   368,   369,   369,   369,
     369,   370,   370,   370,   371,   371,   371,   371,   371,   371,
     372,   372,   373,   373,   373,   374,   374,   374,   374,   375,
     375,   375,   375,   376,   376,   376,   377,   377,   377,   377,
     378,   378,   378,   379,   379,   380,   380,   380,   380,   380,
     381,   381,   381,   382,   382,   382,   383,   383,   383,   384,
     385,   385,   385,   386,   386,   387,   388,   388,   389,   389,
     389,   390,   390,   391,   391,   391,   391,   391,   392,   393,
     393,   394,   394,   395,   395,   396,   396,   397,   398,   398,
     399,   399,   399,   400,   401,   401,   401,   401,   401,   401,
     401,   401,   401,   401,   401,   401,   402,   402,   403,   403,
     404,   404,   405,   405,   405,   406,   406,   406,   407,   407,
     408,   408,   409,   409,   410,   410,   411,   411,   412,   412,
     413,   413,   414,   414,   415,   416,   417,   418,   419,   419,
     419,   419,   420,   421,   421,   421,   422,   422,   423,   423,
     423,   424,   424,   425,   426,   427,   427,   428,   429,   429,
     430,   430,   430,   430,   430,   431,   431,   432,   432,   433,
     434,   434,   434,   435,   435,   436,   436,   436,   436,   436,
     436,   436,   436,   437,   437,   437,   437,   438,   438,   438,
     438,   439,   439,   440,   441,   442,   443,   443,   443,   443,
     443,   443,   443,   443,   443,   443,   444,   444,   444,   444,
     444,   444,   444,   444,   444,   444,   444,   444,   444,   444,
     444,   444,   444,   444,   444,   444,   444,   444,   444,   444,
     444,   445,   445,   445,   445,   446,   447,   447,   448,   448,
     449,   449,   450,   450,   450,   451,   451,   452,   452,   453,
     453,   454,   455,   455
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const unsigned char yyr2[] =
{
       0,     2,     1,     0,     2,     2,     1,     1,     1,     1,
       1,     2,     1,     1,     5,     3,     6,     5,     5,     1,
       3,     3,     1,     2,     3,     3,     3,     3,     3,     1,
       2,     2,     2,     1,     2,     3,     0,     2,     1,     1,
       1,     5,     4,     6,     6,     6,     6,     6,     7,     7,
       7,     1,     1,     1,     2,     0,     2,     1,     2,     0,
       5,     4,     0,     4,     0,     6,     0,     1,     1,     2,
       0,     4,     3,     3,     1,     3,     1,     4,     5,     1,
       3,     3,     1,     1,     1,     4,     4,     2,     2,     2,
       2,     1,     2,     3,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     0,     4,     3,
       0,     5,     0,     5,     0,     4,     0,     5,     0,     6,
       3,     0,     4,     0,     5,     0,     6,     0,     5,     0,
       5,     3,     4,     3,     3,     0,     5,     0,     6,     5,
       6,     0,     5,     0,     6,     5,     6,     0,     4,     0,
       3,     0,     2,     4,     3,     5,     4,     1,     1,     1,
       1,     1,     1,     2,     2,     2,     1,     3,     3,     3,
       3,     3,     3,     6,     6,     7,     7,     8,     7,     7,
       7,     8,     7,     3,     0,     1,     1,     1,     3,     3,
       0,     4,     3,     5,     4,     3,     0,     4,     3,     1,
       2,     5,     5,     3,     3,     3,     3,     4,     2,     1,
       3,     1,     1,     1,     1,     1,     3,     2,     4,     1,
       3,     1,     3,     1,     1,     3,     1,     3,     2,     1,
       1,     3,     1,     3,     3,     3,     3,     5,     5,     9,
      12,    11,     3,     1,     0,     1,     1,     1,     1,     1,
       0,     1,     0,     1,     1,     2,     1,     2,     2,     3,
       7,     6,    10,     9,     3,     1,     2,     1,     2,     1,
       1,     2,     1,     3,     1,     5,     3,     4,     6,     7,
       0,     1,     0,     1,     0,     1,     3,     3,     3,     3,
       1,     3,     4,     5,     3,     3,     6,     7,     5,     3,
       1,     1,     1,     1,     2,     2,     2,     2,     2,     2,
       2,     2,     4,     5,     3,     1,     3,     1,     2,     4,
       3,     4,     5,     3,     3,     1,     3,     1,     3,     6,
       5,     4,     3,     2,     1,     1,     1,     0,     0,     6,
       0,     4,     1,     3,     4,     5,     1,     1,     1,     3,
       1,     1,     3,     5,     4,     4,     4,     3,     2,     1,
       1,     1,     3,     2,     1,     3,     2,     0,     4,     3,
       1,     2,     1,     1,     1,     1,     1,     1,     1,     5,
       7,     6,     1,     2,     3,     3,     2,    13,     3,     5,
       3,     3,     5,    10,    10,     1,     1,     3,     3,     1,
       3,     3,     1,     2,     2,     2,     2,     2,     3,     4,
       6,     3,     3,     3,     3,     3,     1,     3,     3,     4,
       4,     1,     2,     4,     6,     5,     3,     1,     1,     1,
       2,     2,     3,     4,     4,     1,     1,     1,     1,     1,
       1,     1,     1,     5,     4,     3,     1,     3,     6,     5,
       1,     5,     4,     3,     4,     1,     3,     3,     2,     3,
       0,     3,     3,     4,     3,     3,     2,     5,     4,     4,
       2,     2,     2,     2,     2,     3,     1,     2,     3,     6,
       5,     4,     2,     1,     2,     3,     3,     6,     5,     2,
       4,     3,     0,     4,     5,     4,     2,     3,     3,     2,
       1,     2,     3,     2,     2,     2,     2,     2,     3,     2,
       3,     2,     2,     2,     2,     1,     1,     3,     2,     2,
       2,     2,     2,     2,     1,     2,     2,     4,     1,     1,
       0,     6,     3,     2,     4,     2,     4,     3,     4,     1,
       2,     2,     1,     3,     3,     2,     5,     5,     7,     7,
       4,     5,     7,     4,     6,     6,     6,     3,     6,     3,
       1,     2,     3,     3,     2,     2,     5,     5,     9,     2,
       5,     5,     9,     5,     5,     2,     1,     3,     2,     1,
       3,     2,     3,     1,     2,     1,     1,     1,     1,     1,
       3,     3,     3,     3,     3,     3,     2,     2,     2,     3,
       6,     5,     6,     1,     3,     1,     3,     3,     1,     4,
       4,     1,     3,     1,     5,     7,    13,    25,     1,     3,
       3,     6,     5,    10,     9,     5,     7,     1,     1,     1,
       5,     5,     2,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,    11,     9,    11,     9,
      13,    11,    11,     9,     4,    11,     9,     3,    13,    11,
      11,     9,    11,     9,    11,     9,    11,    13,    11,     7,
       7,     9,     1,     3,     1,     1,     1,     1,     4,     2,
       3,     1,     1,     1,     1,     1,     4,     2,     2,     2,
       2,     1,     3,     1,     1,     3,     6,     3,     1,     3,
       4,     4,     3,     1,     1,     3,     4,     3,     4,     1,
       3,     4,     4,     1,     3,     2,     4,     5,     1,     2,
       3,     1,     1,     1,     1,     2,     3,     1,     3,     4,
       5,     1,     5,     1,     1,     1,     1,     1,     1,     1,
       2,     1,     1,     2,     1,     1,     1,     1,     2,     3,
       2,     3,     1,     1,     1,     1,     2,     2,     2,     2,
       1,     1,     1,     1,     1,     1,     1,     1,     2,     3,
       3,     4,     2,     1,     1,     1,     1,     1,     1,     2,
       3,     3,     0,     3,     3,     1,     3,     3,     1,     1,
       3,     1,     1,     2
};

/* YYDPREC[RULE-NUM] -- Dynamic precedence of rule #RULE-NUM (0 if none).  */
static const unsigned char yydprec[] =
{
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0
};

/* YYMERGER[RULE-NUM] -- Index of merging function for rule #RULE-NUM.  */
static const unsigned char yymerger[] =
{
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0
};

/* YYDEFACT[S] -- default rule to reduce with in state S when YYTABLE
   doesn't specify something else to do.  Zero means the default is an
   error.  */
static const unsigned short int yydefact[] =
{
     792,     0,     0,   792,   792,     6,     0,     0,   802,     0,
       0,   795,   798,   801,     1,     0,     0,     0,    40,     7,
       9,     8,    10,     5,    38,    39,     0,     4,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   470,     0,     0,
       0,     0,     0,    99,   100,   113,   114,   109,   107,   110,
     112,   108,   111,   116,   115,   102,   104,   346,   103,   101,
     105,     0,   347,   794,   803,     0,   793,     0,    11,     0,
      19,     0,     0,    52,    53,     0,     0,     0,     0,     0,
     196,   197,   262,   195,   194,   194,     0,     0,     0,     0,
       0,     0,     0,   337,   335,     0,   344,     0,   263,     0,
       0,     0,     0,   239,   242,     0,   236,     0,     0,   223,
     224,   225,     0,     0,     0,     0,     0,   465,   783,     0,
     784,   799,     0,     0,     0,   468,     0,   792,     0,   261,
       0,     0,   262,     0,     0,     0,     0,   229,     0,     0,
       0,     0,     0,     0,   350,   352,     0,     0,   456,     0,
     292,   796,   734,   788,   787,   786,     0,   747,   752,   748,
     749,   746,     0,   751,   755,   731,   733,   737,   797,     0,
     754,   732,   728,   799,     0,    15,    13,     0,    12,     0,
     405,    54,    51,     0,     0,     0,     0,     0,     0,   193,
       0,     0,     0,     0,     0,     0,   292,   262,   262,   334,
       0,   345,     0,   218,   741,   222,     0,     0,     0,     0,
       0,   333,     0,   330,     0,     0,     0,   343,   205,     0,
       0,   208,     0,   199,   198,     0,     0,     0,   238,   209,
     178,   177,     0,     0,   227,   713,     0,   708,   714,     0,
       0,     0,   463,     0,     0,     0,     0,   782,   119,     0,
     234,     0,   469,     0,     0,     0,     0,     0,     0,     0,
       0,   792,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   519,   522,   538,   792,   515,
     539,   516,   521,   524,   514,   513,   517,   523,     0,   784,
     471,   274,     0,   275,   252,   254,   182,   181,   180,   179,
       0,   202,     0,   472,     0,     0,   221,     0,   460,     0,
       0,     0,     0,     0,     0,   455,     0,     0,   293,   368,
       0,   750,   753,     0,   723,   773,   774,     0,   765,   764,
     772,   770,   756,   771,   775,     0,     0,   763,   762,   776,
     777,     0,   757,     0,   735,     0,     0,   789,     0,     0,
     729,   725,     0,     0,     0,     0,     0,   792,     0,    42,
       0,     0,     0,    57,    91,     0,     0,     0,     0,     0,
     282,   284,   262,     0,     0,     0,     0,     0,     0,     0,
       0,   213,     0,     0,   214,   215,   216,     0,   292,   292,
     342,     0,     0,   219,   222,     0,     0,     0,   331,     0,
     329,     0,   336,     0,   338,     0,   744,     0,   204,     0,
     207,   243,     0,   719,   237,   210,   226,     0,   707,     0,
       0,     0,     0,   464,   462,   466,   467,   800,     0,     0,
       0,   118,     0,     0,     0,   535,   536,     0,     0,   545,
       0,   543,   481,     0,     0,     0,     0,     0,     0,     0,
     579,     0,     0,     0,   483,   484,   482,     0,     0,     0,
       0,   506,   792,   792,     0,     0,   499,   792,   510,   476,
     512,   480,   518,   520,   526,   525,   555,     0,     0,   585,
       0,   792,   792,   258,   257,   256,   259,   255,     0,   230,
     201,     0,     0,   454,     0,   348,     0,   353,   351,     0,
     367,     0,   369,   371,   370,   374,     0,   457,     0,   730,
     705,     0,     0,   758,   767,   766,   768,   769,   778,   760,
       0,   738,     0,     0,     0,   736,     0,   723,     0,     0,
       0,    18,     0,     0,    29,     0,    17,     0,     0,     0,
      22,     0,     0,    14,     0,     0,     0,     0,   406,    90,
      56,    41,    58,     0,    92,     0,   161,   262,     0,     0,
     262,     0,     0,    95,    96,    98,    87,    88,    89,    94,
      97,    72,     0,    84,     0,     0,     0,    74,    76,    79,
      83,    73,   792,   262,   310,   311,     0,   313,   312,   290,
       0,   294,   294,   294,     0,     0,     0,     0,     0,    55,
       0,    55,     0,     0,     0,     0,   233,     0,     0,   231,
     225,     0,     0,     0,   217,     0,     0,   332,     0,     0,
       0,   341,     0,     0,   203,     0,   228,   709,     0,     0,
     712,     0,   461,   781,   787,   786,     0,   717,     0,   235,
     245,     0,     0,     0,     0,     0,   552,     0,   549,   547,
       0,     0,     0,     0,   569,     0,   567,     0,     0,     0,
       0,   542,     0,   508,   509,   792,   507,   792,   277,   792,
       0,   501,     0,   792,   496,   511,     0,   475,   474,     0,
       0,   589,     0,   586,   792,   279,     0,   280,   792,     0,
       0,     0,   253,     0,   453,     0,     0,     0,   356,   358,
     357,   361,   360,     0,   366,   365,   792,   792,   376,   373,
       0,   724,     0,   759,   779,   780,   761,     0,   739,   791,
     790,   715,   726,     0,     0,     0,    21,    20,    30,    33,
       0,    31,    32,    16,    23,     0,     0,     0,     0,     0,
       0,     0,     0,   792,     0,    93,     0,   785,     0,   137,
     133,   139,   176,   172,     0,   162,   157,   169,   170,   171,
     262,   292,     0,     0,     0,   591,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   595,     0,   593,   598,   599,   596,     0,
       0,     0,     0,     0,     0,   597,   654,   655,   653,   644,
     645,   646,   647,   648,   649,   652,   651,   650,     0,     0,
     240,     0,     0,   262,   292,     0,     0,   120,   122,   126,
       0,   792,   262,   262,     0,     0,     0,     0,    82,    71,
       0,     0,   283,   290,   262,     0,   299,   291,   292,   286,
     295,   297,   296,   298,    61,    62,     0,    43,     0,     0,
      47,    44,    46,    45,   211,   212,     0,     0,   184,     0,
     183,     0,     0,     0,     0,     0,     0,     0,   340,   220,
       0,     0,     0,   743,     0,     0,   710,   717,     0,     0,
     720,   718,   548,   537,   546,   550,   551,     0,   544,     0,
     495,   560,     0,     0,     0,     0,   792,     0,     0,   792,
     792,   503,   276,   792,   505,     0,   317,   318,   315,   316,
     319,   320,   321,   314,   500,   792,   792,     0,   473,   479,
     478,     0,     0,   588,   278,   792,   281,   271,     0,   792,
     792,   459,     0,     0,   354,     0,     0,   349,   372,     0,
     375,     0,     0,     0,   740,   727,   716,    34,    24,    36,
      25,    26,    27,    28,   792,   407,   792,   408,   409,     0,
     421,     0,   418,   141,     0,     0,     0,     0,   135,   160,
     167,   173,   168,     0,   175,   174,   292,   145,   592,   638,
     639,     0,   613,     0,   618,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   615,     0,   613,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   642,   590,
     594,   606,     0,   607,     0,     0,   608,   144,   143,     0,
       0,     0,   292,   151,   130,     0,     0,     0,     0,   128,
     379,     0,     0,     0,     0,   388,   792,   380,   384,   385,
     386,   387,   262,   292,   262,   292,     0,   164,    48,     0,
      80,     0,    75,     0,     0,   292,   290,   287,     0,    66,
      60,     0,    49,    50,   185,   186,   232,     0,   244,     0,
     188,   189,     0,   192,   190,   742,   339,   248,   247,   745,
     721,   722,   554,   553,     0,   557,     0,   792,     0,   570,
       0,     0,     0,   580,     0,     0,   556,   581,   504,     0,
       0,   325,     0,   327,   792,   498,   540,   477,   584,   583,
     587,   270,   792,     0,   792,   264,     0,   300,   266,     0,
       0,     0,   355,     0,   359,   362,   458,   706,     0,    35,
     792,   412,     0,     0,     0,     0,   792,   792,     0,     0,
     419,   132,     0,     0,     0,     0,   158,   147,     0,     0,
       0,     0,     0,   643,     0,     0,   613,     0,     0,     0,
     693,   694,     0,   703,     0,   686,     0,   695,   691,   667,
       0,     0,   692,     0,     0,     0,     0,     0,     0,   600,
     602,   601,   603,   605,   604,     0,     0,     0,     0,     0,
     613,     0,   609,   621,   623,   628,   629,   630,   241,   142,
     246,   153,     0,   125,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   792,   378,   381,   292,     0,   292,     0,
       0,   163,   166,    77,     0,    81,    86,    85,     0,   292,
     285,     0,    67,    68,    64,   187,   191,   792,   792,   565,
     792,   574,   564,   571,   792,   568,   566,   541,     0,     0,
     324,     0,     0,   328,   497,   792,   792,     0,   262,   292,
       0,   265,     0,     0,   267,     0,     0,     0,     0,   268,
     364,     0,    37,     0,     0,   413,     0,   426,     0,   417,
     414,     0,   415,   416,     0,     0,     0,   410,   411,   423,
     422,     0,   138,   134,   140,     0,     0,   146,     0,   614,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   664,
     697,     0,     0,   689,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     623,   628,     0,   152,   121,   123,   127,     0,     0,     0,
       0,     0,   401,     0,   400,     0,   149,     0,   155,   165,
      78,   288,     0,    63,    69,    66,   559,   558,   573,   572,
       0,   322,   326,     0,   792,   273,   309,   292,     0,   304,
     249,     0,   792,     0,     0,     0,   792,     0,   531,   528,
     532,   529,   534,   530,   533,     0,   301,   262,   305,   792,
     269,   363,     0,     0,     0,   449,   452,     0,   451,   450,
       0,   431,     0,   438,   439,   403,     0,   425,   424,   404,
     420,   136,   148,     0,   611,   616,   617,     0,     0,   632,
       0,     0,   619,   620,   640,   641,     0,     0,   701,     0,
       0,   687,     0,   690,   704,     0,     0,   685,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     622,     0,   154,   129,   792,     0,     0,     0,     0,   792,
     150,   156,   289,     0,   792,   323,   272,     0,   302,     0,
     575,     0,     0,     0,     0,     0,   492,   792,   792,   527,
       0,   262,   292,     0,   792,     0,   436,     0,   428,     0,
     427,   432,     0,   440,   441,     0,     0,     0,   612,     0,
       0,   610,     0,     0,     0,   631,   698,   699,   700,   696,
       0,     0,   688,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   383,
     389,   382,   792,     0,   392,     0,     0,   398,   402,   399,
      65,   582,   303,     0,     0,     0,     0,     0,   792,   792,
     488,   485,   292,     0,   308,     0,   251,   437,     0,   442,
       0,     0,     0,   445,     0,   430,   429,     0,     0,     0,
       0,   702,     0,     0,   679,     0,   680,     0,   682,   684,
       0,     0,     0,     0,     0,     0,     0,     0,   624,     0,
     792,   792,   396,   391,   393,   792,     0,   563,   792,   792,
       0,   792,   792,   792,   493,   491,     0,   306,   250,   435,
     443,     0,   433,   444,     0,   637,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     390,   395,   394,     0,   561,   486,     0,   576,     0,   577,
     792,   490,   494,   307,   447,     0,   446,   448,   634,     0,
     635,     0,   663,     0,   666,     0,     0,   681,   683,   675,
       0,   671,     0,     0,     0,   673,     0,   657,     0,   659,
       0,     0,   625,     0,     0,   792,   487,     0,   489,   434,
       0,   633,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   562,     0,
     636,   662,   665,   678,   674,   670,   669,     0,   676,     0,
     672,   656,   658,   661,     0,     0,     0,   792,     0,     0,
       0,     0,   792,   578,   668,   677,   660,     0,   792,     0,
     397,   626,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   627
};

/* YYPDEFGOTO[NTERM-NUM].  */
static const short int yydefgoto[] =
{
      -1,     2,     3,     4,    18,    19,    20,   177,    21,    22,
      69,   355,   539,   540,   533,   541,   542,   730,   737,  1129,
      23,    24,   181,    76,    77,   359,   360,   361,   186,   595,
     846,  1059,  1355,  1231,   187,   368,   188,   576,   577,   578,
     827,   579,   362,   363,   364,    43,    44,   123,   906,  1026,
    1027,   816,  1028,  1207,   907,   748,   966,  1145,   965,   967,
     783,   566,  1148,  1296,   567,  1202,  1332,   568,   973,   754,
     755,   974,   756,   757,   908,    46,   909,    48,    82,    83,
     910,   911,   139,    51,   912,   101,   234,    84,    85,    90,
     392,   307,   203,   606,   109,   110,   136,   607,   608,   249,
     103,   104,   809,   105,   609,   250,   810,   229,   318,    53,
     691,   488,   130,    99,  1114,  1115,  1120,    54,   292,   667,
     684,   685,   369,   370,   371,   838,   319,   841,   372,  1116,
    1117,   590,   668,   913,  1100,  1101,    55,    91,    92,    93,
      94,   209,   304,    56,    57,   143,   703,   313,   144,   311,
     697,   698,   699,   700,   708,   145,   308,   501,   502,   503,
     504,   505,   569,   821,  1036,  1530,  1531,  1038,  1039,  1533,
    1534,  1040,  1340,  1041,    25,   179,   544,   545,   957,  1130,
    1131,  1132,  1133,  1134,  1276,  1277,  1400,  1401,  1278,  1558,
    1402,  1403,  1561,  1655,  1562,  1404,    58,   147,   148,   149,
      59,   116,   117,    60,    61,   127,   272,   273,   274,  1377,
    1644,  1378,  1603,   442,   275,   276,   462,   463,   467,   468,
     476,  1645,  1379,   277,   278,   897,   279,   280,   281,   646,
     647,   282,   283,   284,  1381,   285,  1088,  1089,  1383,   286,
     287,   682,   570,   784,   785,   786,   787,   788,   789,   790,
     995,   996,  1151,  1163,  1192,  1193,  1194,   791,   792,   793,
    1419,  1614,   983,   794,  1152,   795,   796,   797,   798,   799,
     800,   801,   802,   803,   804,   805,   806,   807,  1577,  1578,
    1436,  1164,  1430,  1165,  1173,  1166,  1167,  1428,  1429,  1168,
    1433,   165,   118,   236,   237,   350,   247,   412,   428,  1090,
     166,   167,   204,  1195,   874,   407,  1080,   169,   341,   201,
     759,   170,   171,   346,   126,    10,    11,   172,   173,    13
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -1315
static const short int yypact[] =
{
    1057,   833,   141,    99,    27, -1315,  2023,    20, -1315,  1401,
     321, -1315,   143, -1315, -1315,   177,  1401,    97, -1315, -1315,
   -1315, -1315, -1315, -1315, -1315, -1315,   667, -1315,   759,  1460,
     113,  1191,  1271,  1276,  1630,  1341,  2996, -1315,   227,   679,
    1363,  1373,  1376, -1315, -1315, -1315, -1315, -1315, -1315, -1315,
   -1315, -1315, -1315, -1315, -1315, -1315, -1315, -1315, -1315, -1315,
   -1315,  2432,   939, -1315, -1315,  1401, -1315,  3533, -1315,   191,
   -1315,   348,  1261, -1315, -1315,  1401,  1401,  1196,   356,  1529,
   -1315, -1315,   307, -1315,   898,   898,   467,  1293,  3573,  1509,
    1085,    94,    95, -1315, -1315,   512,   517,   593, -1315,  1535,
     658,  1401,   666, -1315, -1315,   107,   875,   685,   737,   469,
     656,   797,  1539,  1433,  1596,  1433,   152, -1315, -1315,   748,
     832,   837,   873,  1401,   785, -1315,  4930,   773,   926, -1315,
    1401,   969,   307,   948,   172,  1033,   297, -1315,  1081,  1401,
     980,  1293,  1640,  1076,  1022, -1315,  1125,   380, -1315,  1140,
     517, -1315, -1315, -1315, -1315, -1315,  3533, -1315, -1315, -1315,
    1001, -1315,  3533, -1315, -1315, -1315, -1315, -1315,  4674,   116,
    1151, -1315,   150, -1315,    71, -1315, -1315,  1141,   832,  1159,
   -1315, -1315, -1315,  1889,  1007,  1175,   401,  1162,  1197, -1315,
    1198,  1120,  1133,  1217,  1225,  1252,   517,   307,   307, -1315,
      78, -1315,  3533, -1315,  3990, -1315,  1433,  1085,   381,  1258,
     443, -1315,  1212, -1315,  1085,  1433,  3533, -1315, -1315,   450,
    1401, -1315,   455, -1315, -1315,  1401,  3533,  3533,   797, -1315,
   -1315, -1315,  1401,  1401,   797, -1315,   316, -1315,  1263,  1433,
     473,   476, -1315,  1433,  3533,  1401,  3533,  1277, -1315,   478,
   -1315,   830, -1315,  1280,   352,   339,  1433,  1298,  1307,   828,
    1011,   773,  1319,  1336,  1344,  1433,  1433,  1433,  1401,  1350,
    2672,  2765,   692,  1044,  1334, -1315, -1315, -1315,    72, -1315,
   -1315, -1315, -1315, -1315, -1315, -1315, -1315, -1315,  1179,  1249,
   -1315, -1315,   553, -1315, -1315,   122, -1315, -1315, -1315, -1315,
    1401, -1315,   490, -1315,  1300,  1433, -1315,  1602, -1315,   542,
    1353,  1401,  1401,  1406,  1250, -1315,  1602,  1433, -1315, -1315,
    1394, -1315, -1315,   391,  4006, -1315, -1315,  1407,  1444,   291,
   -1315,  1418, -1315, -1315, -1315,  1430,  3533, -1315, -1315, -1315,
   -1315,  2847, -1315,  1402, -1315,  1151,  1580, -1315,  3533,  3533,
   -1315,  1437,  1441,  1368,  1403,  1132,  1472,    90,  1475, -1315,
    1450,  1889,  1080, -1315, -1315,  3692,  1477,  1487,  1411,    96,
   -1315,  1438,  1106,    79,   133,  2050,   909,  1544,  1547,  2156,
    2551, -1315,  1558,  1577, -1315, -1315, -1315,  1289,   517,   517,
   -1315,  3533,   320, -1315,  1394,  3533,  1491,   556, -1315,  1433,
   -1315,  1433, -1315,  1584, -1315,   370,  4674,  1598, -1315,   571,
   -1315, -1315,  1606,  4674,  4674, -1315, -1315,   797, -1315,  1433,
    3533,  3068,   574, -1315, -1315, -1315,  4674, -1315,  1587,  3806,
    3533, -1315,  1401,  3533,  1401, -1315, -1315,  3533,  1705, -1315,
    1610, -1315, -1315,  1613,  1548,  3533,  1599,  3533,  1621,  3533,
   -1315,  3533,  1433,  3533, -1315, -1315, -1315,  1679,  3533,  1619,
    1401, -1315,   773,   489,  1634,  1405, -1315,   399, -1315, -1315,
   -1315, -1315, -1315, -1315, -1315, -1315, -1315,  1946,  1686, -1315,
     961,   773,   773, -1315, -1315, -1315, -1315, -1315,  1401, -1315,
   -1315,  3533,   577, -1315,   721,  1022,  1125, -1315, -1315,  1697,
   -1315,  1699,  1622, -1315,  1624, -1315,  3160, -1315,  1625, -1315,
   -1315,  3533,  3533,  1702, -1315,  1706, -1315,  1704, -1315,  1711,
    4033, -1315,  3533,  1605,   554, -1315,   431,  4674,  1716,  3533,
    3533, -1315,  1726,  1327,   832,  1628, -1315,  1401,  1401,  1135,
   -1315,  1436,  1436, -1315,   494,  1724,  1647,  1708, -1315, -1315,
   -1315, -1315, -1315,  1738, -1315,   810,   360,    87,  3598,  1278,
      87,  1527,  3181, -1315, -1315, -1315,  1651,  1653,  1655, -1315,
   -1315, -1315,  2050, -1315,  1492,  1156,   558, -1315, -1315, -1315,
    1736, -1315,   773,  1323, -1315, -1315,  1401, -1315, -1315,  1709,
    1401,  1754,  1754,  1754,  1739,  1721,  1889,  2050,  2050,  1475,
    1889,  1475,  1889,  1762,  1763,  1401, -1315,   591,  1760, -1315,
    1372,  1289,  1289,   587, -1315,  3533,  4060, -1315,  1683,  1766,
    1433, -1315,  3533,  3533, -1315,  3533,   797, -1315,  1772,  3824,
   -1315,  4120, -1315, -1315,  1777,  1778,  3533, -1315,  4090, -1315,
    4674,  1784,  1780,  1781,  3533,  3533, -1315,   171,  4674, -1315,
    3533,  1787,  4160,  4183, -1315,  4211, -1315,  4241,  4304,  1785,
    4332, -1315,  4362, -1315, -1315,   743, -1315,   773, -1315,   791,
    4783, -1315,  1734,   773, -1315, -1315,  1791,  3533,  4674,  1946,
    1793, -1315,   617,  4674,   773, -1315,  1798, -1315,    84,  4715,
     632,  1019, -1315,   708, -1315,  1794,  1401,  1795,  1715, -1315,
    1717, -1315,  4674,  1806, -1315, -1315,   773,   773, -1315,  4674,
    3533,  4674,   603, -1315, -1315, -1315, -1315,  3533, -1315, -1315,
   -1315, -1315, -1315,  1805,  3859,   734, -1315, -1315,   832,  1401,
    1815,   832,   832, -1315, -1315,  1401,  1816,  1817,  1818,  1821,
    1822,  1401,  1829,    90,   985, -1315,  1830, -1315,  1401, -1315,
   -1315,   517, -1315, -1315,  1401, -1315,   390, -1315, -1315, -1315,
     307,   517,  1755,   530,  1826, -1315,  1827,  1067,  1834,  1835,
    1837,  1838,  1839,  1840,  1401,  1446,  1401,  1494,  1841,  1844,
    1846,  1848,  1850, -1315,  4827, -1315, -1315, -1315, -1315,  1836,
    1823,  1858,  1847,  1849,  1860, -1315, -1315, -1315, -1315, -1315,
   -1315, -1315, -1315, -1315, -1315, -1315, -1315, -1315,  1863,   596,
   -1315,  1401,  1852,   307,   517,  1865,  1401, -1315, -1315,   517,
    1769,  1164,    87,    87,  1138,  1889,  1862,   725, -1315, -1315,
    1411,  3533, -1315,  1709,  1545,  1401, -1315, -1315,   517, -1315,
   -1315, -1315, -1315, -1315, -1315, -1315,   769, -1315,  1889,  1889,
   -1315, -1315, -1315, -1315, -1315, -1315,   601,  1869, -1315,  1401,
   -1315,  3533,  1401,   618,  1870,  1401,   622,  1871, -1315, -1315,
    3533,  1866,   782,  4674,  1874,  1877, -1315,   733,  3533,  3533,
   -1315, -1315, -1315, -1315, -1315,  4674,  4674,  1753, -1315,  1753,
    4674, -1315,  2891,  1299,  3439,  3439,   773,  1867,  3533,    72,
     773, -1315, -1315,   800, -1315,   452, -1315, -1315, -1315, -1315,
   -1315, -1315, -1315, -1315, -1315,   773,   404,  3533,  4674,  3533,
    4674,  1872,  1879,  3533, -1315,   256, -1315, -1315,  1887,    22,
     773, -1315,  1888,  1883, -1315,  3533,  1891, -1315, -1315,  3533,
   -1315,  1891,   820,  1864, -1315, -1315, -1315,  1401, -1315,  1639,
   -1315, -1315, -1315, -1315,   773, -1315,   773,  1808,  1809,  1802,
   -1315,  1401, -1315, -1315,   626,  1401,  1401,  1401, -1315, -1315,
   -1315, -1315, -1315,  1401, -1315, -1315,   517, -1315, -1315, -1315,
   -1315,   674,  1882,  1401,  1892,  3533,   518,  1899,   548,   548,
     548,   548,   548,   548,   548,  1813,  1902, -1315,  1903,  1904,
    1905,  1907,  1908,   548,   548,   548,   548,  1401, -1315, -1315,
   -1315, -1315,  3604, -1315,  3604,  3604, -1315, -1315, -1315,  1401,
     638,  3533,   517, -1315, -1315,   652,  1401,  1401,  1401, -1315,
   -1315,  1906,  1914,  1915,  3098, -1315,  1251, -1315, -1315, -1315,
   -1315, -1315,   307,   517,   307,   517,   519, -1315, -1315,  1607,
   -1315,  1156, -1315,  1900,  3876,   517,  1709, -1315,  1401,   145,
   -1315,  1886, -1315, -1315, -1315, -1315, -1315,  1910,  4674,   669,
   -1315, -1315,  1923, -1315, -1315, -1315, -1315, -1315, -1315,  4674,
   -1315, -1315, -1315, -1315,  1855,  1868,  1861,    82,  2309, -1315,
     175,  3336,  3368, -1315,  1917,  2391, -1315, -1315, -1315,  1401,
     680, -1315,   517,   797,   696, -1315,  4674,  4674, -1315, -1315,
    4674, -1315,   773,   876,    22, -1315,   728,  1853, -1315,  1029,
     829,  1854, -1315,  3470, -1315, -1315, -1315, -1315,  1851, -1315,
      69,  1935,   735,   738,   742,   540,    69,    90,  1401,  1401,
    1934, -1315,   749,   752,   753,  1401, -1315, -1315,  1401,  1933,
    1401,  1401,  1629, -1315,  1939,   219,  1942,  3533,  4385,  1328,
   -1315, -1315,  1947, -1315,  1875, -1315,  1401, -1315,  1845, -1315,
    1949,  1884, -1315,  1890,  1893,  1896,  1898,  1901,  1909, -1315,
   -1315, -1315, -1315, -1315, -1315,  1911,  1912,  1913,  1920,   878,
    1948,  3635, -1315, -1315, -1315, -1315, -1315, -1315, -1315, -1315,
   -1315, -1315,  1401, -1315,   764,   772,   774,  1401,  3533,  3533,
    1401,  1885,  1401,  1077, -1315, -1315,   517,  1401,   517,  1401,
     412, -1315,  1469, -1315,  1955, -1315, -1315, -1315,  1401,   517,
   -1315,  1401, -1315,   517, -1315, -1315, -1315,    72,    72, -1315,
      72, -1315, -1315, -1315,    72, -1315, -1315, -1315,  1433,   775,
   -1315,  1401,  1401,   797, -1315,   773,   292,  1974,   307,   517,
    1401, -1315,  1921,  4830, -1315,  1854,   350,  1976,  1854,  1853,
   -1315,  4425, -1315,  1495,   327,  1935,  1932, -1315,  1931, -1315,
   -1315,  1401, -1315, -1315,  1401,  1401,  1943,  1809, -1315, -1315,
   -1315,  3533, -1315, -1315, -1315,   798,  1401, -1315,  1401, -1315,
    1983,  1977,  1978,  1604,  1979,  1980,  1986,  3946,  1990, -1315,
   -1315,  1656,   548,  1878,  3533,   548,  3533,  3533,   548,   548,
     548,   548,   548,   548,   548,   548,  1984,  1989,  3533,  2002,
    1922,  1394,  1401, -1315, -1315, -1315, -1315,   802,  4453,  4506,
    2011,  2001, -1315,  3270, -1315,  1401, -1315,  1401, -1315, -1315,
   -1315, -1315,  1401, -1315, -1315,   145, -1315, -1315, -1315, -1315,
    2008, -1315, -1315,   804,   308, -1315, -1315,   517,  1401, -1315,
   -1315,  2012,   773,  2014,  2015,  2016,    76,  2017, -1315, -1315,
   -1315, -1315, -1315, -1315, -1315,  2018,  1853,  1152, -1315,   773,
    1853, -1315,  2024,  2019,  1985, -1315, -1315,   500, -1315, -1315,
     645, -1315,   604,  2022, -1315, -1315,   373, -1315, -1315, -1315,
    4674, -1315, -1315,  1506, -1315, -1315, -1315,  1401,  1609, -1315,
    1401,  1604, -1315, -1315, -1315, -1315,  1658,  2025, -1315,   520,
    1944, -1315,  3533, -1315, -1315,  1950,   847,  4674,   859,  1951,
    1954,  1956,  1959,  1962,  1963,  1965,  1968,  1401,  1401,  1922,
   -1315,  3533, -1315, -1315,    93,  3502,  3533,  3533,  1961,  1284,
   -1315, -1315, -1315,  1401,   773, -1315, -1315,  1401, -1315,  1670,
   -1315,  1752,  3533,  1433,  3533,  1401, -1315,   773,   811, -1315,
    3533,   307,   517,  1401,   773,  1982, -1315,  2039, -1315,   479,
   -1315, -1315,   500,  2022, -1315,   500,  2009,  1090, -1315,  2052,
    1552, -1315,  2060,  1552,  1552, -1315, -1315, -1315, -1315, -1315,
    1656,  3533, -1315,  3533,  2066,  3533,  2067,  3533,  3533,  3533,
    3533,  3533,  3533,  3533,  3533,  3533,  2064,  2068,   886, -1315,
    2013, -1315,    86,  3399, -1315,   275,  3737,  4674, -1315, -1315,
   -1315, -1315, -1315,  2070,  4546,  4574,  2084,  4590,   773,   851,
   -1315,  4674,   517,  1401, -1315,  2031, -1315, -1315,  2092, -1315,
    2086,  2089,  2095,  2096,  2091, -1315, -1315,  3533,  2094,  3533,
    2097, -1315,   889,   892, -1315,  4627, -1315,   894, -1315,  4674,
     896,   930,  2020,  2021,   942,   944,   953,  2028, -1315,  3533,
      93,    93, -1315, -1315, -1315,    93,  1401, -1315,   773,   773,
    3533,   773,   773,   879, -1315, -1315,  1401, -1315, -1315, -1315,
   -1315,   426, -1315, -1315,  2098,  4674,  3533,  2100,  3533,  2110,
    3533,  2111,  3533,  3533,  2112,  3533,  2113,  3533,  2118,  3533,
    3533,  3533,  2119,  3533,  2120,  3533,  2124,  3533,  3533,   955,
   -1315, -1315, -1315,  2121,  2061, -1315,  2104, -1315,  3789, -1315,
    1012, -1315, -1315, -1315, -1315,  2129, -1315, -1315, -1315,  2125,
   -1315,  2126, -1315,   968, -1315,   972,   974, -1315, -1315, -1315,
     982, -1315,   987,   989,   994, -1315,  1009, -1315,  1021, -1315,
    1040,  1041, -1315,  3533,  2063,   773, -1315,  1433, -1315, -1315,
    2130, -1315,  2136,  2140,  2142,  2145,  2150,  2151,  3533,  2153,
    3533,  2154,  2155,  2157,  2167,  3533,  2081,  2165, -1315,  2149,
   -1315, -1315, -1315, -1315, -1315, -1315, -1315,  1046, -1315,  1048,
   -1315, -1315, -1315, -1315,  1054,  3533,  1401,   773,  2173,  2174,
    2176,  2093,  1164, -1315, -1315, -1315, -1315,  3533,  1355,  1062,
   -1315, -1315,  3533,  2101,  3533,  2102,  3533,  2103,  3533,  2114,
    3533,  2116,  3533,  2170, -1315
};

/* YYPGOTO[NTERM-NUM].  */
static const short int yypgoto[] =
{
   -1315, -1315, -1315, -1315, -1315, -1315, -1315, -1315, -1315, -1315,
   -1315, -1315, -1315,  1650,  1461, -1315, -1315,  1045,  1666, -1315,
    2188, -1315, -1315, -1315, -1315,  -255, -1315,  -264, -1315, -1315,
   -1315, -1315, -1315,   838,  2029, -1315,  2032, -1315,  1379,  -551,
   -1315,  -558, -1315,  -304,    14, -1315, -1315, -1315,  1833, -1315,
   -1315, -1315, -1315, -1315,  1856, -1315, -1315, -1315, -1315, -1315,
    1857, -1315, -1315, -1315, -1315, -1315, -1315, -1315, -1315, -1315,
   -1315, -1315,  1165,  -473,    21, -1315,    23, -1315,  1591, -1315,
      29,    33, -1315, -1315,    35, -1315,   -98,  1128, -1315,    -4,
   -1315, -1315,  -176,  2177, -1315, -1315, -1315,  -541,  -553,  -704,
   -1315,  1995,  1412,    34,  1365,  -431,  1206,  -223,   -46, -1315,
   -1315, -1315,  2187,   103, -1315,  1113, -1315, -1315, -1315,  -658,
   -1315,  1546,  1746,  -438, -1315,  -784,  -156,  1095,  1646, -1315,
   -1048,  -549,  -468, -1315, -1045,   981, -1315, -1315,    18,  2026,
    2030,    52,   -59, -1315, -1315, -1315, -1315, -1315,  1924, -1315,
   -1315, -1315,  1296, -1315,  -470,  1925,    -1, -1315, -1315,  1528,
   -1315,  1526, -1315, -1315, -1018,  -491,  -800, -1315, -1315, -1315,
     703, -1315,   648, -1315, -1315, -1315, -1315, -1315, -1315,  1291,
     218,  1894,  -712, -1315,  1112, -1315,   843, -1311, -1315, -1315,
   -1315,   848, -1315, -1315,   641, -1314, -1315,   -65,  1937, -1315,
   -1315,   -36,  -233, -1315, -1315, -1315, -1315, -1315, -1315, -1315,
     569, -1315, -1315,  -450, -1315, -1315, -1315, -1315,  -416,   -18,
    -720, -1063, -1315, -1315,  -377, -1315, -1230,  1161, -1315,   541,
   -1315, -1315, -1315, -1315, -1315, -1218,   805,   557, -1315, -1315,
   -1215, -1315, -1315, -1315,  1474, -1315, -1315, -1315,  -762, -1315,
    -677,  -739, -1315,  -708,   678,  1065, -1115,   957, -1315, -1315,
     840,  -487, -1315, -1315, -1315, -1315, -1315, -1315, -1315, -1315,
   -1315, -1315, -1315, -1315, -1315, -1315, -1315, -1315,  -236,   642,
   -1237,   706,   453,  -197,  1273, -1315, -1315,   756, -1315,  1102,
     839, -1315,   -71, -1315,  1859, -1315,   235,  1644,  -327,  -153,
    -106,  -285,  1414,   -81,  1636, -1315,  1391, -1315, -1315,    28,
    -536,  1719, -1315,  -112,     0,  1930,  2209,   551,   190,  2267
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If zero, do what YYDEFACT says.
   If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -800
static const short int yytable[] =
{
       6,   639,   659,    26,    26,   415,   750,   205,   228,   323,
     425,   415,   818,   687,     5,   915,  1213,   828,   125,   751,
    1008,  1037,   528,   826,   701,   819,   393,    45,   200,    47,
     115,   958,   454,  1380,   835,    49,   999,  1000,  1002,    50,
     387,    52,   235,   686,   964,  1382,   665,   669,  1384,  1055,
     217,  1262,   857,   220,  1249,   982,   521,   552,   864,   867,
     352,   146,   119,   344,   856,   688,   997,   997,   997,   997,
     863,   866,   353,  1269,   134,   320,  1330,   309,   240,   241,
    1438,    95,   474,  1489,   760,   207,   981,   813,  1494,  1491,
     752,  1475,   474,   628,   630,   390,  1529,  1240,    71,    -2,
     677,  1591,     8,  1529,   211,   213,   551,   208,   210,   290,
     239,   596,  1025,   581,    97,   600,   602,   224,   591,   592,
      72,   394,     9,  1113,   153,  -262,  1273,  1274,     8,   154,
     155,  -262,   156,   219,   594,   222,    15,    16,   306,    17,
     216,    14,   119,   119,   832,  -262,   927,   396,     9,    63,
       1,  1031,  1032,   162,   288,     1,   405,  1033,  1031,  1032,
    1476,   245,   242,   216,  1033,    67,   348,  1034,   349,   483,
     484,   -59,  1085,   302,  1034,  1560,   391,   887,  1563,  1096,
     593,  1564,   297,   365,   373,   196,  1491,    68,   888,    98,
    1244,    12,   212,   214,   582,   526,    62,     1,   354,   902,
       1,   174,   723,   422,     1,   225,    70,  1363,    15,    16,
       1,    17,     1,  1449,     1,    98,   687,  1386,     1,    96,
    1390,     1,   106,   111,   121,   397,   485,     1,   128,   522,
     106,   137,   611,   612,  1037,   295,  1215,   718,   613,  -260,
     525,  1380,   492,   450,   343,  1304,   686,   747,   486,   487,
     243,   903,   150,  1382,   409,    12,  1384,   916,   508,  -260,
     475,  1142,  1143,  1144,   403,   180,   182,   119,   925,   889,
     225,   119,  1229,   511,  1572,  1156,  1573,   121,   343,    96,
      96,  1580,  1581,  1582,   443,  1584,  1585,  1586,  1587,   106,
    1595,   106,   552,   119,   455,   456,   552,  1657,   552,  1190,
     388,   389,   919,   238,   121,   121,  1155,   299,   825,  1470,
     496,   496,  1072,   516,   506,   517,   121,  1150,  1111,   626,
     293,  1069,  1204,  1205,  1206,  1459,  1485,   129,  1394,   106,
    1189,   121,   150,   848,   849,  1395,  1528,   614,   693,  1396,
     618,   847,   619,  1397,   850,   851,   852,   853,   235,  1042,
    1044,     8,   418,  1398,  1365,   438,   642,   547,   175,   712,
     435,   365,     8,   752,   436,   439,   189,  1241,   437,  1102,
    1466,     9,  -159,   511,  1496,   365,   373,   725,   216,   365,
     365,  1395,     9,   605,     1,  1396,    45,   621,    47,  1397,
     315,   398,  -159,  1673,    49,   300,   121,    96,    50,  1398,
      52,  1681,    96,   415,    96,   121,   753,   351,   216,    98,
     106,   375,  1300,  1215,   419,   106,  1380,   376,   615,    65,
       1,  1555,   416,   417,     8,  1287,  1399,   510,  1382,   121,
     216,  1384,   944,   121,  1395,   427,     1,   970,  1396,   869,
    1654,  1295,  1299,   997,     9,   441,   121,   902,   721,   675,
      66,  1387,  1398,   400,  1255,   121,   121,   121,   457,   970,
     408,  1118,   747,   670,     8,   410,  1125,   440,   622,   872,
     216,   674,  1399,   421,  1639,   589,  1105,   199,   316,   214,
     443,   689,   373,   423,     9,  1604,   424,  1395,   431,   511,
     489,  1396,   971,  1225,   972,   121,  1559,   150,  1224,  1104,
     490,   150,   150,  1337,  1053,  1398,   150,   121,  1395,   749,
     758,   740,  1396,   811,   971,   817,   972,  1356,  1357,  1159,
    1358,   552,   752,  1233,  1359,  1399,  1398,     1,   215,   511,
       8,     8,     1,    12,   205,   216,  1647,   216,  1649,  1509,
    1652,   214,     8,  1037,   552,   552,  1424,   548,   225,  1170,
       9,     9,   493,   225,   747,    62,   113,   942,   580,  1413,
       8,   871,     9,   481,  1260,   753,   617,   232,  1706,   482,
    1048,   243,   365,   666,   243,   829,   432,   610,  1399,   744,
       9,   624,   373,   373,   632,   120,  1285,   694,   225,   121,
     997,   121,   741,  1062,  1063,  1418,   365,   365,   365,  1399,
     365,   858,   365,   218,   868,   977,  1018,   862,   865,   238,
    1731,  1064,  1395,  1160,  1161,  1162,  1396,     1,  1510,  1492,
    1397,   747,  1739,   178,   641,   979,   980,  1743,  1070,  1745,
    1398,  1747,  1073,  1749,   922,  1751,  1141,  1753,   120,   943,
     316,  1139,   121,  1160,  1161,  1162,  1118,   675,  1199,   928,
     664,   675,    65,  1395,   214,   673,   830,  1396,  1023,  1215,
     761,  1397,  1203,   814,  1733,   120,   120,   670,   221,   225,
     675,  1398,   243,   670,   251,   316,   223,   289,   692,  1235,
     131,  1503,  1058,   720,   689,   511,   833,   154,   155,   859,
    1250,  -260,   120,   469,  1019,   230,  1256,  -260,   288,   859,
    1149,   511,   470,  1399,  1490,   968,   939,   941,  1526,  1500,
     975,  -260,   997,  1504,  1738,   923,   859,   288,  1477,    73,
     859,    74,   695,    75,   432,   931,  -260,  -260,   152,   153,
     582,  1484,   696,     8,   154,   155,  1019,   156,  1264,   997,
    1527,   157,   158,   959,  1399,  1280,   159,   231,  1282,   812,
     432,   946,  1283,     9,   233,   160,   161,   120,   162,  1292,
      78,  1050,  1293,  1294,   580,   580,   120,   859,  1254,  -711,
     244,  -194,  1150,  1029,  1334,    79,   836,  -194,  1251,   129,
     839,  -260,  1335,  -260,  1336,  1361,  1060,   902,  -194,  1075,
     120,  -194,  1172,  1172,   120,   610,  1177,  1178,  1360,  1076,
    1353,   610,   610,    80,    81,  -260,   511,   120,  1411,  1188,
     121,   746,  1453,  1221,  1465,   226,   120,   120,   120,  1233,
    1147,     6,  -131,  1051,     1,   365,  1265,   901,   216,   446,
    1306,  -711,   511,  1281,     7,  1035,  1138,  1126,  1483,  1364,
    1284,   245,  -131,   245,   447,     8,  1267,   432,   365,   365,
     432,   432,   433,   163,   164,   246,   120,   584,   585,  1099,
     121,  -194,   432,   976,  1514,     9,  1201,  1061,   120,   252,
     432,     1,   432,  1251,   475,   904,  1516,  1257,  1093,   121,
     511,   475,  1097,   248,  1098,   675,   933,  1217,  -262,  1219,
    1602,   154,   155,   226,  -262,  1550,   432,   227,   675,  1228,
     432,     1,  1251,  1588,  1326,   534,  1619,   675,  -262,  1621,
     366,  1624,   747,  1626,   587,   670,  1022,   -70,   511,     1,
     -70,   -70,  1258,   584,   585,  1043,  1045,  1268,     1,  1119,
    1121,   955,  1037,   960,   962,  1605,   588,  1056,  1215,     1,
    1200,   -70,    80,    81,   969,  1515,   -70,  1628,  -792,  -792,
     120,     8,   120,   984,  1135,   141,  1135,  1517,   296,  1632,
    1478,  1634,   680,  1651,   984,   984,   984,   984,   152,   153,
    1636,     9,  1682,     8,   154,   155,  1150,   156,    98,     1,
     587,   157,   158,   251,  1589,  1692,   159,  1620,   291,  1693,
    1622,  1694,  1625,     9,  1627,   160,   161,     8,   162,  1695,
     758,   812,   588,   120,  1696,  1253,  1697,     1,   366,   902,
    -792,  1699,   448,  1232,  1047,   -70,   902,     9,   -70,   -70,
     580,   321,   322,  1546,   367,  1057,  1701,   449,  1629,   929,
     415,   961,  1540,   294,     6,   930,     6,     1,  1702,   -70,
    1633,  1592,  1635,   298,   -70,   471,  -792,  -792,  1035,  1067,
    1035,  1637,  1067,  1683,   472,   111,  1252,  1703,  1704,   681,
    1345,  1549,  1347,  1728,   303,  1729,  1625,   555,   987,   475,
    1625,  1730,  1625,  1352,   119,   905,    31,    32,    33,  1741,
    1625,   553,  1617,   988,   728,  1625,   675,  1698,   731,   732,
     554,   301,  1700,   163,   164,  1103,  1688,     8,  1395,  1640,
    1641,   206,  1396,  1368,  1642,   310,  1397,  1625,  -792,    -3,
    1331,    -3,   670,    -3,  1263,  1431,  1398,     9,  1431,  1625,
     312,  1431,  1431,  1441,  1442,  1431,  1431,  1431,  1446,  1659,
    1135,  1661,   561,    40,   902,     1,  1135,   959,  1625,  1705,
       1,   314,  1031,  1032,  1625,  1216,  1625,  1218,  1033,  1566,
       8,  1140,  1625,   584,   585,    42,   317,    89,  1034,   347,
    1742,  1344,   114,  1146,   573,   356,    -3,    -3,     8,    -3,
       9,   120,   379,   984,   975,   357,   984,  1046,   984,   984,
     984,   984,   984,   984,   984,     1,  1650,  1354,     9,  1399,
     142,   374,   100,   984,   984,   984,   984,   984,  1481,   584,
     585,   477,   478,  -206,   586,     1,   183,   380,    98,   812,
     587,  1467,   184,     6,   535,   381,  1259,   535,   382,   475,
     475,   289,   475,  -206,     8,   185,   475,  1035,   401,  1031,
    1032,   383,   588,  1434,   384,  1033,  1222,  1709,   675,   580,
     289,   580,   385,   536,     9,  1034,   733,  1331,  1230,   537,
     538,   499,   537,   538,    98,   670,   587,  -792,  -792,   479,
     245,  -792,  -792,  -792,  -792,   480,  -792,   500,   176,   386,
    -792,  -792,   102,     8,   399,  -792,   443,   107,   588,   808,
     534,   420,  -792,     8,  -792,  -792,   949,  -792,     8,  1103,
       8,  1385,     1,     9,   190,   430,   216,   191,   192,   251,
    1086,     8,  1535,     9,   434,     8,   152,   153,     9,  1232,
       9,     8,   154,   155,   444,   156,  1031,  1032,    88,   157,
     158,     9,  1033,   445,   159,     9,  1553,  1288,  1289,  1290,
     113,     9,  1034,   160,   161,   451,   162,   727,  1297,     8,
     984,   984,   122,     6,   473,  1309,   675,  1310,  1275,  1031,
    1032,  1434,   452,  -117,  1275,  1033,   984,  1035,  1214,     9,
     453,  1367,  -792,  -792,   133,  1034,   458,   251,  1539,   494,
     584,   585,  1471,  -117,   135,     8,   670,   138,     1,     1,
    1535,  1087,  -792,  -792,  1663,     8,  1665,  1666,  -200,  1263,
     226,  1670,  1333,  1672,   861,     9,  1606,  1676,   491,  1678,
    1341,  1680,  1343,   523,   532,     9,   672,  1346,  -200,  1348,
    1349,   509,     1,     8,     8,     8,   498,     8,  1351,   573,
    1031,  1032,   574,     8,  -792,    98,  1033,   587,  1082,   513,
    1083,   163,   164,     9,     9,     9,  1034,     9,   121,  1740,
    1583,  1103,  1103,     9,   518,     8,  1541,   998,   575,   588,
    1369,     1,   519,   121,     6,   529,  1388,   530,     8,     6,
     675,    86,  1717,  1393,  1719,     9,   514,   515,  1035,  1724,
     113,   960,     8,  1035,  1407,  1408,    87,   670,     9,   531,
    -799,   168,   543,     1,  1263,   549,  1412,   246,   984,    88,
    1482,  -799,     9,   984,   571,  1001,  1392,   572,   728,  1385,
     573,   443,   984,   550,     8,   984,     8,     8,   984,   984,
     984,   984,   984,   984,   984,   984,   251,   251,   251,   154,
     155,     8,  1452,  1498,     9,   206,     9,     9,   815,   575,
     190,   675,     6,   191,   192,  1460,   583,  1461,    88,  -124,
     190,     9,  1462,   191,   192,   216,  1035,     8,  1263,   651,
    1674,   735,   729,   216,   597,   152,   153,   598,  1468,  -124,
       8,   154,   155,   603,   156,   154,   155,     9,   157,   158,
     193,   194,   195,   159,   584,   585,   324,   251,   251,   251,
       9,   604,   160,   161,  1552,   162,   736,   738,   153,   391,
       6,     6,     8,   154,   155,     6,   156,   120,  1646,  1471,
     620,  1471,   670,  1471,  1035,  1035,   633,   984,     8,  1035,
     984,   984,     9,   623,     8,   573,     8,   162,   305,     8,
    1417,   625,   154,   155,  1223,    88,  1501,   649,     9,   747,
     406,   587,   675,   113,     9,   650,     9,   984,   984,     9,
     413,   414,     8,   586,   575,  1243,   112,    98,  1243,  1243,
     245,  1301,     8,   588,  1128,  1302,   305,  1542,   426,    88,
     429,   121,     9,   121,  1426,  1548,  1506,   113,  1427,    88,
    1507,  1543,     9,  1554,  1385,   197,   198,   152,   153,   654,
     163,   164,     8,   154,   155,  1646,   156,   842,   843,   661,
     157,   158,  1196,  1197,  1171,   159,   251,  1175,  1176,  1091,
    1092,   656,     9,   663,   160,   161,   671,   162,   679,  1185,
    1186,  1187,   152,   153,   704,   443,   705,     8,   154,   155,
     706,   156,   707,   710,   713,   157,   158,  1471,   715,   714,
     159,   643,     6,   716,   719,   722,   726,     9,     6,   160,
     161,   742,   162,  1607,   729,   743,  1035,   744,   745,   822,
     520,   823,  1035,   824,   831,   837,   844,   840,   251,   845,
     152,   153,   527,   429,     8,     8,   154,   155,  1435,   156,
     860,  1439,  1440,   157,   158,  1443,  1444,  1445,   159,   854,
     855,   622,   251,   390,     9,     9,  1341,   160,   161,   113,
     162,   876,   878,   879,   882,   898,  1653,   883,   884,   120,
     644,   645,   163,   164,   891,   527,   914,   917,   926,   616,
     921,   932,   934,   935,   289,   936,   937,  1371,   258,   259,
     260,  1372,  1373,  1374,   945,   948,   950,   951,   952,   268,
    1375,   953,   954,  1376,   629,   631,   121,   163,   164,   956,
     963,   978,   985,   986,   638,  1012,  1011,   640,   644,   645,
     989,   990,   648,   991,   992,   993,   994,  1003,   652,   653,
    1004,   655,  1005,   657,  1006,   658,  1007,   660,  1013,  1014,
    1016,  1015,   662,  1017,  1021,  1024,  1030,   121,  1049,  1065,
    1071,  1074,  1108,   621,  1094,   163,   164,   342,   345,  1109,
     358,   678,  -792,  1077,   683,  -792,  1078,  1112,  1122,  1123,
    1127,  -792,   696,  1139,  1154,   527,  1137,  1138,   702,  1169,
    1157,  1150,  1179,  1180,  1181,  1182,  1732,  1183,  1184,  1226,
     709,  -792,  1208,   342,  1234,   711,   527,  -792,  -792,  -792,
    1209,  1210,   861,  1236,  1237,  -792,  -792,  -792,  -792,  -792,
    -792,  1239,   -55,   724,   527,  1279,  -792,  1238,   255,  -792,
    -792,  1266,  -792,   152,   153,  1113,  1291,  1298,     8,   154,
     155,  1272,   156,  1303,  1305,  1311,   157,   158,  1310,  1342,
    1327,   159,  1350,  1312,  -792,   254,  -792,   255,     9,  1314,
     160,   161,  1315,   162,  1366,  1370,  1389,  1405,  1316,  1406,
    -792,  1317,  -792,  -792,  1318,  -792,  1319,  -792,  1409,  1320,
    1414,  1415,  1416,  1420,  1421,  1422,   763,  1321,  1447,  1322,
    1323,  1324,  1432,  1448,   251,  -792,   676,     1,  1325,  1450,
    1451,  1456,   289,  1457,   120,  1464,    28,  1479,  1469,    29,
    1472,  1473,  1474,  1508,  1486,     8,   527,   873,  1495,   413,
    1480,  1487,  1511,   342,  1488,  1538,  1556,  1557,  1513,  1518,
     873,   358,  1519,  -792,  1520,     9,  -792,  1521,   885,   886,
    1522,  1523,  -792,  1524,   890,   345,  1525,  1567,  1565,    30,
      31,    32,    33,    34,    35,  1569,  1574,  1576,   163,   164,
      36,  1498,  -792,    37,    38,  1501,    39,  1597,  -792,  -792,
    -792,   918,  1590,   920,  1600,  1608,  -792,  -792,  -792,  -792,
    -792,  -792,  1609,  1610,  1611,  1612,  -448,  -792,  1613,  1616,
    -792,  -792,  1618,  -792,  1686,  1658,     8,  1660,  1630,  1631,
    1662,  1664,  1667,  1669,   527,   342,  1638,    40,  1671,  1675,
    1677,    41,   342,   342,  1679,  -792,     9,  -792,  1684,  1689,
    1685,   113,  1690,  1691,  1707,   342,  1711,  1710,   342,    42,
    1712,  -792,  1713,  -792,  -792,  1714,  -792,   599,  -792,  -792,
    1715,  1716,  -792,  1718,  1720,  1721,  1727,  1722,  -792,  1371,
     258,   259,   260,  1372,  1373,  1374,  -792,  1723,     1,  1725,
    1726,   268,  1375,  1734,  1735,  1376,  1736,  1754,  -792,   734,
     947,  1737,    27,  1463,  -792,  -792,  -792,   289,   563,  1744,
    1746,  1748,  -792,  -792,  -792,  -792,  -792,  -792,   739,  1052,
     108,  1220,  1750,  -792,  1752,   377,  -792,  -792,   378,  -792,
     411,   564,   565,  1020,  1066,  1198,   132,  1261,   690,   834,
     924,  1124,  1362,   940,   938,   495,  1594,   497,   120,   342,
     404,  -792,   402,  -792,  1643,  1054,   342,  1136,  1286,  1497,
    1493,   546,  1656,   507,  1708,  1247,  1329,  -792,  1010,  -792,
    -792,  1505,  -792,  1174,  -792,  1425,  1571,  1668,  1313,   875,
    1081,  1512,   880,   524,   151,  1068,    64,     0,   627,     0,
       0,     0,  -792,     0,     1,     0,     0,     0,     0,     0,
       0,     0,  1079,  1079,     0,     0,     0,     0,     0,     0,
       0,   648,     0,   648,     0,     0,     0,   527,   527,   527,
       0,     0,  1095,     0,     0,     0,   152,   153,     0,     0,
       0,     8,   154,   155,     0,   156,     0,     0,     0,   157,
     158,  1106,     0,  1107,   159,   342,     0,  1110,     0,     0,
       0,     9,     0,   160,   161,     0,   162,     0,   342,   702,
     342,     0,     0,   709,     0,     0,     0,   342,     0,   342,
       0,     0,     0,     0,     0,     0,     0,   342,     0,     0,
       0,   342,   342,     0,   342,     0,   342,   342,     0,   342,
       0,   342,     0,     0,     0,     0,     0,     0,     0,  1242,
       0,  1087,     0,     0,     0,     0,     0,   342,     0,  1158,
       0,  1248,   342,     0,   154,   155,     0,     0,     0,     0,
       0,   325,   326,   327,   328,   329,   330,   331,   332,   333,
       0,   342,     0,     0,     0,   334,   335,     0,   342,     0,
     342,     0,  -106,   140,     0,  -106,     0,     0,  -106,  -106,
    -106,   163,   164,   342,  -106,  -106,  -106,     0,  -106,     0,
       0,     0,  -106,  -106,     0,     0,     0,  -106,     0,     0,
       0,     0,     0,     0,  -106,     0,  -106,  -106,     0,  -106,
    -106,  -106,  -106,     0,     0,     0,     0,     0,  -106,  -106,
    -106,  -106,  -106,  -106,  -106,  -106,  -106,     0,  -106,  -106,
     336,     0,  -106,  -106,     0,  -106,     0,  -106,  -106,     0,
       0,     0,   527,  -106,     0,   527,   527,     0,     0,     0,
       0,  -106,  -106,  -106,  -106,     0,  -106,  -106,     0,  -106,
       0,   337,   338,   339,   340,     0,     0,     0,     0,     0,
       0,     0,     0,  -106,     0,  -106,  -106,  1271,  -106,  -106,
    -106,  -106,  -106,     0,  -106,     0,     0,     0,     0,     0,
       0,     0,   601,     0,  -792,     0,     0,  -792,  -106,     0,
    -106,     0,     0,  -792,  -106,  -106,     0,     0,     0,     0,
       0,  1307,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  -792,     0,     0,     0,     0,     0,  -792,
    -792,  -792,   342,     0,     0,     0,     0,  -792,  -792,  -792,
    -792,  -792,  -792,     0,   342,   342,     0,     0,  -792,   342,
       0,  -792,  -792,     0,  -792,     0,     0,     0,     0,     0,
       0,     0,  1338,  1339,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  -792,   342,  -792,   342,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  -792,     0,  -792,  -792,     0,  -792,     0,  -792,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   459,     0,     0,     0,  -792,     0,     1,
       0,     0,     0,     0,  -502,     0,  -502,   460,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1153,  -502,     0,  -502,  -502,  1410,     0,     0,     0,  -502,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  -502,     0,     0,     0,     0,     0,     0,     0,
    1437,  1437,     0,     0,     0,     0,     0,  -502,  -502,  -502,
    -502,  -502,  -502,  -502,     0,  -502,  -502,  -502,  -502,  -502,
    -502,     0,     0,  -502,     0,  -502,   461,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   464,     0,     0,     0,
       0,     0,     0,   342,     0,     0,     0,  -792,     0,  -792,
     465,     0,     0,     0,     0,     0,     0,   342,     0,     0,
       0,     0,     0,     0,  -792,     0,  -792,  -792,   342,     0,
    -502,     0,  -792,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   342,  -792,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   342,   342,     0,     0,   342,
    -792,  -792,  -792,  -792,  -792,  -792,  -792,   466,  -792,  -792,
    -792,  -792,  -792,  -792,     0,     0,  -792,     0,  -792,     0,
       0,     0,     0,     0,   152,   153,     0,     0,     0,     8,
     154,   155,     0,   156,     0,     0,     0,   157,   158,   527,
    1536,  1537,   159,     0,     0,     0,     0,   342,     0,     9,
       0,   160,   161,  1544,   162,     0,  1545,     0,  1547,     0,
       0,     0,  1084,     1,  1551,     0,     0,     0,     0,     0,
       0,   474,     0,  -792,     0,  -792,     0,     0,  1153,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    -792,     0,  -792,  -792,     0,  1437,     0,  1437,  -792,  1575,
       0,  1579,  1437,  1437,  1437,     0,  1437,  1437,  1437,  1437,
       0,  -792,     0,     0,     0,     0,     0,   527,     0,     0,
       0,     0,     0,     0,     0,     0,  -792,  -792,  -792,  -792,
    -792,  -792,  -792,     0,  -792,  -792,  -792,  -792,  -792,  -792,
       0,     0,  -792,     0,  -792,   343,     0,     0,     0,   163,
     164,  1615,     0,  1615,     0,     0,     0,     0,     0,     0,
     342,     0,     0,     0,     0,     0,     0,   124,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  -792,     0,
    -792,     0,     0,     0,  1648,     0,     0,     0,     0,     1,
       0,     0,     0,     0,     0,  -792,   342,  -792,  -792,     0,
    1615,     0,  1615,  -792,  1579,     0,  1579,  1579,     0,  1579,
       0,  1579,     0,  1579,  1437,     0,  -792,  1579,     0,  1579,
       0,  1579,  1437,     0,     0,     0,     0,   342,   342,     0,
       0,  -792,  -792,  -792,  -792,  -792,  -792,  -792,     0,  -792,
    -792,  -792,  -792,  -792,  -792,   152,   153,  -792,     0,  -792,
       8,   154,   155,     0,   156,     0,   430,     0,   157,   158,
       0,     0,     0,   159,     0,     0,     0,     0,     0,  1211,
       9,  -792,   160,   161,  -792,   162,     0,     0,     0,     0,
    -792,     0,  1579,  1212,  1579,     0,     0,     0,     0,  1579,
       0,     0,     0,     0,     1,     0,     0,     0,     0,   342,
    -792,     0,  1499,     0,     0,     0,     0,  1502,     0,     0,
       0,     0,     0,     0,  -792,  -792,  -792,  -792,  -792,  -792,
       0,     0,     0,     0,     0,  -792,   342,     0,  -792,  -792,
       0,  -792,     0,  1031,  1032,     0,     0,   152,   153,  1033,
       0,   696,     8,   154,   155,     0,   156,     0,     0,  1034,
     157,   158,   820,     0,  -377,   159,     0,  -377,     0,     0,
       0,     0,     9,  -377,   160,   161,     0,   162,     0,     0,
     163,   164,  -792,     0,     0,     0,  -792,     0,     0,     0,
       0,     0,     0,  -377,     0,     0,     0,     0,     0,  1568,
       0,     0,  1570,  1502,  -792,     0,     1,  -377,  -377,  -377,
    -377,  -377,  -377,     0,     0,     0,     0,     0,  -377,     0,
       0,  -377,  -377,     0,  -377,     0,  -377,  -377,     0,     0,
       0,     0,  -377,     0,     0,   342,   342,     0,     0,     0,
       0,     0,  -377,   342,   342,     0,   342,     0,     0,     0,
     342,  1458,     0,  -792,     0,     0,  -792,     0,     0,     0,
       0,     0,  -792,     0,     0,  -377,     0,     0,     0,  -377,
       0,     0,   163,   164,   342,     0,     0,     0,   342,     0,
       0,     0,  -792,     0,     0,     0,     0,  -377,     0,  -377,
       0,     0,     0,     0,     0,     0,  -792,  -792,  -792,  -792,
    -792,  -792,     0,     0,     0,     0,     0,  -792,     0,     0,
    -792,  -792,     0,  -792,   342,  1031,  1032,     0,     0,     0,
       0,  1033,     0,   152,   153,     0,     0,     0,     8,   154,
     155,  1034,   156,     0,     0,     0,   157,   158,     0,     0,
       0,   159,     0,     0,     0,     0,     0,   342,     9,     0,
     160,   161,     0,   162,  -792,   152,   153,     0,  -792,     0,
       8,   154,   155,     0,   156,     0,     0,     0,   157,   158,
       0,     0,     0,   159,     0,     0,  -792,     0,     1,     0,
       9,     0,   160,   161,     0,   162,   152,   153,     0,     0,
       0,     8,   154,   155,     0,   156,  1245,     0,  1087,   157,
     158,     0,     0,     0,   159,     0,     0,     0,     0,     0,
       0,     9,     0,   160,   161,     0,   162,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   152,   153,  1246,     0,
    1087,     8,   154,   155,     0,   156,     0,     0,     0,   157,
     158,     0,     0,     0,   159,     0,     0,     0,   163,   164,
       0,     9,     0,   160,   161,     0,   162,   152,   153,  1593,
       0,  1532,     8,   154,   155,     0,   156,  1270,     0,     0,
     157,   158,     0,     0,     0,   159,     0,     0,     0,     0,
     163,   164,     9,     0,   160,   161,     0,   162,     0,   152,
     153,     0,     0,     0,     8,   154,   155,     0,   156,     0,
       0,  1087,   157,   158,     0,     0,     0,   159,     0,     0,
       0,   163,   164,     0,     9,     0,   160,   161,     0,   162,
     152,   153,     0,     0,     0,     8,   154,   155,     0,   156,
       0,     0,     0,   157,   158,     0,     0,     0,   159,     0,
       0,     0,     0,     0,     0,     9,     0,   160,   161,     0,
     162,   163,   164,     0,     0,     0,     0,     0,     0,     0,
     152,   153,     0,     0,  1532,     8,   154,   155,     0,   202,
       0,     0,     0,   157,   158,     0,     0,     0,   159,   762,
       0,     0,   163,   164,     0,     9,     0,   160,   161,     0,
     162,   152,   153,     0,   763,     0,     8,   154,   155,     0,
    1191,     0,     0,     0,   157,   158,     0,     0,     0,   159,
       0,     0,     0,     0,   163,   164,     9,     0,   160,   161,
       0,   162,   152,   153,     0,     0,     0,     8,   154,   155,
       0,  1328,     0,     0,     0,   157,   158,     0,     0,     0,
     159,     0,     0,   764,     0,   163,   164,     9,     0,   160,
     161,     0,   162,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   765,   559,   766,   767,   768,   769,
     770,   771,   772,     0,     0,    28,     0,     0,    29,     0,
       0,     0,     0,   773,     8,   163,   164,     0,     0,     0,
       0,   774,   775,     0,     0,     0,     0,   776,   777,   778,
     779,   780,   781,   782,     9,     0,     0,     0,     0,     0,
     555,   556,   557,     0,     0,     0,   163,   164,    30,    31,
      32,    33,    34,    35,     0,     0,     0,  1596,     0,    36,
     154,   155,    37,    38,     0,    39,     0,   325,   326,   327,
     328,   329,   330,   331,   332,   333,     0,   163,   164,     0,
       0,   334,   335,     0,     0,     0,     0,   558,     0,   559,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   560,     0,   561,    40,     0,   562,  1687,
      41,     0,   154,   155,     0,     0,     0,     0,     0,   325,
     326,   327,   328,   329,   330,   331,   332,   333,    42,   634,
     635,   636,     0,   334,   335,   637,   325,   326,   327,   328,
     329,   330,   331,   332,   333,     0,   336,   634,   635,   636,
     334,   335,     0,   877,   325,   326,   327,   328,   329,   330,
     331,   332,   333,     0,     0,     0,     0,     0,   334,   335,
       0,     0,     0,     0,     0,     0,     0,   337,   338,   339,
     340,     0,   634,   635,   636,     0,     0,     0,   881,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   336,   634,
     635,   636,     0,   334,   335,  1227,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   336,     0,     0,     0,     0,
     334,   335,     0,     0,     0,     0,     0,     0,     0,   337,
     338,   339,   340,   336,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   337,   338,   339,   340,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   337,   338,   339,   340,   336,   634,
     635,   636,     0,     0,     0,  1423,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   336,     0,     0,     0,     0,
     334,   335,     0,     0,     0,     0,     0,     0,     0,   337,
     338,   339,   340,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   154,   155,   395,   337,   338,   339,   340,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   154,
     155,     0,     0,     0,   334,   335,   325,   326,   327,   328,
     329,   330,   331,   332,   333,     0,     0,     0,     0,     0,
     334,   335,     0,   512,     0,   336,   154,   155,   717,     0,
       0,     0,     0,   325,   326,   327,   328,   329,   330,   331,
     332,   333,     0,     0,     0,     0,     0,   334,   335,     0,
       0,     0,     0,   154,   155,   870,   337,   338,   339,   340,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   336,
       0,     0,     0,     0,   334,   335,     0,     0,     0,     0,
       0,     0,     0,   154,   155,   336,     0,     0,     0,   881,
     325,   326,   327,   328,   329,   330,   331,   332,   333,     0,
     337,   338,   339,   340,   334,   335,     0,     0,     0,     0,
       0,     0,   336,   634,   635,   636,   337,   338,   339,   340,
     325,   326,   327,   328,   329,   330,   331,   332,   333,     0,
       0,     0,     0,     0,   334,   335,     0,     0,     0,   336,
       0,     0,     0,   337,   338,   339,   340,     0,     0,     0,
       0,     0,     0,   154,   155,     0,     0,   892,     0,     0,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   336,
     337,   338,   339,   340,   334,   335,   154,   155,     0,     0,
     893,     0,     0,   325,   326,   327,   328,   329,   330,   331,
     332,   333,     0,     0,     0,     0,     0,   334,   335,   336,
     337,   338,   339,   340,   154,   155,     0,     0,   894,     0,
       0,   325,   326,   327,   328,   329,   330,   331,   332,   333,
       0,     0,     0,     0,     0,   334,   335,     0,     0,     0,
     337,   338,   339,   340,   154,   155,     0,     0,   895,   336,
       0,   325,   326,   327,   328,   329,   330,   331,   332,   333,
       0,     0,     0,     0,     0,   334,   335,     0,     0,     0,
       0,     0,   336,     0,     0,     0,     0,     0,     0,     0,
     337,   338,   339,   340,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     336,     0,     0,   337,   338,   339,   340,   154,   155,     0,
       0,   896,     0,     0,   325,   326,   327,   328,   329,   330,
     331,   332,   333,     0,     0,     0,     0,     0,   334,   335,
     336,   337,   338,   339,   340,   154,   155,     0,     0,   899,
       0,     0,   325,   326,   327,   328,   329,   330,   331,   332,
     333,     0,     0,     0,     0,     0,   334,   335,     0,     0,
       0,   337,   338,   339,   340,   154,   155,     0,     0,   900,
       0,     0,   325,   326,   327,   328,   329,   330,   331,   332,
     333,     0,     0,     0,     0,     0,   334,   335,   154,   155,
       0,     0,  1308,   336,     0,   325,   326,   327,   328,   329,
     330,   331,   332,   333,     0,     0,     0,     0,     0,   334,
     335,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   336,     0,     0,   337,   338,   339,   340,   154,   155,
       0,     0,  1391,     0,     0,   325,   326,   327,   328,   329,
     330,   331,   332,   333,     0,     0,     0,     0,     0,   334,
     335,   336,   337,   338,   339,   340,   154,   155,     0,     0,
    1454,     0,     0,   325,   326,   327,   328,   329,   330,   331,
     332,   333,     0,     0,   336,     0,     0,   334,   335,     0,
       0,     0,   337,   338,   339,   340,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   337,   338,   339,   340,   154,
     155,     0,     0,  1455,   336,     0,   325,   326,   327,   328,
     329,   330,   331,   332,   333,     0,     0,     0,     0,     0,
     334,   335,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   336,     0,     0,   337,   338,   339,   340,   154,
     155,     0,     0,  1598,     0,     0,   325,   326,   327,   328,
     329,   330,   331,   332,   333,     0,     0,     0,     0,     0,
     334,   335,     0,   337,   338,   339,   340,   154,   155,     0,
       0,  1599,     0,     0,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   154,   155,   336,     0,  1601,   334,   335,
     325,   326,   327,   328,   329,   330,   331,   332,   333,     0,
       0,     0,     0,     0,   334,   335,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   337,   338,   339,   340,
     154,   155,     0,     0,     0,   336,     0,   325,   326,   327,
     328,   329,   330,   331,   332,   333,     0,     0,     0,     0,
       0,   334,   335,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   336,     0,     0,   337,   338,   339,   340,
       0,     0,     0,     0,     0,     0,     0,   154,   155,   336,
       0,     0,     0,     0,   325,   326,   327,   328,   329,   330,
     331,   332,   333,     0,   337,   338,   339,   340,   334,   335,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     337,   338,   339,   340,     0,  1623,   336,     8,     0,   253,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   254,     0,   255,     9,     0,     0,
       0,     0,   113,   555,   591,   592,     0,   337,   338,   339,
     340,   905,    31,    32,    33,   256,     0,     0,     0,     0,
       0,     0,     0,   336,     0,     0,     0,     0,     0,     0,
     257,   258,   259,   260,   261,   262,   263,     0,   264,   265,
     266,   267,   268,   269,     0,     8,   270,   253,   271,     0,
       0,     0,     0,     0,   337,   338,   339,   340,     0,     0,
       0,     0,   254,     0,   255,     9,   593,     0,   561,    40,
     113,   555,     0,     0,     0,     0,     0,     0,     0,   905,
      31,    32,    33,   256,     0,     0,     0,     0,     0,     0,
       0,    42,     8,   763,     0,     0,     0,     0,   257,   258,
     259,   260,   261,   262,   263,     0,   264,   265,   266,   267,
     268,   269,     9,     0,   270,     0,   271,   113,   555,     0,
       0,     0,     0,     0,     0,     0,   905,    31,    32,    33,
       0,     0,     0,     0,     0,     0,   561,    40,     0,     0,
       0,     0,   764,     0,     0,  1371,   258,   259,   260,  1372,
    1373,  1374,     0,     0,     0,     0,     0,   268,  1375,    42,
       0,  1376,     0,  1009,   559,   766,   767,   768,   769,   770,
     771,   772,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   773,   561,    40,     0,     0,     0,     0,     0,
     774,   775,     8,     0,   253,     0,   776,   777,   778,   779,
     780,   781,   782,     0,     0,     0,    42,     0,     0,   254,
       0,   255,     9,     0,     0,     0,     0,   113,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     256,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   257,   258,   259,   260,   261,
     262,   263,     0,   264,   265,   266,   267,   268,   269,     0,
       0,   270,     0,   271
};

/* YYCONFLP[YYPACT[STATE-NUM]] -- Pointer into YYCONFL of start of
   list of conflicting reductions corresponding to action entry for
   state STATE-NUM in yytable.  0 means no conflicts.  The list in
   yyconfl is terminated by a rule number of 0.  */
static const unsigned char yyconflp[] =
{
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0
};

/* YYCONFL[I] -- lists of conflicting rule numbers, each terminated by
   0, pointed into by YYCONFLP.  */
static const short int yyconfl[] =
{
       0
};

static const short int yycheck[] =
{
       0,   432,   452,     3,     4,   228,   555,    88,   106,   162,
     243,   234,   561,   481,     0,   673,  1034,   575,    36,   555,
     782,   821,   349,   574,   494,   561,   202,     6,    87,     6,
      34,   743,   265,  1263,   583,     6,   775,   776,   777,     6,
     196,     6,   113,   481,   748,  1263,   462,   463,  1263,   833,
      96,  1114,   605,    99,  1099,   763,   341,   361,   611,   612,
     172,    62,    34,   169,   605,   481,   774,   775,   776,   777,
     611,   612,     1,  1121,    40,   156,  1191,   142,   114,   115,
    1317,    29,    10,  1397,   557,    89,   763,   560,  1402,  1400,
       3,    15,    10,   420,   421,    17,    10,    15,     1,     0,
     477,    15,    12,    10,    10,    10,   361,    89,    90,   127,
     114,   375,   816,    17,     1,   379,   380,    10,    39,    40,
      23,   202,    32,   101,     8,    12,    57,    58,    12,    13,
      14,    18,    16,    99,     1,   101,   109,   110,   142,   112,
      18,     0,   114,   115,   582,    32,    62,   206,    32,   129,
     128,    65,    66,    37,   126,   128,   215,    71,    65,    66,
      84,    11,    10,    18,    71,    22,    16,    81,    18,    47,
      48,    38,   892,   139,    81,  1489,    98,     6,  1492,   899,
     101,  1495,    10,   183,   184,    82,  1497,    10,    17,   102,
      15,     1,    98,    98,    98,   348,     6,   128,   127,   667,
     128,    10,   529,   239,   128,    98,    16,  1252,   109,   110,
     128,   112,   128,  1328,   128,   102,   684,  1265,   128,    29,
    1268,   128,    32,    33,    34,   207,   104,   128,     1,   341,
      40,    41,   388,   389,  1034,   132,  1036,   522,   391,    12,
     346,  1471,   307,   261,   128,    26,   684,   102,   126,   295,
      98,   667,    62,  1471,   220,    65,  1471,   673,   317,    32,
     278,   965,   966,   967,   212,    75,    76,   239,   684,    98,
      98,   243,  1056,    98,  1511,   983,  1513,    87,   128,    89,
      90,  1518,  1519,  1520,   256,  1522,  1523,  1524,  1525,    99,
      15,   101,   596,   265,   266,   267,   600,  1611,   602,  1007,
     197,   198,   679,   113,   114,   115,   983,    10,   572,  1372,
     311,   312,   865,    22,   314,    24,   126,    98,    62,   417,
     130,   862,  1026,  1027,  1028,  1343,  1389,   100,     1,   139,
    1007,   141,   142,   597,   598,     8,  1451,    17,   491,    12,
     399,   596,   401,    16,   599,   600,   601,   602,   419,   822,
     823,    12,    36,    26,    62,    16,   437,   357,    10,   512,
       8,   361,    12,     3,    12,    26,    10,  1087,    16,   905,
      62,    32,    12,    98,     1,   375,   376,   530,    18,   379,
     380,     8,    32,   387,   128,    12,   365,    17,   365,    16,
      10,    10,    32,  1630,   365,    98,   206,   207,   365,    26,
     365,  1638,   212,   626,   214,   215,    46,   172,    18,   102,
     220,    10,  1151,  1213,    98,   225,  1646,    16,    98,    98,
     128,  1484,   232,   233,    12,  1137,    99,    36,  1646,   239,
      18,  1646,   717,   243,     8,   245,   128,    47,    12,   615,
      14,  1145,  1150,  1151,    32,   255,   256,   915,    17,   467,
     129,   101,    26,    10,  1112,   265,   266,   267,   268,    47,
      10,   929,   102,   463,    12,    10,   936,   128,    98,   622,
      18,    72,    99,   238,  1589,   372,    72,    10,    98,    98,
     452,   481,   482,    10,    32,  1548,    10,     8,    10,    98,
     300,    12,   102,  1051,   104,   305,    17,   307,  1049,   915,
      10,   311,   312,  1207,   831,    26,   316,   317,     8,   555,
     556,    17,    12,   559,   102,   561,   104,  1237,  1238,     1,
    1240,   825,     3,  1059,  1244,    99,    26,   128,    16,    98,
      12,    12,   128,   343,   615,    18,  1599,    18,  1601,    19,
    1603,    98,    12,  1343,   848,   849,  1308,   357,    98,     1,
      32,    32,    10,    98,   102,   365,    37,   710,   368,  1298,
      12,   620,    32,    10,  1113,    46,    10,    98,  1683,    16,
     825,    98,   572,    84,    98,    17,    98,   387,    99,    39,
      32,    10,   582,   583,    10,    34,    46,    10,    98,   399,
    1298,   401,    98,   848,   849,  1303,   596,   597,   598,    99,
     600,    10,   602,    10,    17,   761,    10,   611,   612,   419,
    1725,    10,     8,    95,    96,    97,    12,   128,    98,    15,
      16,   102,  1737,    72,   434,    95,    96,  1742,    10,  1744,
      26,  1746,    10,  1748,    17,  1750,    10,  1752,    87,    36,
      98,   101,   452,    95,    96,    97,  1114,   665,    10,    17,
     460,   669,    98,     8,    98,   465,    98,    12,   814,  1459,
     557,    16,    10,   560,  1727,   114,   115,   667,    10,    98,
     688,    26,    98,   673,   123,    98,    10,   126,   488,    10,
       1,  1420,   838,   129,   684,    98,   583,    13,    14,    98,
      10,    12,   141,     1,    98,    10,  1112,    18,   670,    98,
      26,    98,    10,    99,    59,   751,   706,   707,  1447,  1417,
     756,    32,  1420,  1421,  1732,    98,    98,   689,  1376,    52,
      98,    54,     1,    56,    98,    17,    47,    48,     7,     8,
      98,  1389,    11,    12,    13,    14,    98,    16,    10,  1447,
    1448,    20,    21,   743,    99,    10,    25,    10,    10,   559,
      98,    17,    10,    32,    98,    34,    35,   206,    37,    10,
       1,    36,    10,    10,   574,   575,   215,    98,    72,    36,
      22,    12,    98,   819,    10,    16,   586,    18,    98,   100,
     590,   102,    10,   104,    10,    10,    17,  1255,    29,   870,
     239,    32,   989,   990,   243,   605,   993,   994,  1248,    17,
    1231,   611,   612,    44,    45,   126,    98,   256,    10,  1006,
     620,     1,    10,  1046,    10,    18,   265,   266,   267,  1355,
     976,   821,    12,    98,   128,   825,    98,    84,    18,     1,
    1157,    98,    98,    98,     1,   821,    98,    17,  1387,  1255,
      98,    11,    32,    11,    16,    12,    17,    98,   848,   849,
      98,    98,    22,   132,   133,    18,   305,    47,    48,   905,
     670,   102,    98,   760,    17,    32,  1022,    98,   317,    84,
      98,   128,    98,    98,   892,    84,    17,     1,   896,   689,
      98,   899,   900,    10,    84,   903,   696,  1043,    12,  1045,
    1548,    13,    14,    18,    18,    84,    98,    22,   916,  1055,
      98,   128,    98,    17,    26,   354,    17,   925,    32,    17,
       1,    17,   102,    17,   104,   915,   813,     8,    98,   128,
      11,    12,    46,    47,    48,   822,   823,    98,   128,   929,
     930,   741,  1732,   743,   744,    84,   126,   834,  1738,   128,
    1021,    32,    44,    45,   754,    98,    37,    17,    39,    40,
     399,    12,   401,   763,   954,    16,   956,    98,    10,    17,
    1376,    17,     1,    84,   774,   775,   776,   777,     7,     8,
      17,    32,    17,    12,    13,    14,    98,    16,   102,   128,
     104,    20,    21,   432,    98,    17,    25,    98,    62,    17,
      98,    17,    98,    32,    98,    34,    35,    12,    37,    17,
    1046,   811,   126,   452,    17,  1103,    17,   128,     1,  1477,
     101,    17,     1,  1059,   824,     8,  1484,    32,    11,    12,
     830,    20,    21,  1473,    17,   835,    17,    16,    98,    10,
    1253,    46,  1463,    64,  1034,    16,  1036,   128,    17,    32,
      98,  1532,    98,    10,    37,     1,    39,    40,  1034,   859,
    1036,    98,   862,    98,    10,   865,  1102,    17,    17,    98,
    1216,  1477,  1218,    17,    84,    17,    98,    38,     1,  1087,
      98,    17,    98,  1229,  1046,    46,    47,    48,    49,    17,
      98,     1,  1569,    16,   533,    98,  1104,    98,   537,   538,
      10,    10,    98,   132,   133,   905,    84,    12,     8,  1590,
    1591,    16,    12,  1259,  1595,    29,    16,    98,   101,    52,
    1191,    54,  1112,    56,  1114,  1312,    26,    32,  1315,    98,
      98,  1318,  1319,  1320,  1321,  1322,  1323,  1324,  1325,  1616,
    1130,  1618,   103,   104,  1602,   128,  1136,  1137,    98,    98,
     128,    16,    65,    66,    98,  1042,    98,  1044,    71,    59,
      12,   961,    98,    47,    48,   126,    16,    29,    81,     8,
      98,    84,    34,   973,     8,    24,   109,   110,    12,   112,
      32,   620,    10,   983,  1220,    16,   986,    39,   988,   989,
     990,   991,   992,   993,   994,   128,  1602,  1233,    32,    99,
      62,    16,     1,  1003,  1004,  1005,  1006,  1007,    46,    47,
      48,    22,    23,    12,    98,   128,    10,    10,   102,  1019,
     104,  1367,    16,  1213,    82,    17,  1113,    82,    98,  1237,
    1238,   670,  1240,    32,    12,    29,  1244,  1213,    16,    65,
      66,    98,   126,  1314,    17,    71,  1046,  1687,  1256,  1049,
     689,  1051,    17,   111,    32,    81,   111,  1328,  1058,   117,
     118,     1,   117,   118,   102,  1255,   104,     7,     8,    10,
      11,    11,    12,    13,    14,    16,    16,    17,     7,    17,
      20,    21,     1,    12,    16,    25,  1248,     1,   126,     1,
     729,    18,    32,    12,    34,    35,   735,    37,    12,  1099,
      12,  1263,   128,    32,     1,    18,    18,     4,     5,   748,
       1,    12,  1455,    32,    24,    12,     7,     8,    32,  1355,
      32,    12,    13,    14,    16,    16,    65,    66,    29,    20,
      21,    32,    71,    16,    25,    32,  1482,  1137,  1138,  1139,
      37,    32,    81,    34,    35,    16,    37,    10,  1148,    12,
    1150,  1151,     1,  1343,    10,    17,  1364,    19,  1130,    65,
      66,  1432,    16,    12,  1136,    71,  1166,  1343,   107,    32,
      16,  1258,    39,    40,     1,    81,    16,   816,    84,    16,
      47,    48,  1372,    32,     1,    12,  1376,     1,   128,   128,
    1533,    82,   132,   133,  1620,    12,  1622,  1623,    12,  1389,
      18,  1627,  1202,  1629,    22,    32,  1552,  1633,    98,  1635,
    1210,  1637,  1212,     1,     1,    32,     1,  1217,    32,  1219,
    1220,    17,   128,    12,    12,    12,    10,    12,  1228,     8,
      65,    66,    11,    12,   101,   102,    71,   104,   887,    22,
     889,   132,   133,    32,    32,    32,    81,    32,  1248,    84,
    1521,  1251,  1252,    32,    26,    12,  1464,     1,    37,   126,
    1260,   128,    22,  1263,  1454,    18,  1266,    16,    12,  1459,
    1478,     1,  1698,  1273,  1700,    32,    22,    23,  1454,  1705,
      37,  1281,    12,  1459,  1284,  1285,    16,  1477,    32,   111,
      11,    67,    10,   128,  1484,    10,  1296,    18,  1298,    29,
    1387,    22,    32,  1303,    17,     1,     1,    10,   947,  1471,
       8,  1473,  1312,    53,    12,  1315,    12,    12,  1318,  1319,
    1320,  1321,  1322,  1323,  1324,  1325,   965,   966,   967,    13,
      14,    12,  1332,    17,    32,    16,    32,    32,     1,    37,
       1,  1549,  1532,     4,     5,  1345,    98,  1347,    29,    12,
       1,    32,  1352,     4,     5,    18,  1532,    12,  1548,     1,
    1631,   115,   116,    18,    10,     7,     8,    10,  1368,    32,
      12,    13,    14,     5,    16,    13,    14,    32,    20,    21,
      41,    42,    43,    25,    47,    48,   162,  1026,  1027,  1028,
      32,     4,    34,    35,  1481,    37,   541,   542,     8,    98,
    1590,  1591,    12,    13,    14,  1595,    16,  1046,  1598,  1599,
      16,  1601,  1602,  1603,  1590,  1591,    19,  1417,    12,  1595,
    1420,  1421,    32,    15,    12,     8,    12,    37,    16,    12,
      16,    15,    13,    14,    17,    29,    17,    17,    32,   102,
     216,   104,  1650,    37,    32,    22,    32,  1447,  1448,    32,
     226,   227,    12,    98,    37,  1088,    16,   102,  1091,  1092,
      11,    22,    12,   126,    15,    26,    16,  1467,   244,    29,
     246,  1471,    32,  1473,     8,  1475,     8,    37,    12,    29,
      12,     1,    32,  1483,  1646,    84,    85,     7,     8,    80,
     132,   133,    12,    13,    14,  1685,    16,   592,   593,    10,
      20,    21,  1014,  1015,   988,    25,  1145,   991,   992,   894,
     895,    80,    32,    84,    34,    35,    72,    37,    22,  1003,
    1004,  1005,     7,     8,    17,  1687,    17,    12,    13,    14,
      98,    16,    98,    98,    22,    20,    21,  1727,    24,    23,
      25,    26,  1732,    22,   129,    19,    10,    32,  1738,    34,
      35,    17,    37,  1553,   116,    98,  1732,    39,    10,    98,
     336,    98,  1738,    98,    18,    46,    17,     3,  1207,    38,
       7,     8,   348,   349,    12,    12,    13,    14,  1315,    16,
      10,  1318,  1319,    20,    21,  1322,  1323,  1324,    25,    17,
      17,    98,  1231,    17,    32,    32,  1596,    34,    35,    37,
      37,    19,    15,    15,    10,    10,  1606,    17,    17,  1248,
      95,    96,   132,   133,    17,   391,    72,    16,    10,   395,
      17,    17,    17,    98,  1263,    98,    10,    65,    66,    67,
      68,    69,    70,    71,    19,    10,    10,    10,    10,    77,
      78,    10,    10,    81,   420,   421,  1646,   132,   133,    10,
      10,    86,    16,    16,   430,    22,    10,   433,    95,    96,
      16,    16,   438,    16,    16,    16,    16,    16,   444,   445,
      16,   447,    16,   449,    16,   451,    16,   453,    10,    22,
      10,    22,   458,    10,    22,    10,   107,  1687,    16,    10,
      10,    10,    10,    17,    17,   132,   133,   168,   169,    10,
       1,   477,     3,    19,   480,     6,    19,    10,    10,    16,
      36,    12,    11,   101,    22,   491,    98,    98,   494,    10,
      18,    98,    10,    10,    10,    10,  1726,    10,    10,    19,
     506,    32,    16,   204,    38,   511,   512,    38,    39,    40,
      16,    16,    22,    10,    79,    46,    47,    48,    49,    50,
      51,    80,    53,   529,   530,    10,    57,    79,    31,    60,
      61,    98,    63,     7,     8,   101,    22,    24,    12,    13,
      14,   110,    16,    24,    22,    18,    20,    21,    19,    84,
      22,    25,    17,    98,    85,    29,    87,    31,    32,   134,
      34,    35,    98,    37,    10,    64,    10,    55,    98,    58,
     101,    98,   103,   104,    98,   106,    98,   108,    55,    98,
      17,    24,    24,    24,    24,    19,    16,    98,    24,    98,
      98,    98,   134,    24,  1463,   126,    70,   128,    98,    17,
      98,    10,  1471,    22,  1473,    17,     3,    10,    16,     6,
      16,    16,    16,     8,    10,    12,   622,   623,    16,   625,
      22,    22,    98,   324,    59,    84,    64,     8,    98,    98,
     636,     1,    98,     3,    98,    32,     6,    98,   644,   645,
      98,    98,    12,    98,   650,   346,    98,    15,    59,    46,
      47,    48,    49,    50,    51,    15,    10,    10,   132,   133,
      57,    17,    32,    60,    61,    17,    63,    17,    38,    39,
      40,   677,    79,   679,    10,    64,    46,    47,    48,    49,
      50,    51,    10,    17,    15,    10,    10,    57,    17,    15,
      60,    61,    15,    63,    10,    17,    12,    17,    98,    98,
      10,    10,    10,    10,   710,   406,    98,   104,    10,    10,
      10,   108,   413,   414,    10,    85,    32,    87,    17,    10,
      79,    37,    17,    17,    81,   426,    10,    17,   429,   126,
      10,   101,    10,   103,   104,    10,   106,     1,   108,     3,
      10,    10,     6,    10,    10,    10,    17,    10,    12,    65,
      66,    67,    68,    69,    70,    71,   126,    10,   128,    98,
      15,    77,    78,    10,    10,    81,    10,    17,    32,   539,
     729,    98,     4,  1355,    38,    39,    40,  1646,   365,    98,
      98,    98,    46,    47,    48,    49,    50,    51,   542,   830,
      33,  1046,    98,    57,    98,   186,    60,    61,   186,    63,
     225,   365,   365,   811,   859,  1019,    39,  1114,   482,   583,
     684,   935,  1251,   707,   706,   311,  1533,   312,  1687,   520,
     214,    85,   212,    87,  1596,   831,   527,   956,  1136,  1406,
    1402,   357,  1611,   316,  1685,  1094,  1191,   101,   784,   103,
     104,  1421,   106,   990,   108,  1308,  1510,  1625,  1166,   625,
     879,  1432,   636,   343,    65,   861,     9,    -1,   419,    -1,
      -1,    -1,   126,    -1,   128,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   878,   879,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   887,    -1,   889,    -1,    -1,    -1,   893,   894,   895,
      -1,    -1,   898,    -1,    -1,    -1,     7,     8,    -1,    -1,
      -1,    12,    13,    14,    -1,    16,    -1,    -1,    -1,    20,
      21,   917,    -1,   919,    25,   616,    -1,   923,    -1,    -1,
      -1,    32,    -1,    34,    35,    -1,    37,    -1,   629,   935,
     631,    -1,    -1,   939,    -1,    -1,    -1,   638,    -1,   640,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   648,    -1,    -1,
      -1,   652,   653,    -1,   655,    -1,   657,   658,    -1,   660,
      -1,   662,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    80,
      -1,    82,    -1,    -1,    -1,    -1,    -1,   678,    -1,   985,
      -1,    10,   683,    -1,    13,    14,    -1,    -1,    -1,    -1,
      -1,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      -1,   702,    -1,    -1,    -1,    34,    35,    -1,   709,    -1,
     711,    -1,     0,     1,    -1,     3,    -1,    -1,     6,     7,
       8,   132,   133,   724,    12,    13,    14,    -1,    16,    -1,
      -1,    -1,    20,    21,    -1,    -1,    -1,    25,    -1,    -1,
      -1,    -1,    -1,    -1,    32,    -1,    34,    35,    -1,    37,
      38,    39,    40,    -1,    -1,    -1,    -1,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    -1,    56,    57,
      99,    -1,    60,    61,    -1,    63,    -1,    65,    66,    -1,
      -1,    -1,  1088,    71,    -1,  1091,  1092,    -1,    -1,    -1,
      -1,    79,    80,    81,    82,    -1,    84,    85,    -1,    87,
      -1,   130,   131,   132,   133,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   101,    -1,   103,   104,  1123,   106,   107,
     108,   109,   110,    -1,   112,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     1,    -1,     3,    -1,    -1,     6,   126,    -1,
     128,    -1,    -1,    12,   132,   133,    -1,    -1,    -1,    -1,
      -1,  1157,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    32,    -1,    -1,    -1,    -1,    -1,    38,
      39,    40,   873,    -1,    -1,    -1,    -1,    46,    47,    48,
      49,    50,    51,    -1,   885,   886,    -1,    -1,    57,   890,
      -1,    60,    61,    -1,    63,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1208,  1209,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    85,   918,    87,   920,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   101,    -1,   103,   104,    -1,   106,    -1,   108,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     1,    -1,    -1,    -1,   126,    -1,   128,
      -1,    -1,    -1,    -1,    12,    -1,    14,    15,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     981,    29,    -1,    31,    32,  1291,    -1,    -1,    -1,    37,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1316,  1317,    -1,    -1,    -1,    -1,    -1,    65,    66,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      78,    -1,    -1,    81,    -1,    83,    84,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,
      -1,    -1,    -1,  1054,    -1,    -1,    -1,    12,    -1,    14,
      15,    -1,    -1,    -1,    -1,    -1,    -1,  1068,    -1,    -1,
      -1,    -1,    -1,    -1,    29,    -1,    31,    32,  1079,    -1,
     128,    -1,    37,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1095,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1106,  1107,    -1,    -1,  1110,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    -1,    -1,    81,    -1,    83,    -1,
      -1,    -1,    -1,    -1,     7,     8,    -1,    -1,    -1,    12,
      13,    14,    -1,    16,    -1,    -1,    -1,    20,    21,  1455,
    1456,  1457,    25,    -1,    -1,    -1,    -1,  1158,    -1,    32,
      -1,    34,    35,  1469,    37,    -1,  1472,    -1,  1474,    -1,
      -1,    -1,     1,   128,  1480,    -1,    -1,    -1,    -1,    -1,
      -1,    10,    -1,    12,    -1,    14,    -1,    -1,  1189,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      29,    -1,    31,    32,    -1,  1511,    -1,  1513,    37,  1515,
      -1,  1517,  1518,  1519,  1520,    -1,  1522,  1523,  1524,  1525,
      -1,    50,    -1,    -1,    -1,    -1,    -1,  1533,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    78,
      -1,    -1,    81,    -1,    83,   128,    -1,    -1,    -1,   132,
     133,  1567,    -1,  1569,    -1,    -1,    -1,    -1,    -1,    -1,
    1271,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    12,    -1,
      14,    -1,    -1,    -1,  1600,    -1,    -1,    -1,    -1,   128,
      -1,    -1,    -1,    -1,    -1,    29,  1307,    31,    32,    -1,
    1616,    -1,  1618,    37,  1620,    -1,  1622,  1623,    -1,  1625,
      -1,  1627,    -1,  1629,  1630,    -1,    50,  1633,    -1,  1635,
      -1,  1637,  1638,    -1,    -1,    -1,    -1,  1338,  1339,    -1,
      -1,    65,    66,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    78,     7,     8,    81,    -1,    83,
      12,    13,    14,    -1,    16,    -1,    18,    -1,    20,    21,
      -1,    -1,    -1,    25,    -1,    -1,    -1,    -1,    -1,     1,
      32,     3,    34,    35,     6,    37,    -1,    -1,    -1,    -1,
      12,    -1,  1698,    15,  1700,    -1,    -1,    -1,    -1,  1705,
      -1,    -1,    -1,    -1,   128,    -1,    -1,    -1,    -1,  1410,
      32,    -1,  1413,    -1,    -1,    -1,    -1,  1418,    -1,    -1,
      -1,    -1,    -1,    -1,    46,    47,    48,    49,    50,    51,
      -1,    -1,    -1,    -1,    -1,    57,  1437,    -1,    60,    61,
      -1,    63,    -1,    65,    66,    -1,    -1,     7,     8,    71,
      -1,    11,    12,    13,    14,    -1,    16,    -1,    -1,    81,
      20,    21,     1,    -1,     3,    25,    -1,     6,    -1,    -1,
      -1,    -1,    32,    12,    34,    35,    -1,    37,    -1,    -1,
     132,   133,   104,    -1,    -1,    -1,   108,    -1,    -1,    -1,
      -1,    -1,    -1,    32,    -1,    -1,    -1,    -1,    -1,  1500,
      -1,    -1,  1503,  1504,   126,    -1,   128,    46,    47,    48,
      49,    50,    51,    -1,    -1,    -1,    -1,    -1,    57,    -1,
      -1,    60,    61,    -1,    63,    -1,    65,    66,    -1,    -1,
      -1,    -1,    71,    -1,    -1,  1536,  1537,    -1,    -1,    -1,
      -1,    -1,    81,  1544,  1545,    -1,  1547,    -1,    -1,    -1,
    1551,     1,    -1,     3,    -1,    -1,     6,    -1,    -1,    -1,
      -1,    -1,    12,    -1,    -1,   104,    -1,    -1,    -1,   108,
      -1,    -1,   132,   133,  1575,    -1,    -1,    -1,  1579,    -1,
      -1,    -1,    32,    -1,    -1,    -1,    -1,   126,    -1,   128,
      -1,    -1,    -1,    -1,    -1,    -1,    46,    47,    48,    49,
      50,    51,    -1,    -1,    -1,    -1,    -1,    57,    -1,    -1,
      60,    61,    -1,    63,  1615,    65,    66,    -1,    -1,    -1,
      -1,    71,    -1,     7,     8,    -1,    -1,    -1,    12,    13,
      14,    81,    16,    -1,    -1,    -1,    20,    21,    -1,    -1,
      -1,    25,    -1,    -1,    -1,    -1,    -1,  1648,    32,    -1,
      34,    35,    -1,    37,   104,     7,     8,    -1,   108,    -1,
      12,    13,    14,    -1,    16,    -1,    -1,    -1,    20,    21,
      -1,    -1,    -1,    25,    -1,    -1,   126,    -1,   128,    -1,
      32,    -1,    34,    35,    -1,    37,     7,     8,    -1,    -1,
      -1,    12,    13,    14,    -1,    16,    80,    -1,    82,    20,
      21,    -1,    -1,    -1,    25,    -1,    -1,    -1,    -1,    -1,
      -1,    32,    -1,    34,    35,    -1,    37,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     7,     8,    80,    -1,
      82,    12,    13,    14,    -1,    16,    -1,    -1,    -1,    20,
      21,    -1,    -1,    -1,    25,    -1,    -1,    -1,   132,   133,
      -1,    32,    -1,    34,    35,    -1,    37,     7,     8,    80,
      -1,    82,    12,    13,    14,    -1,    16,    17,    -1,    -1,
      20,    21,    -1,    -1,    -1,    25,    -1,    -1,    -1,    -1,
     132,   133,    32,    -1,    34,    35,    -1,    37,    -1,     7,
       8,    -1,    -1,    -1,    12,    13,    14,    -1,    16,    -1,
      -1,    82,    20,    21,    -1,    -1,    -1,    25,    -1,    -1,
      -1,   132,   133,    -1,    32,    -1,    34,    35,    -1,    37,
       7,     8,    -1,    -1,    -1,    12,    13,    14,    -1,    16,
      -1,    -1,    -1,    20,    21,    -1,    -1,    -1,    25,    -1,
      -1,    -1,    -1,    -1,    -1,    32,    -1,    34,    35,    -1,
      37,   132,   133,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       7,     8,    -1,    -1,    82,    12,    13,    14,    -1,    16,
      -1,    -1,    -1,    20,    21,    -1,    -1,    -1,    25,     1,
      -1,    -1,   132,   133,    -1,    32,    -1,    34,    35,    -1,
      37,     7,     8,    -1,    16,    -1,    12,    13,    14,    -1,
      16,    -1,    -1,    -1,    20,    21,    -1,    -1,    -1,    25,
      -1,    -1,    -1,    -1,   132,   133,    32,    -1,    34,    35,
      -1,    37,     7,     8,    -1,    -1,    -1,    12,    13,    14,
      -1,    16,    -1,    -1,    -1,    20,    21,    -1,    -1,    -1,
      25,    -1,    -1,    65,    -1,   132,   133,    32,    -1,    34,
      35,    -1,    37,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    -1,     3,    -1,    -1,     6,    -1,
      -1,    -1,    -1,   105,    12,   132,   133,    -1,    -1,    -1,
      -1,   113,   114,    -1,    -1,    -1,    -1,   119,   120,   121,
     122,   123,   124,   125,    32,    -1,    -1,    -1,    -1,    -1,
      38,    39,    40,    -1,    -1,    -1,   132,   133,    46,    47,
      48,    49,    50,    51,    -1,    -1,    -1,    10,    -1,    57,
      13,    14,    60,    61,    -1,    63,    -1,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    -1,   132,   133,    -1,
      -1,    34,    35,    -1,    -1,    -1,    -1,    85,    -1,    87,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   101,    -1,   103,   104,    -1,   106,    10,
     108,    -1,    13,    14,    -1,    -1,    -1,    -1,    -1,    20,
      21,    22,    23,    24,    25,    26,    27,    28,   126,    13,
      14,    15,    -1,    34,    35,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    -1,    99,    13,    14,    15,
      34,    35,    -1,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    -1,    -1,    -1,    -1,    -1,    34,    35,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   130,   131,   132,
     133,    -1,    13,    14,    15,    -1,    -1,    -1,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    99,    13,
      14,    15,    -1,    34,    35,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    99,    -1,    -1,    -1,    -1,
      34,    35,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   130,
     131,   132,   133,    99,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   130,   131,   132,   133,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   130,   131,   132,   133,    99,    13,
      14,    15,    -1,    -1,    -1,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    99,    -1,    -1,    -1,    -1,
      34,    35,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   130,
     131,   132,   133,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    13,    14,    15,   130,   131,   132,   133,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    13,
      14,    -1,    -1,    -1,    34,    35,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    -1,    -1,    -1,    -1,    -1,
      34,    35,    -1,    37,    -1,    99,    13,    14,    15,    -1,
      -1,    -1,    -1,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    -1,    -1,    -1,    -1,    -1,    34,    35,    -1,
      -1,    -1,    -1,    13,    14,    15,   130,   131,   132,   133,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    99,
      -1,    -1,    -1,    -1,    34,    35,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    13,    14,    99,    -1,    -1,    -1,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    -1,
     130,   131,   132,   133,    34,    35,    -1,    -1,    -1,    -1,
      -1,    -1,    99,    13,    14,    15,   130,   131,   132,   133,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    -1,
      -1,    -1,    -1,    -1,    34,    35,    -1,    -1,    -1,    99,
      -1,    -1,    -1,   130,   131,   132,   133,    -1,    -1,    -1,
      -1,    -1,    -1,    13,    14,    -1,    -1,    17,    -1,    -1,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    99,
     130,   131,   132,   133,    34,    35,    13,    14,    -1,    -1,
      17,    -1,    -1,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    -1,    -1,    -1,    -1,    -1,    34,    35,    99,
     130,   131,   132,   133,    13,    14,    -1,    -1,    17,    -1,
      -1,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      -1,    -1,    -1,    -1,    -1,    34,    35,    -1,    -1,    -1,
     130,   131,   132,   133,    13,    14,    -1,    -1,    17,    99,
      -1,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      -1,    -1,    -1,    -1,    -1,    34,    35,    -1,    -1,    -1,
      -1,    -1,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     130,   131,   132,   133,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      99,    -1,    -1,   130,   131,   132,   133,    13,    14,    -1,
      -1,    17,    -1,    -1,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    -1,    -1,    -1,    -1,    -1,    34,    35,
      99,   130,   131,   132,   133,    13,    14,    -1,    -1,    17,
      -1,    -1,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    -1,    -1,    -1,    -1,    -1,    34,    35,    -1,    -1,
      -1,   130,   131,   132,   133,    13,    14,    -1,    -1,    17,
      -1,    -1,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    -1,    -1,    -1,    -1,    -1,    34,    35,    13,    14,
      -1,    -1,    17,    99,    -1,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    -1,    -1,    -1,    -1,    -1,    34,
      35,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    99,    -1,    -1,   130,   131,   132,   133,    13,    14,
      -1,    -1,    17,    -1,    -1,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    -1,    -1,    -1,    -1,    -1,    34,
      35,    99,   130,   131,   132,   133,    13,    14,    -1,    -1,
      17,    -1,    -1,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    -1,    -1,    99,    -1,    -1,    34,    35,    -1,
      -1,    -1,   130,   131,   132,   133,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   130,   131,   132,   133,    13,
      14,    -1,    -1,    17,    99,    -1,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    -1,    -1,    -1,    -1,    -1,
      34,    35,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    99,    -1,    -1,   130,   131,   132,   133,    13,
      14,    -1,    -1,    17,    -1,    -1,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    -1,    -1,    -1,    -1,    -1,
      34,    35,    -1,   130,   131,   132,   133,    13,    14,    -1,
      -1,    17,    -1,    -1,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    13,    14,    99,    -1,    17,    34,    35,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    -1,
      -1,    -1,    -1,    -1,    34,    35,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   130,   131,   132,   133,
      13,    14,    -1,    -1,    -1,    99,    -1,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    -1,    -1,    -1,    -1,
      -1,    34,    35,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    99,    -1,    -1,   130,   131,   132,   133,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    13,    14,    99,
      -1,    -1,    -1,    -1,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    -1,   130,   131,   132,   133,    34,    35,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     130,   131,   132,   133,    -1,    98,    99,    12,    -1,    14,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    29,    -1,    31,    32,    -1,    -1,
      -1,    -1,    37,    38,    39,    40,    -1,   130,   131,   132,
     133,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    99,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    77,    78,    -1,    12,    81,    14,    83,    -1,
      -1,    -1,    -1,    -1,   130,   131,   132,   133,    -1,    -1,
      -1,    -1,    29,    -1,    31,    32,   101,    -1,   103,   104,
      37,    38,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   126,    12,    16,    -1,    -1,    -1,    -1,    65,    66,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    78,    32,    -1,    81,    -1,    83,    37,    38,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    46,    47,    48,    49,
      -1,    -1,    -1,    -1,    -1,    -1,   103,   104,    -1,    -1,
      -1,    -1,    65,    -1,    -1,    65,    66,    67,    68,    69,
      70,    71,    -1,    -1,    -1,    -1,    -1,    77,    78,   126,
      -1,    81,    -1,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   105,   103,   104,    -1,    -1,    -1,    -1,    -1,
     113,   114,    12,    -1,    14,    -1,   119,   120,   121,   122,
     123,   124,   125,    -1,    -1,    -1,   126,    -1,    -1,    29,
      -1,    31,    32,    -1,    -1,    -1,    -1,    37,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    78,    -1,
      -1,    81,    -1,    83
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const unsigned short int yystos[] =
{
       0,   128,   137,   138,   139,   180,   450,     1,    12,    32,
     451,   452,   454,   455,     0,   109,   110,   112,   140,   141,
     142,   144,   145,   156,   157,   310,   450,   156,     3,     6,
      46,    47,    48,    49,    50,    51,    57,    60,    61,    63,
     104,   108,   126,   181,   182,   210,   211,   212,   213,   216,
     217,   219,   220,   245,   253,   272,   279,   280,   332,   336,
     339,   340,   454,   129,   455,    98,   129,    22,    10,   146,
     454,     1,    23,    52,    54,    56,   159,   160,     1,    16,
      44,    45,   214,   215,   223,   224,     1,    16,    29,   223,
     225,   273,   274,   275,   276,   277,   454,     1,   102,   249,
       1,   221,     1,   236,   237,   239,   454,     1,   229,   230,
     231,   454,    16,    37,   223,   225,   337,   338,   428,   445,
     453,   454,     1,   183,     1,   355,   450,   341,     1,   100,
     248,     1,   248,     1,   239,     1,   232,   454,     1,   218,
       1,    16,   223,   281,   284,   291,   292,   333,   334,   335,
     454,   452,     7,     8,    13,    14,    16,    20,    21,    25,
      34,    35,    37,   132,   133,   427,   436,   437,   438,   443,
     447,   448,   453,   454,    10,    10,     7,   143,   453,   311,
     454,   158,   454,    10,    16,    29,   164,   170,   172,    10,
       1,     4,     5,    41,    42,    43,   249,   214,   214,    10,
     278,   445,    16,   228,   438,   439,    16,   225,   274,   277,
     274,    10,    98,    10,    98,    16,    18,   244,    10,   239,
     244,    10,   239,    10,    10,    98,    18,    22,   222,   243,
      10,    10,    98,    98,   222,   428,   429,   430,   454,   225,
     337,   337,    10,    98,    22,    11,    18,   432,    10,   235,
     241,   453,    84,    14,    29,    31,    50,    65,    66,    67,
      68,    69,    70,    71,    73,    74,    75,    76,    77,    78,
      81,    83,   342,   343,   344,   350,   351,   359,   360,   362,
     363,   364,   367,   368,   369,   371,   375,   376,   445,   453,
     355,    62,   254,   454,    64,   249,    10,    10,    10,    10,
      98,    10,   239,    84,   278,    16,   225,   227,   292,   333,
      29,   285,    98,   283,    16,    10,    98,    16,   244,   262,
     439,    20,    21,   435,   438,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    34,    35,    99,   130,   131,   132,
     133,   444,   447,   128,   436,   447,   449,     8,    16,    18,
     431,   432,   449,     1,   127,   147,    24,    16,     1,   161,
     162,   163,   178,   179,   180,   450,     1,    17,   171,   258,
     259,   260,   264,   450,    16,    10,    16,   170,   172,    10,
      10,    17,    98,    98,    17,    17,    17,   262,   249,   249,
      17,    98,   226,   228,   439,    15,   278,   274,    10,    16,
      10,    16,   276,   277,   275,   278,   438,   441,    10,   239,
      10,   237,   433,   438,   438,   243,   454,   454,    36,    98,
      18,   432,   337,    10,    10,   338,   438,   454,   434,   438,
      18,    10,    98,    22,    24,     8,    12,    16,    16,    26,
     128,   454,   349,   445,    16,    16,     1,    16,     1,    16,
     355,    16,    16,    16,   338,   445,   445,   454,    16,     1,
      15,    84,   352,   353,     1,    15,    72,   354,   355,     1,
      10,     1,    10,    10,    10,   355,   356,    22,    23,    10,
      16,    10,    16,    47,    48,   104,   126,   244,   247,   454,
      10,    98,   333,    10,    16,   284,   292,   291,    10,     1,
      17,   293,   294,   295,   296,   297,   450,   334,   278,    17,
      36,    98,    37,    22,    22,    23,    22,    24,    26,    22,
     438,   437,   449,     1,   451,   436,   435,   438,   434,    18,
      16,   111,     1,   150,   453,    82,   111,   117,   118,   148,
     149,   151,   152,    10,   312,   313,   317,   450,   454,    10,
      53,   161,   179,     1,    10,    38,    39,    40,    85,    87,
     101,   103,   106,   184,   190,   196,   197,   200,   203,   298,
     378,    17,    10,     8,    11,    37,   173,   174,   175,   177,
     454,    17,    98,    98,    47,    48,    98,   104,   126,   249,
     267,    39,    40,   101,     1,   165,   163,    10,    10,     1,
     163,     1,   163,     5,     4,   225,   229,   233,   234,   240,
     454,   262,   262,   435,    17,    98,   438,    10,   278,   278,
      16,    17,    98,    15,    10,    15,   222,   430,   434,   438,
     434,   438,    10,    19,    13,    14,    15,    19,   438,   241,
     438,   454,   439,    26,    95,    96,   365,   366,   438,    17,
      22,     1,   438,   438,    80,   438,    80,   438,   438,   349,
     438,    10,   438,    84,   454,   354,    84,   255,   268,   354,
     450,    72,     1,   454,    72,   355,    70,   360,   438,    22,
       1,    98,   377,   438,   256,   257,   259,   268,   354,   450,
     258,   246,   454,   435,    10,     1,    11,   286,   287,   288,
     289,   290,   438,   282,    17,    17,    98,    98,   290,   438,
      98,   438,   435,    22,    23,    24,    22,    15,   437,   129,
     129,    17,    19,   434,   438,   435,    10,    10,   453,   116,
     153,   453,   453,   111,   149,   115,   153,   154,   153,   154,
      17,    98,    17,    98,    39,    10,     1,   102,   191,   244,
     267,   446,     3,    46,   205,   206,   208,   209,   244,   446,
     209,   249,     1,    16,    65,    86,    88,    89,    90,    91,
      92,    93,    94,   105,   113,   114,   119,   120,   121,   122,
     123,   124,   125,   196,   379,   380,   381,   382,   383,   384,
     385,   393,   394,   395,   399,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,     1,   238,
     242,   244,   454,   209,   249,     1,   187,   244,   267,   446,
       1,   299,    98,    98,    98,   163,   175,   176,   177,    17,
      98,    18,   259,   249,   264,   267,   454,    46,   261,   454,
       3,   263,   263,   263,    17,    38,   166,   161,   163,   163,
     161,   161,   161,   161,    17,    17,   233,   234,    10,    98,
      10,    22,   225,   233,   234,   225,   233,   234,    17,   228,
      15,   278,   435,   438,   440,   433,    19,    19,    15,    15,
     440,    19,    10,    17,    17,   438,   438,     6,    17,    98,
     438,    17,    17,    17,    17,    17,    17,   361,    10,    17,
      17,    84,   268,   354,    84,    46,   184,   190,   210,   212,
     216,   217,   220,   269,    72,   255,   354,    16,   438,   360,
     438,    17,    17,    98,   257,   354,    10,    62,    17,    10,
      16,    17,    17,   454,    17,    98,    98,    10,   295,   450,
     297,   450,   435,    36,   437,    19,    17,   150,    10,   453,
      10,    10,    10,    10,    10,   454,    10,   314,   318,   450,
     454,    46,   454,    10,   235,   194,   192,   195,   244,   454,
      47,   102,   104,   204,   207,   244,   249,   262,    86,    95,
      96,   386,   389,   398,   454,    16,    16,     1,    16,    16,
      16,    16,    16,    16,    16,   386,   387,   389,     1,   387,
     387,     1,   387,    16,    16,    16,    16,    16,   384,    86,
     380,    10,    22,    10,    22,    22,    10,    10,    10,    98,
     238,    22,   249,   262,    10,   235,   185,   186,   188,   244,
     107,    65,    66,    71,    81,   180,   300,   302,   303,   304,
     307,   309,   209,   249,   209,   249,    39,   454,   161,    16,
      36,    98,   174,   434,   438,   261,   249,   454,   262,   167,
      17,    98,   161,   161,    10,    10,   240,   454,   438,   233,
      10,    10,   234,    10,    10,   439,    17,    19,    19,   438,
     442,   442,   365,   365,     1,   356,     1,    82,   372,   373,
     435,   372,   372,   355,    17,   438,   356,   355,    84,   244,
     270,   271,   446,   454,   354,    72,   438,   438,    10,    10,
     438,    62,    10,   101,   250,   251,   265,   266,   268,   450,
     252,   450,    10,    16,   288,   290,    17,    36,    15,   155,
     315,   316,   317,   318,   319,   450,   315,    98,    98,   101,
     454,    10,   235,   235,   235,   193,   454,   262,   198,    26,
      98,   388,   400,   447,    22,   386,   389,    18,   438,     1,
      95,    96,    97,   389,   417,   419,   421,   422,   425,    10,
       1,   417,   419,   420,   420,   417,   417,   419,   419,    10,
      10,    10,    10,    10,    10,   417,   417,   417,   419,   386,
     389,    16,   390,   391,   392,   439,   390,   390,   242,    10,
     439,   262,   201,    10,   235,   235,   235,   189,    16,    16,
      16,     1,    15,   300,   107,   302,   249,   262,   249,   262,
     208,   338,   454,    17,   175,   177,    19,    19,   262,   261,
     454,   169,   244,   446,    38,    10,    10,    79,    79,    80,
      15,   356,    80,   373,    15,    80,    80,   363,    10,   270,
      10,    98,   244,   222,    72,   255,   354,     1,    46,   249,
     267,   251,   357,   450,    10,    98,    98,    17,    98,   266,
      17,   438,   110,    57,    58,   316,   320,   321,   324,    10,
      10,    98,    10,    10,    98,    46,   320,   318,   454,   454,
     454,    22,    10,    10,    10,   235,   199,   454,    24,   389,
     387,    22,    26,    24,    26,    22,   434,   438,    17,    17,
      19,    18,    98,   425,   134,    98,    98,    98,    98,    98,
      98,    98,    98,    98,    98,    98,    26,    22,    16,   391,
     392,   439,   202,   454,    10,    10,    10,   235,   438,   438,
     308,   454,    84,   454,    84,   262,   454,   262,   454,   454,
      17,   454,   262,   241,   244,   168,   356,   356,   356,   356,
     349,    10,   271,   270,   354,    62,    10,   249,   262,   454,
      64,    65,    69,    70,    71,    78,    81,   345,   347,   358,
     362,   370,   371,   374,   376,   445,   266,   101,   454,    10,
     266,    17,     1,   454,     1,     8,    12,    16,    26,    99,
     322,   323,   326,   327,   331,    55,    58,   454,   454,    55,
     438,    10,   454,   387,    17,    24,    24,    16,   389,   396,
      24,    24,    19,    19,   384,   393,     8,    12,   423,   424,
     418,   419,   134,   426,   439,   418,   416,   438,   416,   418,
     418,   419,   419,   418,   418,   418,   419,    24,    24,   392,
      17,    98,   454,    10,    17,    17,    10,    22,     1,   300,
     454,   454,   454,   169,    17,    10,    62,   262,   454,    16,
     357,   450,    16,    16,    16,    15,    84,   255,   354,    10,
      22,    46,   249,   267,   255,   357,    10,    22,    59,   331,
      59,   323,    15,   327,   331,    16,     1,   322,    17,   447,
     389,    17,   447,   387,   389,   396,     8,    12,     8,    19,
      98,    98,   426,    98,    17,    98,    17,    98,    98,    98,
      98,    98,    98,    98,    98,    98,   387,   389,   392,    10,
     301,   302,    82,   305,   306,   435,   438,   438,    84,    84,
     241,   355,   454,     1,   438,   438,   349,   438,   454,   354,
      84,   438,   249,   262,   454,   357,    64,     8,   325,    17,
     331,   328,   330,   331,   331,    59,    59,    15,   447,    15,
     447,   423,   416,   416,    10,   438,    10,   414,   415,   438,
     416,   416,   416,   439,   416,   416,   416,   416,    17,    98,
      79,    15,   301,    80,   306,    15,    10,    17,    17,    17,
      10,    17,   255,   348,   357,    84,   262,   454,    64,    10,
      17,    15,    10,    17,   397,   438,    15,   397,    15,    17,
      98,    17,    98,    98,    17,    98,    17,    98,    17,    98,
      98,    98,    17,    98,    17,    98,    17,    98,    98,   392,
     301,   301,   301,   308,   346,   357,   450,   357,   438,   357,
     354,    84,   357,   454,    14,   329,   330,   331,    17,   397,
      17,   397,    10,   414,    10,   414,   414,    10,   415,    10,
     414,    10,   414,   416,   439,    10,   414,    10,   414,    10,
     414,   416,    17,    98,    17,    79,    10,    10,    84,    10,
      17,    17,    17,    17,    17,    17,    17,    17,    98,    17,
      98,    17,    17,    17,    17,    98,   392,    81,   346,   349,
      17,    10,    10,    10,    10,    10,    10,   414,    10,   414,
      10,    10,    10,    10,   414,    98,    15,    17,    17,    17,
      17,   392,   454,   357,    10,    10,    10,    98,   300,   392,
      84,    17,    98,   392,    98,   392,    98,   392,    98,   392,
      98,   392,    98,   392,    17
};


/* Prevent warning if -Wmissing-prototypes.  */
int yyparse (void);

/* Error token number */
#define YYTERROR 1

/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */


#define YYRHSLOC(Rhs, K) ((Rhs)[K].yystate.yyloc)
#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)				\
    do									\
      if (YYID (N))							\
	{								\
	  (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;	\
	  (Current).first_column = YYRHSLOC (Rhs, 1).first_column;	\
	  (Current).last_line    = YYRHSLOC (Rhs, N).last_line;		\
	  (Current).last_column  = YYRHSLOC (Rhs, N).last_column;	\
	}								\
      else								\
	{								\
	  (Current).first_line   = (Current).last_line   =		\
	    YYRHSLOC (Rhs, 0).last_line;				\
	  (Current).first_column = (Current).last_column =		\
	    YYRHSLOC (Rhs, 0).last_column;				\
	}								\
    while (YYID (0))

/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

# define YY_LOCATION_PRINT(File, Loc)			\
    fprintf (File, "%d.%d-%d.%d",			\
	     (Loc).first_line, (Loc).first_column,	\
	     (Loc).last_line,  (Loc).last_column)
#endif


#ifndef YY_LOCATION_PRINT
# define YY_LOCATION_PRINT(File, Loc) ((void) 0)
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */
#define YYLEX yylex ()

YYSTYPE yylval;

YYLTYPE yylloc;

int yynerrs;
int yychar;

static const int YYEOF = 0;
static const int YYEMPTY = -2;

typedef enum { yyok, yyaccept, yyabort, yyerr } YYRESULTTAG;

#define YYCHK(YYE)							     \
   do { YYRESULTTAG yyflag = YYE; if (yyflag != yyok) return yyflag; }	     \
   while (YYID (0))

#if YYDEBUG

# ifndef YYFPRINTF
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (YYID (0))


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

/*ARGSUSED*/
static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
{
  if (!yyvaluep)
    return;
  YYUSE (yylocationp);
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# else
  YYUSE (yyoutput);
# endif
  switch (yytype)
    {
      default:
	break;
    }
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
{
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  YY_LOCATION_PRINT (yyoutput, *yylocationp);
  YYFPRINTF (yyoutput, ": ");
  yy_symbol_value_print (yyoutput, yytype, yyvaluep, yylocationp);
  YYFPRINTF (yyoutput, ")");
}

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			    \
do {									    \
  if (yydebug)								    \
    {									    \
      YYFPRINTF (stderr, "%s ", Title);					    \
      yy_symbol_print (stderr, Type,					    \
		       Value, Location);  \
      YYFPRINTF (stderr, "\n");						    \
    }									    \
} while (YYID (0))

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;

#else /* !YYDEBUG */

# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)

#endif /* !YYDEBUG */

/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   SIZE_MAX < YYMAXDEPTH * sizeof (GLRStackItem)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif

/* Minimum number of free items on the stack allowed after an
   allocation.  This is to allow allocation and initialization
   to be completed by functions that call yyexpandGLRStack before the
   stack is expanded, thus insuring that all necessary pointers get
   properly redirected to new data.  */
#define YYHEADROOM 2

#ifndef YYSTACKEXPANDABLE
# if (! defined __cplusplus \
      || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
	  && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL))
#  define YYSTACKEXPANDABLE 1
# else
#  define YYSTACKEXPANDABLE 0
# endif
#endif

#if YYSTACKEXPANDABLE
# define YY_RESERVE_GLRSTACK(Yystack)			\
  do {							\
    if (Yystack->yyspaceLeft < YYHEADROOM)		\
      yyexpandGLRStack (Yystack);			\
  } while (YYID (0))
#else
# define YY_RESERVE_GLRSTACK(Yystack)			\
  do {							\
    if (Yystack->yyspaceLeft < YYHEADROOM)		\
      yyMemoryExhausted (Yystack);			\
  } while (YYID (0))
#endif


#if YYERROR_VERBOSE

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
yystpcpy (char *yydest, const char *yysrc)
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static size_t
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      size_t yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return strlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

#endif /* !YYERROR_VERBOSE */

/** State numbers, as in LALR(1) machine */
typedef int yyStateNum;

/** Rule numbers, as in LALR(1) machine */
typedef int yyRuleNum;

/** Grammar symbol */
typedef short int yySymbol;

/** Item references, as in LALR(1) machine */
typedef short int yyItemNum;

typedef struct yyGLRState yyGLRState;
typedef struct yyGLRStateSet yyGLRStateSet;
typedef struct yySemanticOption yySemanticOption;
typedef union yyGLRStackItem yyGLRStackItem;
typedef struct yyGLRStack yyGLRStack;

struct yyGLRState {
  /** Type tag: always true.  */
  yybool yyisState;
  /** Type tag for yysemantics.  If true, yysval applies, otherwise
   *  yyfirstVal applies.  */
  yybool yyresolved;
  /** Number of corresponding LALR(1) machine state.  */
  yyStateNum yylrState;
  /** Preceding state in this stack */
  yyGLRState* yypred;
  /** Source position of the first token produced by my symbol */
  size_t yyposn;
  union {
    /** First in a chain of alternative reductions producing the
     *  non-terminal corresponding to this state, threaded through
     *  yynext.  */
    yySemanticOption* yyfirstVal;
    /** Semantic value for this state.  */
    YYSTYPE yysval;
  } yysemantics;
  /** Source location for this state.  */
  YYLTYPE yyloc;
};

struct yyGLRStateSet {
  yyGLRState** yystates;
  /** During nondeterministic operation, yylookaheadNeeds tracks which
   *  stacks have actually needed the current lookahead.  During deterministic
   *  operation, yylookaheadNeeds[0] is not maintained since it would merely
   *  duplicate yychar != YYEMPTY.  */
  yybool* yylookaheadNeeds;
  size_t yysize, yycapacity;
};

struct yySemanticOption {
  /** Type tag: always false.  */
  yybool yyisState;
  /** Rule number for this reduction */
  yyRuleNum yyrule;
  /** The last RHS state in the list of states to be reduced.  */
  yyGLRState* yystate;
  /** The lookahead for this reduction.  */
  int yyrawchar;
  YYSTYPE yyval;
  YYLTYPE yyloc;
  /** Next sibling in chain of options.  To facilitate merging,
   *  options are chained in decreasing order by address.  */
  yySemanticOption* yynext;
};

/** Type of the items in the GLR stack.  The yyisState field
 *  indicates which item of the union is valid.  */
union yyGLRStackItem {
  yyGLRState yystate;
  yySemanticOption yyoption;
};

struct yyGLRStack {
  int yyerrState;
  /* To compute the location of the error token.  */
  yyGLRStackItem yyerror_range[3];

  YYJMP_BUF yyexception_buffer;
  yyGLRStackItem* yyitems;
  yyGLRStackItem* yynextFree;
  size_t yyspaceLeft;
  yyGLRState* yysplitPoint;
  yyGLRState* yylastDeleted;
  yyGLRStateSet yytops;
};

#if YYSTACKEXPANDABLE
static void yyexpandGLRStack (yyGLRStack* yystackp);
#endif

static void yyFail (yyGLRStack* yystackp, const char* yymsg)
  __attribute__ ((__noreturn__));
static void
yyFail (yyGLRStack* yystackp, const char* yymsg)
{
  if (yymsg != NULL)
    yyerror (yymsg);
  YYLONGJMP (yystackp->yyexception_buffer, 1);
}

static void yyMemoryExhausted (yyGLRStack* yystackp)
  __attribute__ ((__noreturn__));
static void
yyMemoryExhausted (yyGLRStack* yystackp)
{
  YYLONGJMP (yystackp->yyexception_buffer, 2);
}

#if YYDEBUG || YYERROR_VERBOSE
/** A printable representation of TOKEN.  */
static inline const char*
yytokenName (yySymbol yytoken)
{
  if (yytoken == YYEMPTY)
    return "";

  return yytname[yytoken];
}
#endif

/** Fill in YYVSP[YYLOW1 .. YYLOW0-1] from the chain of states starting
 *  at YYVSP[YYLOW0].yystate.yypred.  Leaves YYVSP[YYLOW1].yystate.yypred
 *  containing the pointer to the next state in the chain.  */
static void yyfillin (yyGLRStackItem *, int, int) __attribute__ ((__unused__));
static void
yyfillin (yyGLRStackItem *yyvsp, int yylow0, int yylow1)
{
  yyGLRState* s;
  int i;
  s = yyvsp[yylow0].yystate.yypred;
  for (i = yylow0-1; i >= yylow1; i -= 1)
    {
      YYASSERT (s->yyresolved);
      yyvsp[i].yystate.yyresolved = yytrue;
      yyvsp[i].yystate.yysemantics.yysval = s->yysemantics.yysval;
      yyvsp[i].yystate.yyloc = s->yyloc;
      s = yyvsp[i].yystate.yypred = s->yypred;
    }
}

/* Do nothing if YYNORMAL or if *YYLOW <= YYLOW1.  Otherwise, fill in
 * YYVSP[YYLOW1 .. *YYLOW-1] as in yyfillin and set *YYLOW = YYLOW1.
 * For convenience, always return YYLOW1.  */
static inline int yyfill (yyGLRStackItem *, int *, int, yybool)
     __attribute__ ((__unused__));
static inline int
yyfill (yyGLRStackItem *yyvsp, int *yylow, int yylow1, yybool yynormal)
{
  if (!yynormal && yylow1 < *yylow)
    {
      yyfillin (yyvsp, *yylow, yylow1);
      *yylow = yylow1;
    }
  return yylow1;
}

/** Perform user action for rule number YYN, with RHS length YYRHSLEN,
 *  and top stack item YYVSP.  YYLVALP points to place to put semantic
 *  value ($$), and yylocp points to place for location information
 *  (@$).  Returns yyok for normal return, yyaccept for YYACCEPT,
 *  yyerr for YYERROR, yyabort for YYABORT.  */
/*ARGSUSED*/ static YYRESULTTAG
yyuserAction (yyRuleNum yyn, int yyrhslen, yyGLRStackItem* yyvsp,
	      YYSTYPE* yyvalp,
	      YYLTYPE* YYOPTIONAL_LOC (yylocp),
	      yyGLRStack* yystackp
	      )
{
  yybool yynormal __attribute__ ((__unused__)) =
    (yystackp->yysplitPoint == NULL);
  int yylow;
# undef yyerrok
# define yyerrok (yystackp->yyerrState = 0)
# undef YYACCEPT
# define YYACCEPT return yyaccept
# undef YYABORT
# define YYABORT return yyabort
# undef YYERROR
# define YYERROR return yyerrok, yyerr
# undef YYRECOVERING
# define YYRECOVERING() (yystackp->yyerrState != 0)
# undef yyclearin
# define yyclearin (yychar = YYEMPTY)
# undef YYFILL
# define YYFILL(N) yyfill (yyvsp, &yylow, N, yynormal)
# undef YYBACKUP
# define YYBACKUP(Token, Value)						     \
  return yyerror (YY_("syntax error: cannot back up")),     \
	 yyerrok, yyerr

  yylow = 1;
  if (yyrhslen == 0)
    *yyvalp = yyval_default;
  else
    *yyvalp = yyvsp[YYFILL (1-yyrhslen)].yystate.yysemantics.yysval;
  YYLLOC_DEFAULT ((*yylocp), (yyvsp - yyrhslen), yyrhslen);
  yystackp->yyerror_range[1].yystate.yyloc = *yylocp;

  switch (yyn)
    {
        case 3:

/* Line 936 of glr.c  */
#line 136 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {identVerilog.resize(0);}
    break;

  case 5:

/* Line 936 of glr.c  */
#line 137 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {identVerilog.resize(0);}
    break;

  case 8:

/* Line 936 of glr.c  */
#line 148 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {vbufreset;}
    break;

  case 9:

/* Line 936 of glr.c  */
#line 149 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {vbufreset;}
    break;

  case 10:

/* Line 936 of glr.c  */
#line 150 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {vbufreset;}
    break;

  case 19:

/* Line 936 of glr.c  */
#line 182 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {
                                if(!parseCode) 
								{ 
								   QCString confName=(((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.cstr);
								   Entry *conf=VerilogDocGen::makeNewEntry(confName.data(),Entry::VARIABLE_SEC,VerilogDocGen::CONFIGURATION,c_lloc.first_line);
                                   conf->type="configuration";
								   addGlobalVerilogMember(conf);
								}          
				            }
    break;

  case 38:

/* Line 936 of glr.c  */
#line 238 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {}
    break;

  case 54:

/* Line 936 of glr.c  */
#line 267 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {
                                    yydebug=0; //sets parser in debug mode
                                    if(!parseCode) { 
							              
											 lastModule=VerilogDocGen::makeNewEntry("",Entry::CLASS_SEC,VerilogDocGen::MODULE);
                                            currentVerilog=lastModule;
                                             currentVerilog->protection=Public;
					                         parseModule();
							                 CurrState=VerilogDocGen::STATE_MODULE;
				                             
										    }
                                            else {
											      parseModule();
                                         		  }
                               currVerilogType=0;						       
							   vbufreset();
							 }
    break;

  case 55:

/* Line 936 of glr.c  */
#line 286 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {
            if(!parseCode){ 
			        int ll=getVerilogLine();
	                currentVerilog->endBodyLine=ll;
			       } 	 
              vbufreset(); 
		   }
    break;

  case 56:

/* Line 936 of glr.c  */
#line 292 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {currentVerilog=0;vbufreset();}
    break;

  case 59:

/* Line 936 of glr.c  */
#line 302 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {currVerilogType=VerilogDocGen::PORT;}
    break;

  case 60:

/* Line 936 of glr.c  */
#line 302 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {currVerilogType=0;vbufreset();}
    break;

  case 61:

/* Line 936 of glr.c  */
#line 303 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 62:

/* Line 936 of glr.c  */
#line 306 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::PARAMETER;}
    break;

  case 63:

/* Line 936 of glr.c  */
#line 306 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {currVerilogType=0;}
    break;

  case 64:

/* Line 936 of glr.c  */
#line 307 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::PARAMETER;}
    break;

  case 65:

/* Line 936 of glr.c  */
#line 307 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {currVerilogType=0;}
    break;

  case 70:

/* Line 936 of glr.c  */
#line 316 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {currVerilogType=VerilogDocGen::PORT;}
    break;

  case 71:

/* Line 936 of glr.c  */
#line 316 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {currVerilogType=0;vbufreset();}
    break;

  case 72:

/* Line 936 of glr.c  */
#line 317 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {currVerilogType=0;vbufreset();}
    break;

  case 73:

/* Line 936 of glr.c  */
#line 321 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {currVerilogType=0;vbufreset();}
    break;

  case 74:

/* Line 936 of glr.c  */
#line 325 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {parseListOfPorts();vbufreset();}
    break;

  case 75:

/* Line 936 of glr.c  */
#line 326 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {parseListOfPorts();vbufreset();}
    break;

  case 87:

/* Line 936 of glr.c  */
#line 348 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=0;vbufreset();}
    break;

  case 88:

/* Line 936 of glr.c  */
#line 349 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=0;vbufreset();}
    break;

  case 89:

/* Line 936 of glr.c  */
#line 350 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=0;vbufreset();}
    break;

  case 90:

/* Line 936 of glr.c  */
#line 351 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    { vbufreset();}
    break;

  case 93:

/* Line 936 of glr.c  */
#line 360 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 94:

/* Line 936 of glr.c  */
#line 361 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 97:

/* Line 936 of glr.c  */
#line 364 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 99:

/* Line 936 of glr.c  */
#line 369 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 100:

/* Line 936 of glr.c  */
#line 370 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 101:

/* Line 936 of glr.c  */
#line 371 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 102:

/* Line 936 of glr.c  */
#line 372 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 103:

/* Line 936 of glr.c  */
#line 373 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 104:

/* Line 936 of glr.c  */
#line 374 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 105:

/* Line 936 of glr.c  */
#line 375 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 114:

/* Line 936 of glr.c  */
#line 386 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 115:

/* Line 936 of glr.c  */
#line 387 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {}
    break;

  case 116:

/* Line 936 of glr.c  */
#line 388 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {}
    break;

  case 117:

/* Line 936 of glr.c  */
#line 392 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    { if(parseCode) currVerilogType=VerilogDocGen::DEFPARAM;}
    break;

  case 118:

/* Line 936 of glr.c  */
#line 392 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {vbufreset(); if(parseCode) currVerilogType=0; }
    break;

  case 119:

/* Line 936 of glr.c  */
#line 393 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {vbufreset(); if(parseCode) currVerilogType=0;}
    break;

  case 120:

/* Line 936 of glr.c  */
#line 401 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::PARAMETER;}
    break;

  case 121:

/* Line 936 of glr.c  */
#line 401 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {currVerilogType=0;vbufreset();}
    break;

  case 122:

/* Line 936 of glr.c  */
#line 402 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::PARAMETER;}
    break;

  case 123:

/* Line 936 of glr.c  */
#line 402 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {currVerilogType=0;vbufreset();}
    break;

  case 124:

/* Line 936 of glr.c  */
#line 403 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::PARAMETER;}
    break;

  case 125:

/* Line 936 of glr.c  */
#line 403 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {currVerilogType=0;vbufreset();}
    break;

  case 126:

/* Line 936 of glr.c  */
#line 404 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::PARAMETER;}
    break;

  case 127:

/* Line 936 of glr.c  */
#line 404 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {currVerilogType=0;vbufreset();}
    break;

  case 128:

/* Line 936 of glr.c  */
#line 405 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::PARAMETER;}
    break;

  case 129:

/* Line 936 of glr.c  */
#line 405 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {currVerilogType=0;vbufreset();}
    break;

  case 131:

/* Line 936 of glr.c  */
#line 409 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::PARAMETER;}
    break;

  case 132:

/* Line 936 of glr.c  */
#line 409 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {currVerilogType=0;vbufreset();}
    break;

  case 133:

/* Line 936 of glr.c  */
#line 410 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::PARAMETER;}
    break;

  case 134:

/* Line 936 of glr.c  */
#line 410 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {currVerilogType=0;vbufreset();}
    break;

  case 135:

/* Line 936 of glr.c  */
#line 411 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::PARAMETER;}
    break;

  case 136:

/* Line 936 of glr.c  */
#line 411 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {currVerilogType=0;vbufreset();}
    break;

  case 137:

/* Line 936 of glr.c  */
#line 412 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::PARAMETER;}
    break;

  case 138:

/* Line 936 of glr.c  */
#line 412 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {currVerilogType=0;vbufreset();}
    break;

  case 139:

/* Line 936 of glr.c  */
#line 413 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::PARAMETER;}
    break;

  case 140:

/* Line 936 of glr.c  */
#line 413 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {currVerilogType=0;vbufreset();}
    break;

  case 141:

/* Line 936 of glr.c  */
#line 414 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {currVerilogType=0;vbufreset();}
    break;

  case 142:

/* Line 936 of glr.c  */
#line 417 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    { vbufreset();}
    break;

  case 143:

/* Line 936 of glr.c  */
#line 418 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    { vbufreset();}
    break;

  case 145:

/* Line 936 of glr.c  */
#line 426 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::INOUT; }
    break;

  case 146:

/* Line 936 of glr.c  */
#line 426 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode)parsePortDir(currentVerilog,3);vbufreset();}
    break;

  case 147:

/* Line 936 of glr.c  */
#line 427 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::INOUT; }
    break;

  case 148:

/* Line 936 of glr.c  */
#line 427 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode)parsePortDir(currentVerilog,3);vbufreset();}
    break;

  case 149:

/* Line 936 of glr.c  */
#line 428 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode)parsePortDir(currentVerilog,3);vbufreset();}
    break;

  case 150:

/* Line 936 of glr.c  */
#line 429 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode)parsePortDir(currentVerilog,3);vbufreset();}
    break;

  case 151:

/* Line 936 of glr.c  */
#line 432 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::INPUT; }
    break;

  case 152:

/* Line 936 of glr.c  */
#line 432 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode)parsePortDir(currentVerilog,3);vbufreset();}
    break;

  case 153:

/* Line 936 of glr.c  */
#line 433 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::INPUT; }
    break;

  case 154:

/* Line 936 of glr.c  */
#line 433 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode)parsePortDir(currentVerilog,3);vbufreset();}
    break;

  case 155:

/* Line 936 of glr.c  */
#line 434 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode)parsePortDir(currentVerilog,3);vbufreset();}
    break;

  case 156:

/* Line 936 of glr.c  */
#line 435 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode)parsePortDir(currentVerilog,3);vbufreset();}
    break;

  case 157:

/* Line 936 of glr.c  */
#line 440 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::OUTPUT; }
    break;

  case 158:

/* Line 936 of glr.c  */
#line 440 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode)parsePortDir(currentVerilog,3);vbufreset();}
    break;

  case 159:

/* Line 936 of glr.c  */
#line 441 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::OUTPUT; }
    break;

  case 160:

/* Line 936 of glr.c  */
#line 441 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode)parsePortDir(currentVerilog,3);vbufreset();}
    break;

  case 161:

/* Line 936 of glr.c  */
#line 443 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::OUTPUT; }
    break;

  case 162:

/* Line 936 of glr.c  */
#line 443 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode)parsePortDir(currentVerilog,3);vbufreset();}
    break;

  case 164:

/* Line 936 of glr.c  */
#line 446 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode)parsePortDir(currentVerilog,3);vbufreset();}
    break;

  case 165:

/* Line 936 of glr.c  */
#line 447 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode)parsePortDir(currentVerilog,3);vbufreset();}
    break;

  case 166:

/* Line 936 of glr.c  */
#line 448 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode)parsePortDir(currentVerilog,3);vbufreset();}
    break;

  case 177:

/* Line 936 of glr.c  */
#line 476 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    { vbufreset();}
    break;

  case 178:

/* Line 936 of glr.c  */
#line 477 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    { vbufreset();}
    break;

  case 181:

/* Line 936 of glr.c  */
#line 484 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 183:

/* Line 936 of glr.c  */
#line 489 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 184:

/* Line 936 of glr.c  */
#line 490 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 185:

/* Line 936 of glr.c  */
#line 491 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 186:

/* Line 936 of glr.c  */
#line 492 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 187:

/* Line 936 of glr.c  */
#line 493 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 188:

/* Line 936 of glr.c  */
#line 494 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 189:

/* Line 936 of glr.c  */
#line 495 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 190:

/* Line 936 of glr.c  */
#line 496 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 191:

/* Line 936 of glr.c  */
#line 497 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 192:

/* Line 936 of glr.c  */
#line 498 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 193:

/* Line 936 of glr.c  */
#line 499 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 198:

/* Line 936 of glr.c  */
#line 512 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();currVerilogType=0;}
    break;

  case 199:

/* Line 936 of glr.c  */
#line 513 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 200:

/* Line 936 of glr.c  */
#line 515 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::TIME; }
    break;

  case 201:

/* Line 936 of glr.c  */
#line 515 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();currVerilogType=0;}
    break;

  case 202:

/* Line 936 of glr.c  */
#line 516 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 203:

/* Line 936 of glr.c  */
#line 519 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {currVerilogType=0;}
    break;

  case 204:

/* Line 936 of glr.c  */
#line 520 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {currVerilogType=0;}
    break;

  case 205:

/* Line 936 of glr.c  */
#line 521 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    { vbufreset();}
    break;

  case 206:

/* Line 936 of glr.c  */
#line 524 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::TIME; }
    break;

  case 207:

/* Line 936 of glr.c  */
#line 524 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();currVerilogType=0;}
    break;

  case 208:

/* Line 936 of glr.c  */
#line 525 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 217:

/* Line 936 of glr.c  */
#line 554 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {}
    break;

  case 224:

/* Line 936 of glr.c  */
#line 573 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode) {parseReg(currentVerilog);}vbufreset();}
    break;

  case 225:

/* Line 936 of glr.c  */
#line 576 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode) {parseReg(currentVerilog);}vbufreset();}
    break;

  case 226:

/* Line 936 of glr.c  */
#line 577 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode) {parseReg(currentVerilog);}vbufreset();}
    break;

  case 242:

/* Line 936 of glr.c  */
#line 616 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode) {
                                                                   							parseReg(currentVerilog);}
																							vbufreset();}
    break;

  case 243:

/* Line 936 of glr.c  */
#line 619 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode) parseReg(currentVerilog);vbufreset();}
    break;

  case 244:

/* Line 936 of glr.c  */
#line 627 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode) {parseReg(currentVerilog);}vbufreset();}
    break;

  case 245:

/* Line 936 of glr.c  */
#line 629 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {
                          			 if(currVerilogType==VerilogDocGen::PARAMETER && !parseCode)
									 parseParam(currentVerilog);
									 vbufreset();
	                   }
    break;

  case 249:

/* Line 936 of glr.c  */
#line 658 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode && currentFunctionVerilog)
						                                {
														  currentFunctionVerilog->endBodyLine=getVerilogPrevLine();
														} vbufreset(); }
    break;

  case 250:

/* Line 936 of glr.c  */
#line 666 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode && currentFunctionVerilog){currentFunctionVerilog->endBodyLine=getVerilogPrevLine();} vbufreset(); }
    break;

  case 252:

/* Line 936 of glr.c  */
#line 670 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    { vbufreset(); }
    break;

  case 253:

/* Line 936 of glr.c  */
#line 674 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {  if(!parseCode){
                             //    printf("\n  funcname [%s] --\n",getVerilogString());
                                 currentFunctionVerilog=VerilogDocGen::makeNewEntry("",Entry::FUNCTION_SEC,VerilogDocGen::FUNCTION);
								 currentFunctionVerilog->fileName=getVerilogParsingFile();
								 parseFunction(currentFunctionVerilog);
								 CurrState=VerilogDocGen::STATE_FUNCTION;
								 }
								 vbufreset();
							   }
    break;

  case 267:

/* Line 936 of glr.c  */
#line 710 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=0;}
    break;

  case 270:

/* Line 936 of glr.c  */
#line 724 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode && currentFunctionVerilog) { currentFunctionVerilog->endBodyLine=getVerilogPrevLine();} vbufreset();}
    break;

  case 272:

/* Line 936 of glr.c  */
#line 728 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode && currentFunctionVerilog) { currentFunctionVerilog->endBodyLine=getVerilogPrevLine();} vbufreset();}
    break;

  case 273:

/* Line 936 of glr.c  */
#line 730 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode && currentFunctionVerilog) { currentFunctionVerilog->endBodyLine=getVerilogPrevLine();} vbufreset();}
    break;

  case 274:

/* Line 936 of glr.c  */
#line 731 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    { vbufreset();}
    break;

  case 275:

/* Line 936 of glr.c  */
#line 734 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {  if(!parseCode){
                             //    printf("\n  funcname [%s] --\n",getVerilogString());
                                 currentFunctionVerilog=VerilogDocGen::makeNewEntry("",Entry::FUNCTION_SEC,VerilogDocGen::TASK);
								 currentFunctionVerilog->fileName=getVerilogParsingFile();
								 parseFunction(currentFunctionVerilog);
								 CurrState=VerilogDocGen::STATE_FUNCTION;
								 }
								 vbufreset();
							   }
    break;

  case 285:

/* Line 936 of glr.c  */
#line 770 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {
                             if(!parseCode){
							   parsePortDir(currentVerilog,3);}
							   vbufreset();
                     }
    break;

  case 286:

/* Line 936 of glr.c  */
#line 775 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode){
							   parsePortDir(currentVerilog,3);}
							   vbufreset();
                      }
    break;

  case 287:

/* Line 936 of glr.c  */
#line 779 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode){
							   parsePortDir(currentVerilog,3);}
							   vbufreset();
                       }
    break;

  case 288:

/* Line 936 of glr.c  */
#line 784 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {
                             if(!parseCode){
							   parsePortDir(currentVerilog,3);}
							   vbufreset();
                   }
    break;

  case 289:

/* Line 936 of glr.c  */
#line 789 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {
                             if(!parseCode){
							   parsePortDir(currentVerilog,3);}
							   vbufreset();
                    }
    break;

  case 296:

/* Line 936 of glr.c  */
#line 807 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    { if(!parseCode )currVerilogType=VerilogDocGen::INOUT;}
    break;

  case 297:

/* Line 936 of glr.c  */
#line 808 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    { if(!parseCode)currVerilogType=VerilogDocGen::OUTPUT;}
    break;

  case 298:

/* Line 936 of glr.c  */
#line 809 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    { if(!parseCode)currVerilogType=VerilogDocGen::INPUT;}
    break;

  case 299:

/* Line 936 of glr.c  */
#line 810 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    { if(!parseCode){parsePortDir(currentVerilog,3);vbufreset();}}
    break;

  case 302:

/* Line 936 of glr.c  */
#line 818 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode){currVerilogType=VerilogDocGen::INPUT;parsePortDir(currentVerilog,3);}vbufreset();}
    break;

  case 303:

/* Line 936 of glr.c  */
#line 819 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode){currVerilogType=VerilogDocGen::INPUT;parsePortDir(currentVerilog,3);}vbufreset();}
    break;

  case 304:

/* Line 936 of glr.c  */
#line 820 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode){currVerilogType=VerilogDocGen::INPUT;parsePortDir(currentVerilog,3);}vbufreset();}
    break;

  case 305:

/* Line 936 of glr.c  */
#line 821 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode){currVerilogType=VerilogDocGen::INPUT;parsePortDir(currentVerilog,3);}vbufreset();}
    break;

  case 306:

/* Line 936 of glr.c  */
#line 822 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode){currVerilogType=VerilogDocGen::INPUT;parsePortDir(currentVerilog,3);}vbufreset();}
    break;

  case 307:

/* Line 936 of glr.c  */
#line 823 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode){currVerilogType=VerilogDocGen::INPUT;parsePortDir(currentVerilog,3);}vbufreset();}
    break;

  case 308:

/* Line 936 of glr.c  */
#line 824 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode){currVerilogType=VerilogDocGen::INPUT;parsePortDir(currentVerilog,3);}vbufreset();}
    break;

  case 309:

/* Line 936 of glr.c  */
#line 825 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    { vbufreset(); }
    break;

  case 322:

/* Line 936 of glr.c  */
#line 849 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 323:

/* Line 936 of glr.c  */
#line 850 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 324:

/* Line 936 of glr.c  */
#line 851 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 334:

/* Line 936 of glr.c  */
#line 872 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    { vbufreset(); }
    break;

  case 347:

/* Line 936 of glr.c  */
#line 914 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    { 
                    						     moduleParamName=prevName;	
                    					         moduleLine=c_lloc.first_line;
                    						}
    break;

  case 348:

/* Line 936 of glr.c  */
#line 917 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();moduleLine=0;}
    break;

  case 350:

/* Line 936 of glr.c  */
#line 918 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 358:

/* Line 936 of glr.c  */
#line 933 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {}
    break;

  case 361:

/* Line 936 of glr.c  */
#line 940 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    { }
    break;

  case 363:

/* Line 936 of glr.c  */
#line 945 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 364:

/* Line 936 of glr.c  */
#line 946 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    { vbufreset();}
    break;

  case 365:

/* Line 936 of glr.c  */
#line 950 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {vbufreset(); currVerilogType=0;}
    break;

  case 366:

/* Line 936 of glr.c  */
#line 951 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {vbufreset(); currVerilogType=0;}
    break;

  case 367:

/* Line 936 of glr.c  */
#line 952 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {vbufreset(); currVerilogType=0;}
    break;

  case 368:

/* Line 936 of glr.c  */
#line 955 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    { 
                            const char *name=(((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.cstr);
                            QCString firstName(name);
							int u=getVerilogEndLine();
							QCString secName(getVerilogString());
							 if(moduleParamName.isEmpty()){
							   moduleParamName=secName;
							  moduleLine=c_lloc.last_line;
							   }
							 parseModuleInst(firstName,moduleParamName);
							 moduleParamName.resize(0);
							     if(parseCode){
							  currVerilogType=VerilogDocGen::COMPONENT;
							  vbufreset();
							  }
							  }
    break;

  case 377:

/* Line 936 of glr.c  */
#line 1001 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {CurrState=VerilogDocGen::STATE_GENERATE;generateItem=true;}
    break;

  case 378:

/* Line 936 of glr.c  */
#line 1001 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {CurrState=0;generateItem=false;}
    break;

  case 379:

/* Line 936 of glr.c  */
#line 1002 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {CurrState=0;generateItem=false;}
    break;

  case 384:

/* Line 936 of glr.c  */
#line 1015 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 385:

/* Line 936 of glr.c  */
#line 1016 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 386:

/* Line 936 of glr.c  */
#line 1017 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 387:

/* Line 936 of glr.c  */
#line 1018 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 388:

/* Line 936 of glr.c  */
#line 1019 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 401:

/* Line 936 of glr.c  */
#line 1047 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    { vbufreset();}
    break;

  case 402:

/* Line 936 of glr.c  */
#line 1048 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    { vbufreset();}
    break;

  case 403:

/* Line 936 of glr.c  */
#line 1057 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();currentVerilog=0;}
    break;

  case 405:

/* Line 936 of glr.c  */
#line 1063 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    { if(!parseCode) { 
							               //  printf("\n  name_of_mod [%s] [%d]--\n",getVerilogString(),getVerilogLine());
                                            lastModule=VerilogDocGen::makeNewEntry("",Entry::CLASS_SEC,VerilogDocGen::MODULE);
                                             currentVerilog=lastModule;
                                             currentVerilog->protection=Private;
					                        //  currentVerilog->stat=TRUE;
					                         parseModule();
							                 CurrState=VerilogDocGen::STATE_MODULE;

										    }
                                            else {
											      parseModule();
                                              //    currVerilogType=VerilogDocGen::MODULE;
												  }
						        vbufreset();
							 }
    break;

  case 406:

/* Line 936 of glr.c  */
#line 1085 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {parseListOfPorts();vbufreset();}
    break;

  case 407:

/* Line 936 of glr.c  */
#line 1086 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {parseListOfPorts();vbufreset();}
    break;

  case 418:

/* Line 936 of glr.c  */
#line 1107 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::OUTPUT;if(!parseCode)parsePortDir(currentVerilog,3);vbufreset();}
    break;

  case 419:

/* Line 936 of glr.c  */
#line 1108 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::OUTPUT;if(!parseCode)parsePortDir(currentVerilog,3);vbufreset();}
    break;

  case 420:

/* Line 936 of glr.c  */
#line 1109 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::OUTPUT;if(!parseCode)parsePortDir(currentVerilog,3);vbufreset();}
    break;

  case 421:

/* Line 936 of glr.c  */
#line 1110 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::OUTPUT;if(!parseCode)parsePortDir(currentVerilog,3);vbufreset();}
    break;

  case 422:

/* Line 936 of glr.c  */
#line 1113 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::INPUT;if(!parseCode)parsePortDir(currentVerilog,3);vbufreset();}
    break;

  case 423:

/* Line 936 of glr.c  */
#line 1114 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    { currVerilogType=VerilogDocGen::INPUT;if(!parseCode)parsePortDir(currentVerilog,3);vbufreset();}
    break;

  case 424:

/* Line 936 of glr.c  */
#line 1116 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode) parseReg(currentVerilog);vbufreset();}
    break;

  case 425:

/* Line 936 of glr.c  */
#line 1117 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode) parseReg(currentVerilog);vbufreset();}
    break;

  case 427:

/* Line 936 of glr.c  */
#line 1127 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    { vbufreset();}
    break;

  case 428:

/* Line 936 of glr.c  */
#line 1128 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    { vbufreset();}
    break;

  case 429:

/* Line 936 of glr.c  */
#line 1129 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    { vbufreset();}
    break;

  case 430:

/* Line 936 of glr.c  */
#line 1130 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    { vbufreset();}
    break;

  case 435:

/* Line 936 of glr.c  */
#line 1144 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    { vbufreset(); }
    break;

  case 436:

/* Line 936 of glr.c  */
#line 1145 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    { vbufreset(); }
    break;

  case 437:

/* Line 936 of glr.c  */
#line 1148 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    { identVerilog+=(((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.cstr);writeDigit(); }
    break;

  case 449:

/* Line 936 of glr.c  */
#line 1173 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    { identVerilog+=(((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.cstr);writeDigit(); }
    break;

  case 468:

/* Line 936 of glr.c  */
#line 1218 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    { vbufreset(); }
    break;

  case 469:

/* Line 936 of glr.c  */
#line 1219 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    { vbufreset();  }
    break;

  case 470:

/* Line 936 of glr.c  */
#line 1222 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {
                               currVerilogType=VerilogDocGen::ALWAYS;
                               prevName.resize(0);
                     		   }
    break;

  case 471:

/* Line 936 of glr.c  */
#line 1225 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {
                                            if(!parseCode && currentFunctionVerilog)
											 {
											  currentFunctionVerilog->endBodyLine=getVerilogEndLine();
											  if( currentFunctionVerilog->endBodyLine<currentFunctionVerilog->startLine || c_lloc.first_line>currentFunctionVerilog->endBodyLine ) // awlays without end
											   currentFunctionVerilog->endBodyLine=c_lloc.first_line;
											  currVerilogType=0;
											  }
											   vbufreset();}
    break;

  case 472:

/* Line 936 of glr.c  */
#line 1234 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    { vbufreset();currVerilogType=0;}
    break;

  case 476:

/* Line 936 of glr.c  */
#line 1241 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 480:

/* Line 936 of glr.c  */
#line 1247 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 502:

/* Line 936 of glr.c  */
#line 1299 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {if(!parseCode && currVerilogType==VerilogDocGen::ALWAYS)parseAlways(true);}
    break;

  case 509:

/* Line 936 of glr.c  */
#line 1308 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {
                                            if(!parseCode){
                                             if(currentFunctionVerilog && currentFunctionVerilog->spec==VerilogDocGen::ALWAYS){
                                             VerilogDocGen::adjustMemberName(prevName); 
                                             currentFunctionVerilog->name=prevName;
                                            }
                                          }
                                         }
    break;

  case 522:

/* Line 936 of glr.c  */
#line 1336 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 537:

/* Line 936 of glr.c  */
#line 1363 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 540:

/* Line 936 of glr.c  */
#line 1368 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {currVerilogType=0;}
    break;

  case 541:

/* Line 936 of glr.c  */
#line 1368 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {currVerilogType=0;}
    break;

  case 543:

/* Line 936 of glr.c  */
#line 1374 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    { parseAlways(); vbufreset();currVerilogType=0;}
    break;

  case 544:

/* Line 936 of glr.c  */
#line 1375 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    { parseAlways(); vbufreset();currVerilogType=0;}
    break;

  case 545:

/* Line 936 of glr.c  */
#line 1376 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    { parseAlways(); vbufreset();currVerilogType=0;}
    break;

  case 546:

/* Line 936 of glr.c  */
#line 1377 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    { parseAlways(); vbufreset();currVerilogType=0;}
    break;

  case 547:

/* Line 936 of glr.c  */
#line 1378 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    { parseAlways(); vbufreset();currVerilogType=0;}
    break;

  case 565:

/* Line 936 of glr.c  */
#line 1417 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    { vbufreset();}
    break;

  case 567:

/* Line 936 of glr.c  */
#line 1419 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    { vbufreset();}
    break;

  case 569:

/* Line 936 of glr.c  */
#line 1421 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    { vbufreset();}
    break;

  case 591:

/* Line 936 of glr.c  */
#line 1473 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    { vbufreset(); }
    break;

  case 592:

/* Line 936 of glr.c  */
#line 1474 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    { vbufreset(); }
    break;

  case 593:

/* Line 936 of glr.c  */
#line 1478 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    { vbufreset(); }
    break;

  case 594:

/* Line 936 of glr.c  */
#line 1479 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    { vbufreset(); }
    break;

  case 595:

/* Line 936 of glr.c  */
#line 1483 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 596:

/* Line 936 of glr.c  */
#line 1484 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 597:

/* Line 936 of glr.c  */
#line 1485 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 598:

/* Line 936 of glr.c  */
#line 1486 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 599:

/* Line 936 of glr.c  */
#line 1487 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 788:

/* Line 936 of glr.c  */
#line 1900 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    { identVerilog+=(((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.cstr);writeDigit(); }
    break;

  case 789:

/* Line 936 of glr.c  */
#line 1901 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {if(parseCode) {writePrevVerilogWords(identVerilog);writeVerilogFont("vhdllogic",identVerilog.data());identVerilog.resize(0);}}
    break;

  case 790:

/* Line 936 of glr.c  */
#line 1912 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {vbufreset();}
    break;

  case 791:

/* Line 936 of glr.c  */
#line 1913 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    { vbufreset(); }
    break;

  case 793:

/* Line 936 of glr.c  */
#line 1917 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    { vbufreset(); }
    break;

  case 794:

/* Line 936 of glr.c  */
#line 1918 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    { vbufreset(); }
    break;

  case 800:

/* Line 936 of glr.c  */
#line 1930 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {
										 }
    break;

  case 801:

/* Line 936 of glr.c  */
#line 1934 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    { parseString(); }
    break;

  case 802:

/* Line 936 of glr.c  */
#line 1937 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {
                    	//if(parseCode) 
						      identVerilog+=(((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.cstr); 
						  //    fprintf(stderr,"\n String: %s",identVerilog.data());
							 }
    break;

  case 803:

/* Line 936 of glr.c  */
#line 1942 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"
    {}
    break;



/* Line 936 of glr.c  */
#line 5687 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.cpp"
      default: break;
    }

  return yyok;
# undef yyerrok
# undef YYABORT
# undef YYACCEPT
# undef YYERROR
# undef YYBACKUP
# undef yyclearin
# undef YYRECOVERING
}


/*ARGSUSED*/ static void
yyuserMerge (int yyn, YYSTYPE* yy0, YYSTYPE* yy1)
{
  YYUSE (yy0);
  YYUSE (yy1);

  switch (yyn)
    {
      
      default: break;
    }
}

			      /* Bison grammar-table manipulation.  */

/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

/*ARGSUSED*/
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, YYLTYPE *yylocationp)
{
  YYUSE (yyvaluep);
  YYUSE (yylocationp);

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {

      default:
	break;
    }
}

/** Number of symbols composing the right hand side of rule #RULE.  */
static inline int
yyrhsLength (yyRuleNum yyrule)
{
  return yyr2[yyrule];
}

static void
yydestroyGLRState (char const *yymsg, yyGLRState *yys)
{
  if (yys->yyresolved)
    yydestruct (yymsg, yystos[yys->yylrState],
		&yys->yysemantics.yysval, &yys->yyloc);
  else
    {
#if YYDEBUG
      if (yydebug)
	{
	  if (yys->yysemantics.yyfirstVal)
	    YYFPRINTF (stderr, "%s unresolved ", yymsg);
	  else
	    YYFPRINTF (stderr, "%s incomplete ", yymsg);
	  yy_symbol_print (stderr, yystos[yys->yylrState],
			   NULL, &yys->yyloc);
	  YYFPRINTF (stderr, "\n");
	}
#endif

      if (yys->yysemantics.yyfirstVal)
	{
	  yySemanticOption *yyoption = yys->yysemantics.yyfirstVal;
	  yyGLRState *yyrh;
	  int yyn;
	  for (yyrh = yyoption->yystate, yyn = yyrhsLength (yyoption->yyrule);
	       yyn > 0;
	       yyrh = yyrh->yypred, yyn -= 1)
	    yydestroyGLRState (yymsg, yyrh);
	}
    }
}

/** Left-hand-side symbol for rule #RULE.  */
static inline yySymbol
yylhsNonterm (yyRuleNum yyrule)
{
  return yyr1[yyrule];
}

#define yyis_pact_ninf(yystate) \
  ((yystate) == YYPACT_NINF)

/** True iff LR state STATE has only a default reduction (regardless
 *  of token).  */
static inline yybool
yyisDefaultedState (yyStateNum yystate)
{
  return yyis_pact_ninf (yypact[yystate]);
}

/** The default reduction for STATE, assuming it has one.  */
static inline yyRuleNum
yydefaultAction (yyStateNum yystate)
{
  return yydefact[yystate];
}

#define yyis_table_ninf(yytable_value) \
  YYID (0)

/** Set *YYACTION to the action to take in YYSTATE on seeing YYTOKEN.
 *  Result R means
 *    R < 0:  Reduce on rule -R.
 *    R = 0:  Error.
 *    R > 0:  Shift to state R.
 *  Set *CONFLICTS to a pointer into yyconfl to 0-terminated list of
 *  conflicting reductions.
 */
static inline void
yygetLRActions (yyStateNum yystate, int yytoken,
		int* yyaction, const short int** yyconflicts)
{
  int yyindex = yypact[yystate] + yytoken;
  if (yyindex < 0 || YYLAST < yyindex || yycheck[yyindex] != yytoken)
    {
      *yyaction = -yydefact[yystate];
      *yyconflicts = yyconfl;
    }
  else if (! yyis_table_ninf (yytable[yyindex]))
    {
      *yyaction = yytable[yyindex];
      *yyconflicts = yyconfl + yyconflp[yyindex];
    }
  else
    {
      *yyaction = 0;
      *yyconflicts = yyconfl + yyconflp[yyindex];
    }
}

static inline yyStateNum
yyLRgotoState (yyStateNum yystate, yySymbol yylhs)
{
  int yyr;
  yyr = yypgoto[yylhs - YYNTOKENS] + yystate;
  if (0 <= yyr && yyr <= YYLAST && yycheck[yyr] == yystate)
    return yytable[yyr];
  else
    return yydefgoto[yylhs - YYNTOKENS];
}

static inline yybool
yyisShiftAction (int yyaction)
{
  return 0 < yyaction;
}

static inline yybool
yyisErrorAction (int yyaction)
{
  return yyaction == 0;
}

				/* GLRStates */

/** Return a fresh GLRStackItem.  Callers should call
 * YY_RESERVE_GLRSTACK afterwards to make sure there is sufficient
 * headroom.  */

static inline yyGLRStackItem*
yynewGLRStackItem (yyGLRStack* yystackp, yybool yyisState)
{
  yyGLRStackItem* yynewItem = yystackp->yynextFree;
  yystackp->yyspaceLeft -= 1;
  yystackp->yynextFree += 1;
  yynewItem->yystate.yyisState = yyisState;
  return yynewItem;
}

/** Add a new semantic action that will execute the action for rule
 *  RULENUM on the semantic values in RHS to the list of
 *  alternative actions for STATE.  Assumes that RHS comes from
 *  stack #K of *STACKP. */
static void
yyaddDeferredAction (yyGLRStack* yystackp, size_t yyk, yyGLRState* yystate,
		     yyGLRState* rhs, yyRuleNum yyrule)
{
  yySemanticOption* yynewOption =
    &yynewGLRStackItem (yystackp, yyfalse)->yyoption;
  yynewOption->yystate = rhs;
  yynewOption->yyrule = yyrule;
  if (yystackp->yytops.yylookaheadNeeds[yyk])
    {
      yynewOption->yyrawchar = yychar;
      yynewOption->yyval = yylval;
      yynewOption->yyloc = yylloc;
    }
  else
    yynewOption->yyrawchar = YYEMPTY;
  yynewOption->yynext = yystate->yysemantics.yyfirstVal;
  yystate->yysemantics.yyfirstVal = yynewOption;

  YY_RESERVE_GLRSTACK (yystackp);
}

				/* GLRStacks */

/** Initialize SET to a singleton set containing an empty stack.  */
static yybool
yyinitStateSet (yyGLRStateSet* yyset)
{
  yyset->yysize = 1;
  yyset->yycapacity = 16;
  yyset->yystates = (yyGLRState**) YYMALLOC (16 * sizeof yyset->yystates[0]);
  if (! yyset->yystates)
    return yyfalse;
  yyset->yystates[0] = NULL;
  yyset->yylookaheadNeeds =
    (yybool*) YYMALLOC (16 * sizeof yyset->yylookaheadNeeds[0]);
  if (! yyset->yylookaheadNeeds)
    {
      YYFREE (yyset->yystates);
      return yyfalse;
    }
  return yytrue;
}

static void yyfreeStateSet (yyGLRStateSet* yyset)
{
  YYFREE (yyset->yystates);
  YYFREE (yyset->yylookaheadNeeds);
}

/** Initialize STACK to a single empty stack, with total maximum
 *  capacity for all stacks of SIZE.  */
static yybool
yyinitGLRStack (yyGLRStack* yystackp, size_t yysize)
{
  yystackp->yyerrState = 0;
  yynerrs = 0;
  yystackp->yyspaceLeft = yysize;
  yystackp->yyitems =
    (yyGLRStackItem*) YYMALLOC (yysize * sizeof yystackp->yynextFree[0]);
  if (!yystackp->yyitems)
    return yyfalse;
  yystackp->yynextFree = yystackp->yyitems;
  yystackp->yysplitPoint = NULL;
  yystackp->yylastDeleted = NULL;
  return yyinitStateSet (&yystackp->yytops);
}


#if YYSTACKEXPANDABLE
# define YYRELOC(YYFROMITEMS,YYTOITEMS,YYX,YYTYPE) \
  &((YYTOITEMS) - ((YYFROMITEMS) - (yyGLRStackItem*) (YYX)))->YYTYPE

/** If STACK is expandable, extend it.  WARNING: Pointers into the
    stack from outside should be considered invalid after this call.
    We always expand when there are 1 or fewer items left AFTER an
    allocation, so that we can avoid having external pointers exist
    across an allocation.  */
static void
yyexpandGLRStack (yyGLRStack* yystackp)
{
  yyGLRStackItem* yynewItems;
  yyGLRStackItem* yyp0, *yyp1;
  size_t yysize, yynewSize;
  size_t yyn;
  yysize = yystackp->yynextFree - yystackp->yyitems;
  if (YYMAXDEPTH - YYHEADROOM < yysize)
    yyMemoryExhausted (yystackp);
  yynewSize = 2*yysize;
  if (YYMAXDEPTH < yynewSize)
    yynewSize = YYMAXDEPTH;
  yynewItems = (yyGLRStackItem*) YYMALLOC (yynewSize * sizeof yynewItems[0]);
  if (! yynewItems)
    yyMemoryExhausted (yystackp);
  for (yyp0 = yystackp->yyitems, yyp1 = yynewItems, yyn = yysize;
       0 < yyn;
       yyn -= 1, yyp0 += 1, yyp1 += 1)
    {
      *yyp1 = *yyp0;
      if (*(yybool *) yyp0)
	{
	  yyGLRState* yys0 = &yyp0->yystate;
	  yyGLRState* yys1 = &yyp1->yystate;
	  if (yys0->yypred != NULL)
	    yys1->yypred =
	      YYRELOC (yyp0, yyp1, yys0->yypred, yystate);
	  if (! yys0->yyresolved && yys0->yysemantics.yyfirstVal != NULL)
	    yys1->yysemantics.yyfirstVal =
	      YYRELOC(yyp0, yyp1, yys0->yysemantics.yyfirstVal, yyoption);
	}
      else
	{
	  yySemanticOption* yyv0 = &yyp0->yyoption;
	  yySemanticOption* yyv1 = &yyp1->yyoption;
	  if (yyv0->yystate != NULL)
	    yyv1->yystate = YYRELOC (yyp0, yyp1, yyv0->yystate, yystate);
	  if (yyv0->yynext != NULL)
	    yyv1->yynext = YYRELOC (yyp0, yyp1, yyv0->yynext, yyoption);
	}
    }
  if (yystackp->yysplitPoint != NULL)
    yystackp->yysplitPoint = YYRELOC (yystackp->yyitems, yynewItems,
				 yystackp->yysplitPoint, yystate);

  for (yyn = 0; yyn < yystackp->yytops.yysize; yyn += 1)
    if (yystackp->yytops.yystates[yyn] != NULL)
      yystackp->yytops.yystates[yyn] =
	YYRELOC (yystackp->yyitems, yynewItems,
		 yystackp->yytops.yystates[yyn], yystate);
  YYFREE (yystackp->yyitems);
  yystackp->yyitems = yynewItems;
  yystackp->yynextFree = yynewItems + yysize;
  yystackp->yyspaceLeft = yynewSize - yysize;
}
#endif

static void
yyfreeGLRStack (yyGLRStack* yystackp)
{
  YYFREE (yystackp->yyitems);
  yyfreeStateSet (&yystackp->yytops);
}

/** Assuming that S is a GLRState somewhere on STACK, update the
 *  splitpoint of STACK, if needed, so that it is at least as deep as
 *  S.  */
static inline void
yyupdateSplit (yyGLRStack* yystackp, yyGLRState* yys)
{
  if (yystackp->yysplitPoint != NULL && yystackp->yysplitPoint > yys)
    yystackp->yysplitPoint = yys;
}

/** Invalidate stack #K in STACK.  */
static inline void
yymarkStackDeleted (yyGLRStack* yystackp, size_t yyk)
{
  if (yystackp->yytops.yystates[yyk] != NULL)
    yystackp->yylastDeleted = yystackp->yytops.yystates[yyk];
  yystackp->yytops.yystates[yyk] = NULL;
}

/** Undelete the last stack that was marked as deleted.  Can only be
    done once after a deletion, and only when all other stacks have
    been deleted.  */
static void
yyundeleteLastStack (yyGLRStack* yystackp)
{
  if (yystackp->yylastDeleted == NULL || yystackp->yytops.yysize != 0)
    return;
  yystackp->yytops.yystates[0] = yystackp->yylastDeleted;
  yystackp->yytops.yysize = 1;
  YYDPRINTF ((stderr, "Restoring last deleted stack as stack #0.\n"));
  yystackp->yylastDeleted = NULL;
}

static inline void
yyremoveDeletes (yyGLRStack* yystackp)
{
  size_t yyi, yyj;
  yyi = yyj = 0;
  while (yyj < yystackp->yytops.yysize)
    {
      if (yystackp->yytops.yystates[yyi] == NULL)
	{
	  if (yyi == yyj)
	    {
	      YYDPRINTF ((stderr, "Removing dead stacks.\n"));
	    }
	  yystackp->yytops.yysize -= 1;
	}
      else
	{
	  yystackp->yytops.yystates[yyj] = yystackp->yytops.yystates[yyi];
	  /* In the current implementation, it's unnecessary to copy
	     yystackp->yytops.yylookaheadNeeds[yyi] since, after
	     yyremoveDeletes returns, the parser immediately either enters
	     deterministic operation or shifts a token.  However, it doesn't
	     hurt, and the code might evolve to need it.  */
	  yystackp->yytops.yylookaheadNeeds[yyj] =
	    yystackp->yytops.yylookaheadNeeds[yyi];
	  if (yyj != yyi)
	    {
	      YYDPRINTF ((stderr, "Rename stack %lu -> %lu.\n",
			  (unsigned long int) yyi, (unsigned long int) yyj));
	    }
	  yyj += 1;
	}
      yyi += 1;
    }
}

/** Shift to a new state on stack #K of STACK, corresponding to LR state
 * LRSTATE, at input position POSN, with (resolved) semantic value SVAL.  */
static inline void
yyglrShift (yyGLRStack* yystackp, size_t yyk, yyStateNum yylrState,
	    size_t yyposn,
	    YYSTYPE* yyvalp, YYLTYPE* yylocp)
{
  yyGLRState* yynewState = &yynewGLRStackItem (yystackp, yytrue)->yystate;

  yynewState->yylrState = yylrState;
  yynewState->yyposn = yyposn;
  yynewState->yyresolved = yytrue;
  yynewState->yypred = yystackp->yytops.yystates[yyk];
  yynewState->yysemantics.yysval = *yyvalp;
  yynewState->yyloc = *yylocp;
  yystackp->yytops.yystates[yyk] = yynewState;

  YY_RESERVE_GLRSTACK (yystackp);
}

/** Shift stack #K of YYSTACK, to a new state corresponding to LR
 *  state YYLRSTATE, at input position YYPOSN, with the (unresolved)
 *  semantic value of YYRHS under the action for YYRULE.  */
static inline void
yyglrShiftDefer (yyGLRStack* yystackp, size_t yyk, yyStateNum yylrState,
		 size_t yyposn, yyGLRState* rhs, yyRuleNum yyrule)
{
  yyGLRState* yynewState = &yynewGLRStackItem (yystackp, yytrue)->yystate;

  yynewState->yylrState = yylrState;
  yynewState->yyposn = yyposn;
  yynewState->yyresolved = yyfalse;
  yynewState->yypred = yystackp->yytops.yystates[yyk];
  yynewState->yysemantics.yyfirstVal = NULL;
  yystackp->yytops.yystates[yyk] = yynewState;

  /* Invokes YY_RESERVE_GLRSTACK.  */
  yyaddDeferredAction (yystackp, yyk, yynewState, rhs, yyrule);
}

/** Pop the symbols consumed by reduction #RULE from the top of stack
 *  #K of STACK, and perform the appropriate semantic action on their
 *  semantic values.  Assumes that all ambiguities in semantic values
 *  have been previously resolved.  Set *VALP to the resulting value,
 *  and *LOCP to the computed location (if any).  Return value is as
 *  for userAction.  */
static inline YYRESULTTAG
yydoAction (yyGLRStack* yystackp, size_t yyk, yyRuleNum yyrule,
	    YYSTYPE* yyvalp, YYLTYPE* yylocp)
{
  int yynrhs = yyrhsLength (yyrule);

  if (yystackp->yysplitPoint == NULL)
    {
      /* Standard special case: single stack.  */
      yyGLRStackItem* rhs = (yyGLRStackItem*) yystackp->yytops.yystates[yyk];
      YYASSERT (yyk == 0);
      yystackp->yynextFree -= yynrhs;
      yystackp->yyspaceLeft += yynrhs;
      yystackp->yytops.yystates[0] = & yystackp->yynextFree[-1].yystate;
      return yyuserAction (yyrule, yynrhs, rhs,
			   yyvalp, yylocp, yystackp);
    }
  else
    {
      /* At present, doAction is never called in nondeterministic
       * mode, so this branch is never taken.  It is here in
       * anticipation of a future feature that will allow immediate
       * evaluation of selected actions in nondeterministic mode.  */
      int yyi;
      yyGLRState* yys;
      yyGLRStackItem yyrhsVals[YYMAXRHS + YYMAXLEFT + 1];
      yys = yyrhsVals[YYMAXRHS + YYMAXLEFT].yystate.yypred
	= yystackp->yytops.yystates[yyk];
      if (yynrhs == 0)
	/* Set default location.  */
	yyrhsVals[YYMAXRHS + YYMAXLEFT - 1].yystate.yyloc = yys->yyloc;
      for (yyi = 0; yyi < yynrhs; yyi += 1)
	{
	  yys = yys->yypred;
	  YYASSERT (yys);
	}
      yyupdateSplit (yystackp, yys);
      yystackp->yytops.yystates[yyk] = yys;
      return yyuserAction (yyrule, yynrhs, yyrhsVals + YYMAXRHS + YYMAXLEFT - 1,
			   yyvalp, yylocp, yystackp);
    }
}

#if !YYDEBUG
# define YY_REDUCE_PRINT(Args)
#else
# define YY_REDUCE_PRINT(Args)		\
do {					\
  if (yydebug)				\
    yy_reduce_print Args;		\
} while (YYID (0))

/*----------------------------------------------------------.
| Report that the RULE is going to be reduced on stack #K.  |
`----------------------------------------------------------*/

/*ARGSUSED*/ static inline void
yy_reduce_print (yyGLRStack* yystackp, size_t yyk, yyRuleNum yyrule,
		 YYSTYPE* yyvalp, YYLTYPE* yylocp)
{
  int yynrhs = yyrhsLength (yyrule);
  yybool yynormal __attribute__ ((__unused__)) =
    (yystackp->yysplitPoint == NULL);
  yyGLRStackItem* yyvsp = (yyGLRStackItem*) yystackp->yytops.yystates[yyk];
  int yylow = 1;
  int yyi;
  YYUSE (yyvalp);
  YYUSE (yylocp);
  YYFPRINTF (stderr, "Reducing stack %lu by rule %d (line %lu):\n",
	     (unsigned long int) yyk, yyrule - 1,
	     (unsigned long int) yyrline[yyrule]);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
		       &(((yyGLRStackItem const *)yyvsp)[YYFILL ((yyi + 1) - (yynrhs))].yystate.yysemantics.yysval)
		       , &(((yyGLRStackItem const *)yyvsp)[YYFILL ((yyi + 1) - (yynrhs))].yystate.yyloc)		       );
      YYFPRINTF (stderr, "\n");
    }
}
#endif

/** Pop items off stack #K of STACK according to grammar rule RULE,
 *  and push back on the resulting nonterminal symbol.  Perform the
 *  semantic action associated with RULE and store its value with the
 *  newly pushed state, if FORCEEVAL or if STACK is currently
 *  unambiguous.  Otherwise, store the deferred semantic action with
 *  the new state.  If the new state would have an identical input
 *  position, LR state, and predecessor to an existing state on the stack,
 *  it is identified with that existing state, eliminating stack #K from
 *  the STACK.  In this case, the (necessarily deferred) semantic value is
 *  added to the options for the existing state's semantic value.
 */
static inline YYRESULTTAG
yyglrReduce (yyGLRStack* yystackp, size_t yyk, yyRuleNum yyrule,
	     yybool yyforceEval)
{
  size_t yyposn = yystackp->yytops.yystates[yyk]->yyposn;

  if (yyforceEval || yystackp->yysplitPoint == NULL)
    {
      YYSTYPE yysval;
      YYLTYPE yyloc;

      YY_REDUCE_PRINT ((yystackp, yyk, yyrule, &yysval, &yyloc));
      YYCHK (yydoAction (yystackp, yyk, yyrule, &yysval,
			 &yyloc));
      YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyrule], &yysval, &yyloc);
      yyglrShift (yystackp, yyk,
		  yyLRgotoState (yystackp->yytops.yystates[yyk]->yylrState,
				 yylhsNonterm (yyrule)),
		  yyposn, &yysval, &yyloc);
    }
  else
    {
      size_t yyi;
      int yyn;
      yyGLRState* yys, *yys0 = yystackp->yytops.yystates[yyk];
      yyStateNum yynewLRState;

      for (yys = yystackp->yytops.yystates[yyk], yyn = yyrhsLength (yyrule);
	   0 < yyn; yyn -= 1)
	{
	  yys = yys->yypred;
	  YYASSERT (yys);
	}
      yyupdateSplit (yystackp, yys);
      yynewLRState = yyLRgotoState (yys->yylrState, yylhsNonterm (yyrule));
      YYDPRINTF ((stderr,
		  "Reduced stack %lu by rule #%d; action deferred.  Now in state %d.\n",
		  (unsigned long int) yyk, yyrule - 1, yynewLRState));
      for (yyi = 0; yyi < yystackp->yytops.yysize; yyi += 1)
	if (yyi != yyk && yystackp->yytops.yystates[yyi] != NULL)
	  {
	    yyGLRState* yyp, *yysplit = yystackp->yysplitPoint;
	    yyp = yystackp->yytops.yystates[yyi];
	    while (yyp != yys && yyp != yysplit && yyp->yyposn >= yyposn)
	      {
		if (yyp->yylrState == yynewLRState && yyp->yypred == yys)
		  {
		    yyaddDeferredAction (yystackp, yyk, yyp, yys0, yyrule);
		    yymarkStackDeleted (yystackp, yyk);
		    YYDPRINTF ((stderr, "Merging stack %lu into stack %lu.\n",
				(unsigned long int) yyk,
				(unsigned long int) yyi));
		    return yyok;
		  }
		yyp = yyp->yypred;
	      }
	  }
      yystackp->yytops.yystates[yyk] = yys;
      yyglrShiftDefer (yystackp, yyk, yynewLRState, yyposn, yys0, yyrule);
    }
  return yyok;
}

static size_t
yysplitStack (yyGLRStack* yystackp, size_t yyk)
{
  if (yystackp->yysplitPoint == NULL)
    {
      YYASSERT (yyk == 0);
      yystackp->yysplitPoint = yystackp->yytops.yystates[yyk];
    }
  if (yystackp->yytops.yysize >= yystackp->yytops.yycapacity)
    {
      yyGLRState** yynewStates;
      yybool* yynewLookaheadNeeds;

      yynewStates = NULL;

      if (yystackp->yytops.yycapacity
	  > (YYSIZEMAX / (2 * sizeof yynewStates[0])))
	yyMemoryExhausted (yystackp);
      yystackp->yytops.yycapacity *= 2;

      yynewStates =
	(yyGLRState**) YYREALLOC (yystackp->yytops.yystates,
				  (yystackp->yytops.yycapacity
				   * sizeof yynewStates[0]));
      if (yynewStates == NULL)
	yyMemoryExhausted (yystackp);
      yystackp->yytops.yystates = yynewStates;

      yynewLookaheadNeeds =
	(yybool*) YYREALLOC (yystackp->yytops.yylookaheadNeeds,
			     (yystackp->yytops.yycapacity
			      * sizeof yynewLookaheadNeeds[0]));
      if (yynewLookaheadNeeds == NULL)
	yyMemoryExhausted (yystackp);
      yystackp->yytops.yylookaheadNeeds = yynewLookaheadNeeds;
    }
  yystackp->yytops.yystates[yystackp->yytops.yysize]
    = yystackp->yytops.yystates[yyk];
  yystackp->yytops.yylookaheadNeeds[yystackp->yytops.yysize]
    = yystackp->yytops.yylookaheadNeeds[yyk];
  yystackp->yytops.yysize += 1;
  return yystackp->yytops.yysize-1;
}

/** True iff Y0 and Y1 represent identical options at the top level.
 *  That is, they represent the same rule applied to RHS symbols
 *  that produce the same terminal symbols.  */
static yybool
yyidenticalOptions (yySemanticOption* yyy0, yySemanticOption* yyy1)
{
  if (yyy0->yyrule == yyy1->yyrule)
    {
      yyGLRState *yys0, *yys1;
      int yyn;
      for (yys0 = yyy0->yystate, yys1 = yyy1->yystate,
	   yyn = yyrhsLength (yyy0->yyrule);
	   yyn > 0;
	   yys0 = yys0->yypred, yys1 = yys1->yypred, yyn -= 1)
	if (yys0->yyposn != yys1->yyposn)
	  return yyfalse;
      return yytrue;
    }
  else
    return yyfalse;
}

/** Assuming identicalOptions (Y0,Y1), destructively merge the
 *  alternative semantic values for the RHS-symbols of Y1 and Y0.  */
static void
yymergeOptionSets (yySemanticOption* yyy0, yySemanticOption* yyy1)
{
  yyGLRState *yys0, *yys1;
  int yyn;
  for (yys0 = yyy0->yystate, yys1 = yyy1->yystate,
       yyn = yyrhsLength (yyy0->yyrule);
       yyn > 0;
       yys0 = yys0->yypred, yys1 = yys1->yypred, yyn -= 1)
    {
      if (yys0 == yys1)
	break;
      else if (yys0->yyresolved)
	{
	  yys1->yyresolved = yytrue;
	  yys1->yysemantics.yysval = yys0->yysemantics.yysval;
	}
      else if (yys1->yyresolved)
	{
	  yys0->yyresolved = yytrue;
	  yys0->yysemantics.yysval = yys1->yysemantics.yysval;
	}
      else
	{
	  yySemanticOption** yyz0p;
	  yySemanticOption* yyz1;
	  yyz0p = &yys0->yysemantics.yyfirstVal;
	  yyz1 = yys1->yysemantics.yyfirstVal;
	  while (YYID (yytrue))
	    {
	      if (yyz1 == *yyz0p || yyz1 == NULL)
		break;
	      else if (*yyz0p == NULL)
		{
		  *yyz0p = yyz1;
		  break;
		}
	      else if (*yyz0p < yyz1)
		{
		  yySemanticOption* yyz = *yyz0p;
		  *yyz0p = yyz1;
		  yyz1 = yyz1->yynext;
		  (*yyz0p)->yynext = yyz;
		}
	      yyz0p = &(*yyz0p)->yynext;
	    }
	  yys1->yysemantics.yyfirstVal = yys0->yysemantics.yyfirstVal;
	}
    }
}

/** Y0 and Y1 represent two possible actions to take in a given
 *  parsing state; return 0 if no combination is possible,
 *  1 if user-mergeable, 2 if Y0 is preferred, 3 if Y1 is preferred.  */
static int
yypreference (yySemanticOption* y0, yySemanticOption* y1)
{
  yyRuleNum r0 = y0->yyrule, r1 = y1->yyrule;
  int p0 = yydprec[r0], p1 = yydprec[r1];

  if (p0 == p1)
    {
      if (yymerger[r0] == 0 || yymerger[r0] != yymerger[r1])
	return 0;
      else
	return 1;
    }
  if (p0 == 0 || p1 == 0)
    return 0;
  if (p0 < p1)
    return 3;
  if (p1 < p0)
    return 2;
  return 0;
}

static YYRESULTTAG yyresolveValue (yyGLRState* yys,
				   yyGLRStack* yystackp);


/** Resolve the previous N states starting at and including state S.  If result
 *  != yyok, some states may have been left unresolved possibly with empty
 *  semantic option chains.  Regardless of whether result = yyok, each state
 *  has been left with consistent data so that yydestroyGLRState can be invoked
 *  if necessary.  */
static YYRESULTTAG
yyresolveStates (yyGLRState* yys, int yyn,
		 yyGLRStack* yystackp)
{
  if (0 < yyn)
    {
      YYASSERT (yys->yypred);
      YYCHK (yyresolveStates (yys->yypred, yyn-1, yystackp));
      if (! yys->yyresolved)
	YYCHK (yyresolveValue (yys, yystackp));
    }
  return yyok;
}

/** Resolve the states for the RHS of OPT, perform its user action, and return
 *  the semantic value and location.  Regardless of whether result = yyok, all
 *  RHS states have been destroyed (assuming the user action destroys all RHS
 *  semantic values if invoked).  */
static YYRESULTTAG
yyresolveAction (yySemanticOption* yyopt, yyGLRStack* yystackp,
		 YYSTYPE* yyvalp, YYLTYPE* yylocp)
{
  yyGLRStackItem yyrhsVals[YYMAXRHS + YYMAXLEFT + 1];
  int yynrhs;
  int yychar_current;
  YYSTYPE yylval_current;
  YYLTYPE yylloc_current;
  YYRESULTTAG yyflag;

  yynrhs = yyrhsLength (yyopt->yyrule);
  yyflag = yyresolveStates (yyopt->yystate, yynrhs, yystackp);
  if (yyflag != yyok)
    {
      yyGLRState *yys;
      for (yys = yyopt->yystate; yynrhs > 0; yys = yys->yypred, yynrhs -= 1)
	yydestroyGLRState ("Cleanup: popping", yys);
      return yyflag;
    }

  yyrhsVals[YYMAXRHS + YYMAXLEFT].yystate.yypred = yyopt->yystate;
  if (yynrhs == 0)
    /* Set default location.  */
    yyrhsVals[YYMAXRHS + YYMAXLEFT - 1].yystate.yyloc = yyopt->yystate->yyloc;
  yychar_current = yychar;
  yylval_current = yylval;
  yylloc_current = yylloc;
  yychar = yyopt->yyrawchar;
  yylval = yyopt->yyval;
  yylloc = yyopt->yyloc;
  yyflag = yyuserAction (yyopt->yyrule, yynrhs,
			   yyrhsVals + YYMAXRHS + YYMAXLEFT - 1,
			   yyvalp, yylocp, yystackp);
  yychar = yychar_current;
  yylval = yylval_current;
  yylloc = yylloc_current;
  return yyflag;
}

#if YYDEBUG
static void
yyreportTree (yySemanticOption* yyx, int yyindent)
{
  int yynrhs = yyrhsLength (yyx->yyrule);
  int yyi;
  yyGLRState* yys;
  yyGLRState* yystates[1 + YYMAXRHS];
  yyGLRState yyleftmost_state;

  for (yyi = yynrhs, yys = yyx->yystate; 0 < yyi; yyi -= 1, yys = yys->yypred)
    yystates[yyi] = yys;
  if (yys == NULL)
    {
      yyleftmost_state.yyposn = 0;
      yystates[0] = &yyleftmost_state;
    }
  else
    yystates[0] = yys;

  if (yyx->yystate->yyposn < yys->yyposn + 1)
    YYFPRINTF (stderr, "%*s%s -> <Rule %d, empty>\n",
	       yyindent, "", yytokenName (yylhsNonterm (yyx->yyrule)),
	       yyx->yyrule - 1);
  else
    YYFPRINTF (stderr, "%*s%s -> <Rule %d, tokens %lu .. %lu>\n",
	       yyindent, "", yytokenName (yylhsNonterm (yyx->yyrule)),
	       yyx->yyrule - 1, (unsigned long int) (yys->yyposn + 1),
	       (unsigned long int) yyx->yystate->yyposn);
  for (yyi = 1; yyi <= yynrhs; yyi += 1)
    {
      if (yystates[yyi]->yyresolved)
	{
	  if (yystates[yyi-1]->yyposn+1 > yystates[yyi]->yyposn)
	    YYFPRINTF (stderr, "%*s%s <empty>\n", yyindent+2, "",
		       yytokenName (yyrhs[yyprhs[yyx->yyrule]+yyi-1]));
	  else
	    YYFPRINTF (stderr, "%*s%s <tokens %lu .. %lu>\n", yyindent+2, "",
		       yytokenName (yyrhs[yyprhs[yyx->yyrule]+yyi-1]),
		       (unsigned long int) (yystates[yyi - 1]->yyposn + 1),
		       (unsigned long int) yystates[yyi]->yyposn);
	}
      else
	yyreportTree (yystates[yyi]->yysemantics.yyfirstVal, yyindent+2);
    }
}
#endif

/*ARGSUSED*/ static YYRESULTTAG
yyreportAmbiguity (yySemanticOption* yyx0,
		   yySemanticOption* yyx1)
{
  YYUSE (yyx0);
  YYUSE (yyx1);

#if YYDEBUG
  YYFPRINTF (stderr, "Ambiguity detected.\n");
  YYFPRINTF (stderr, "Option 1,\n");
  yyreportTree (yyx0, 2);
  YYFPRINTF (stderr, "\nOption 2,\n");
  yyreportTree (yyx1, 2);
  YYFPRINTF (stderr, "\n");
#endif

  yyerror (YY_("syntax is ambiguous"));
  return yyabort;
}

/** Starting at and including state S1, resolve the location for each of the
 *  previous N1 states that is unresolved.  The first semantic option of a state
 *  is always chosen.  */
static void
yyresolveLocations (yyGLRState* yys1, int yyn1,
		    yyGLRStack *yystackp)
{
  if (0 < yyn1)
    {
      yyresolveLocations (yys1->yypred, yyn1 - 1, yystackp);
      if (!yys1->yyresolved)
	{
	  yySemanticOption *yyoption;
	  yyGLRStackItem yyrhsloc[1 + YYMAXRHS];
	  int yynrhs;
	  int yychar_current;
	  YYSTYPE yylval_current;
	  YYLTYPE yylloc_current;
	  yyoption = yys1->yysemantics.yyfirstVal;
	  YYASSERT (yyoption != NULL);
	  yynrhs = yyrhsLength (yyoption->yyrule);
	  if (yynrhs > 0)
	    {
	      yyGLRState *yys;
	      int yyn;
	      yyresolveLocations (yyoption->yystate, yynrhs,
				  yystackp);
	      for (yys = yyoption->yystate, yyn = yynrhs;
		   yyn > 0;
		   yys = yys->yypred, yyn -= 1)
		yyrhsloc[yyn].yystate.yyloc = yys->yyloc;
	    }
	  else
	    {
	      /* Both yyresolveAction and yyresolveLocations traverse the GSS
		 in reverse rightmost order.  It is only necessary to invoke
		 yyresolveLocations on a subforest for which yyresolveAction
		 would have been invoked next had an ambiguity not been
		 detected.  Thus the location of the previous state (but not
		 necessarily the previous state itself) is guaranteed to be
		 resolved already.  */
	      yyGLRState *yyprevious = yyoption->yystate;
	      yyrhsloc[0].yystate.yyloc = yyprevious->yyloc;
	    }
	  yychar_current = yychar;
	  yylval_current = yylval;
	  yylloc_current = yylloc;
	  yychar = yyoption->yyrawchar;
	  yylval = yyoption->yyval;
	  yylloc = yyoption->yyloc;
	  YYLLOC_DEFAULT ((yys1->yyloc), yyrhsloc, yynrhs);
	  yychar = yychar_current;
	  yylval = yylval_current;
	  yylloc = yylloc_current;
	}
    }
}

/** Resolve the ambiguity represented in state S, perform the indicated
 *  actions, and set the semantic value of S.  If result != yyok, the chain of
 *  semantic options in S has been cleared instead or it has been left
 *  unmodified except that redundant options may have been removed.  Regardless
 *  of whether result = yyok, S has been left with consistent data so that
 *  yydestroyGLRState can be invoked if necessary.  */
static YYRESULTTAG
yyresolveValue (yyGLRState* yys, yyGLRStack* yystackp)
{
  yySemanticOption* yyoptionList = yys->yysemantics.yyfirstVal;
  yySemanticOption* yybest;
  yySemanticOption** yypp;
  yybool yymerge;
  YYSTYPE yysval;
  YYRESULTTAG yyflag;
  YYLTYPE *yylocp = &yys->yyloc;

  yybest = yyoptionList;
  yymerge = yyfalse;
  for (yypp = &yyoptionList->yynext; *yypp != NULL; )
    {
      yySemanticOption* yyp = *yypp;

      if (yyidenticalOptions (yybest, yyp))
	{
	  yymergeOptionSets (yybest, yyp);
	  *yypp = yyp->yynext;
	}
      else
	{
	  switch (yypreference (yybest, yyp))
	    {
	    case 0:
	      yyresolveLocations (yys, 1, yystackp);
	      return yyreportAmbiguity (yybest, yyp);
	      break;
	    case 1:
	      yymerge = yytrue;
	      break;
	    case 2:
	      break;
	    case 3:
	      yybest = yyp;
	      yymerge = yyfalse;
	      break;
	    default:
	      /* This cannot happen so it is not worth a YYASSERT (yyfalse),
		 but some compilers complain if the default case is
		 omitted.  */
	      break;
	    }
	  yypp = &yyp->yynext;
	}
    }

  if (yymerge)
    {
      yySemanticOption* yyp;
      int yyprec = yydprec[yybest->yyrule];
      yyflag = yyresolveAction (yybest, yystackp, &yysval,
				yylocp);
      if (yyflag == yyok)
	for (yyp = yybest->yynext; yyp != NULL; yyp = yyp->yynext)
	  {
	    if (yyprec == yydprec[yyp->yyrule])
	      {
		YYSTYPE yysval_other;
		YYLTYPE yydummy;
		yyflag = yyresolveAction (yyp, yystackp, &yysval_other,
					  &yydummy);
		if (yyflag != yyok)
		  {
		    yydestruct ("Cleanup: discarding incompletely merged value for",
				yystos[yys->yylrState],
				&yysval, yylocp);
		    break;
		  }
		yyuserMerge (yymerger[yyp->yyrule], &yysval, &yysval_other);
	      }
	  }
    }
  else
    yyflag = yyresolveAction (yybest, yystackp, &yysval, yylocp);

  if (yyflag == yyok)
    {
      yys->yyresolved = yytrue;
      yys->yysemantics.yysval = yysval;
    }
  else
    yys->yysemantics.yyfirstVal = NULL;
  return yyflag;
}

static YYRESULTTAG
yyresolveStack (yyGLRStack* yystackp)
{
  if (yystackp->yysplitPoint != NULL)
    {
      yyGLRState* yys;
      int yyn;

      for (yyn = 0, yys = yystackp->yytops.yystates[0];
	   yys != yystackp->yysplitPoint;
	   yys = yys->yypred, yyn += 1)
	continue;
      YYCHK (yyresolveStates (yystackp->yytops.yystates[0], yyn, yystackp
			     ));
    }
  return yyok;
}

static void
yycompressStack (yyGLRStack* yystackp)
{
  yyGLRState* yyp, *yyq, *yyr;

  if (yystackp->yytops.yysize != 1 || yystackp->yysplitPoint == NULL)
    return;

  for (yyp = yystackp->yytops.yystates[0], yyq = yyp->yypred, yyr = NULL;
       yyp != yystackp->yysplitPoint;
       yyr = yyp, yyp = yyq, yyq = yyp->yypred)
    yyp->yypred = yyr;

  yystackp->yyspaceLeft += yystackp->yynextFree - yystackp->yyitems;
  yystackp->yynextFree = ((yyGLRStackItem*) yystackp->yysplitPoint) + 1;
  yystackp->yyspaceLeft -= yystackp->yynextFree - yystackp->yyitems;
  yystackp->yysplitPoint = NULL;
  yystackp->yylastDeleted = NULL;

  while (yyr != NULL)
    {
      yystackp->yynextFree->yystate = *yyr;
      yyr = yyr->yypred;
      yystackp->yynextFree->yystate.yypred = &yystackp->yynextFree[-1].yystate;
      yystackp->yytops.yystates[0] = &yystackp->yynextFree->yystate;
      yystackp->yynextFree += 1;
      yystackp->yyspaceLeft -= 1;
    }
}

static YYRESULTTAG
yyprocessOneStack (yyGLRStack* yystackp, size_t yyk,
		   size_t yyposn)
{
  int yyaction;
  const short int* yyconflicts;
  yyRuleNum yyrule;

  while (yystackp->yytops.yystates[yyk] != NULL)
    {
      yyStateNum yystate = yystackp->yytops.yystates[yyk]->yylrState;
      YYDPRINTF ((stderr, "Stack %lu Entering state %d\n",
		  (unsigned long int) yyk, yystate));

      YYASSERT (yystate != YYFINAL);

      if (yyisDefaultedState (yystate))
	{
	  yyrule = yydefaultAction (yystate);
	  if (yyrule == 0)
	    {
	      YYDPRINTF ((stderr, "Stack %lu dies.\n",
			  (unsigned long int) yyk));
	      yymarkStackDeleted (yystackp, yyk);
	      return yyok;
	    }
	  YYCHK (yyglrReduce (yystackp, yyk, yyrule, yyfalse));
	}
      else
	{
	  yySymbol yytoken;
	  yystackp->yytops.yylookaheadNeeds[yyk] = yytrue;
	  if (yychar == YYEMPTY)
	    {
	      YYDPRINTF ((stderr, "Reading a token: "));
	      yychar = YYLEX;
	    }

	  if (yychar <= YYEOF)
	    {
	      yychar = yytoken = YYEOF;
	      YYDPRINTF ((stderr, "Now at end of input.\n"));
	    }
	  else
	    {
	      yytoken = YYTRANSLATE (yychar);
	      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
	    }

	  yygetLRActions (yystate, yytoken, &yyaction, &yyconflicts);

	  while (*yyconflicts != 0)
	    {
	      size_t yynewStack = yysplitStack (yystackp, yyk);
	      YYDPRINTF ((stderr, "Splitting off stack %lu from %lu.\n",
			  (unsigned long int) yynewStack,
			  (unsigned long int) yyk));
	      YYCHK (yyglrReduce (yystackp, yynewStack,
				  *yyconflicts, yyfalse));
	      YYCHK (yyprocessOneStack (yystackp, yynewStack,
					yyposn));
	      yyconflicts += 1;
	    }

	  if (yyisShiftAction (yyaction))
	    break;
	  else if (yyisErrorAction (yyaction))
	    {
	      YYDPRINTF ((stderr, "Stack %lu dies.\n",
			  (unsigned long int) yyk));
	      yymarkStackDeleted (yystackp, yyk);
	      break;
	    }
	  else
	    YYCHK (yyglrReduce (yystackp, yyk, -yyaction,
				yyfalse));
	}
    }
  return yyok;
}

/*ARGSUSED*/ static void
yyreportSyntaxError (yyGLRStack* yystackp)
{
  if (yystackp->yyerrState == 0)
    {
#if YYERROR_VERBOSE
      int yyn;
      yyn = yypact[yystackp->yytops.yystates[0]->yylrState];
      if (YYPACT_NINF < yyn && yyn <= YYLAST)
	{
	  yySymbol yytoken = YYTRANSLATE (yychar);
	  size_t yysize0 = yytnamerr (NULL, yytokenName (yytoken));
	  size_t yysize = yysize0;
	  size_t yysize1;
	  yybool yysize_overflow = yyfalse;
	  char* yymsg = NULL;
	  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
	  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
	  int yyx;
	  char *yyfmt;
	  char const *yyf;
	  static char const yyunexpected[] = "syntax error, unexpected %s";
	  static char const yyexpecting[] = ", expecting %s";
	  static char const yyor[] = " or %s";
	  char yyformat[sizeof yyunexpected
			+ sizeof yyexpecting - 1
			+ ((YYERROR_VERBOSE_ARGS_MAXIMUM - 2)
			   * (sizeof yyor - 1))];
	  char const *yyprefix = yyexpecting;

	  /* Start YYX at -YYN if negative to avoid negative indexes in
	     YYCHECK.  */
	  int yyxbegin = yyn < 0 ? -yyn : 0;

	  /* Stay within bounds of both yycheck and yytname.  */
	  int yychecklim = YYLAST - yyn + 1;
	  int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
	  int yycount = 1;

	  yyarg[0] = yytokenName (yytoken);
	  yyfmt = yystpcpy (yyformat, yyunexpected);

	  for (yyx = yyxbegin; yyx < yyxend; ++yyx)
	    if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
	      {
		if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
		  {
		    yycount = 1;
		    yysize = yysize0;
		    yyformat[sizeof yyunexpected - 1] = '\0';
		    break;
		  }
		yyarg[yycount++] = yytokenName (yyx);
		yysize1 = yysize + yytnamerr (NULL, yytokenName (yyx));
		yysize_overflow |= yysize1 < yysize;
		yysize = yysize1;
		yyfmt = yystpcpy (yyfmt, yyprefix);
		yyprefix = yyor;
	      }

	  yyf = YY_(yyformat);
	  yysize1 = yysize + strlen (yyf);
	  yysize_overflow |= yysize1 < yysize;
	  yysize = yysize1;

	  if (!yysize_overflow)
	    yymsg = (char *) YYMALLOC (yysize);

	  if (yymsg)
	    {
	      char *yyp = yymsg;
	      int yyi = 0;
	      while ((*yyp = *yyf))
		{
		  if (*yyp == '%' && yyf[1] == 's' && yyi < yycount)
		    {
		      yyp += yytnamerr (yyp, yyarg[yyi++]);
		      yyf += 2;
		    }
		  else
		    {
		      yyp++;
		      yyf++;
		    }
		}
	      yyerror (yymsg);
	      YYFREE (yymsg);
	    }
	  else
	    {
	      yyerror (YY_("syntax error"));
	      yyMemoryExhausted (yystackp);
	    }
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror (YY_("syntax error"));
      yynerrs += 1;
    }
}

/* Recover from a syntax error on *YYSTACKP, assuming that *YYSTACKP->YYTOKENP,
   yylval, and yylloc are the syntactic category, semantic value, and location
   of the lookahead.  */
/*ARGSUSED*/ static void
yyrecoverSyntaxError (yyGLRStack* yystackp)
{
  size_t yyk;
  int yyj;

  if (yystackp->yyerrState == 3)
    /* We just shifted the error token and (perhaps) took some
       reductions.  Skip tokens until we can proceed.  */
    while (YYID (yytrue))
      {
	yySymbol yytoken;
	if (yychar == YYEOF)
	  yyFail (yystackp, NULL);
	if (yychar != YYEMPTY)
	  {
	    /* We throw away the lookahead, but the error range
	       of the shifted error token must take it into account.  */
	    yyGLRState *yys = yystackp->yytops.yystates[0];
	    yyGLRStackItem yyerror_range[3];
	    yyerror_range[1].yystate.yyloc = yys->yyloc;
	    yyerror_range[2].yystate.yyloc = yylloc;
	    YYLLOC_DEFAULT ((yys->yyloc), yyerror_range, 2);
	    yytoken = YYTRANSLATE (yychar);
	    yydestruct ("Error: discarding",
			yytoken, &yylval, &yylloc);
	  }
	YYDPRINTF ((stderr, "Reading a token: "));
	yychar = YYLEX;
	if (yychar <= YYEOF)
	  {
	    yychar = yytoken = YYEOF;
	    YYDPRINTF ((stderr, "Now at end of input.\n"));
	  }
	else
	  {
	    yytoken = YYTRANSLATE (yychar);
	    YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
	  }
	yyj = yypact[yystackp->yytops.yystates[0]->yylrState];
	if (yyis_pact_ninf (yyj))
	  return;
	yyj += yytoken;
	if (yyj < 0 || YYLAST < yyj || yycheck[yyj] != yytoken)
	  {
	    if (yydefact[yystackp->yytops.yystates[0]->yylrState] != 0)
	      return;
	  }
	else if (yytable[yyj] != 0 && ! yyis_table_ninf (yytable[yyj]))
	  return;
      }

  /* Reduce to one stack.  */
  for (yyk = 0; yyk < yystackp->yytops.yysize; yyk += 1)
    if (yystackp->yytops.yystates[yyk] != NULL)
      break;
  if (yyk >= yystackp->yytops.yysize)
    yyFail (yystackp, NULL);
  for (yyk += 1; yyk < yystackp->yytops.yysize; yyk += 1)
    yymarkStackDeleted (yystackp, yyk);
  yyremoveDeletes (yystackp);
  yycompressStack (yystackp);

  /* Now pop stack until we find a state that shifts the error token.  */
  yystackp->yyerrState = 3;
  while (yystackp->yytops.yystates[0] != NULL)
    {
      yyGLRState *yys = yystackp->yytops.yystates[0];
      yyj = yypact[yys->yylrState];
      if (! yyis_pact_ninf (yyj))
	{
	  yyj += YYTERROR;
	  if (0 <= yyj && yyj <= YYLAST && yycheck[yyj] == YYTERROR
	      && yyisShiftAction (yytable[yyj]))
	    {
	      /* Shift the error token having adjusted its location.  */
	      YYLTYPE yyerrloc;
	      yystackp->yyerror_range[2].yystate.yyloc = yylloc;
	      YYLLOC_DEFAULT (yyerrloc, (yystackp->yyerror_range), 2);
	      YY_SYMBOL_PRINT ("Shifting", yystos[yytable[yyj]],
			       &yylval, &yyerrloc);
	      yyglrShift (yystackp, 0, yytable[yyj],
			  yys->yyposn, &yylval, &yyerrloc);
	      yys = yystackp->yytops.yystates[0];
	      break;
	    }
	}
      yystackp->yyerror_range[1].yystate.yyloc = yys->yyloc;
      if (yys->yypred != NULL)
	yydestroyGLRState ("Error: popping", yys);
      yystackp->yytops.yystates[0] = yys->yypred;
      yystackp->yynextFree -= 1;
      yystackp->yyspaceLeft += 1;
    }
  if (yystackp->yytops.yystates[0] == NULL)
    yyFail (yystackp, NULL);
}

#define YYCHK1(YYE)							     \
  do {									     \
    switch (YYE) {							     \
    case yyok:								     \
      break;								     \
    case yyabort:							     \
      goto yyabortlab;							     \
    case yyaccept:							     \
      goto yyacceptlab;							     \
    case yyerr:								     \
      goto yyuser_error;						     \
    default:								     \
      goto yybuglab;							     \
    }									     \
  } while (YYID (0))


/*----------.
| yyparse.  |
`----------*/

int
yyparse (void)
{
  int yyresult;
  yyGLRStack yystack;
  yyGLRStack* const yystackp = &yystack;
  size_t yyposn;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yychar = YYEMPTY;
  yylval = yyval_default;

#if YYLTYPE_IS_TRIVIAL
  yylloc.first_line   = yylloc.last_line   = 1;
  yylloc.first_column = yylloc.last_column = 1;
#endif


  if (! yyinitGLRStack (yystackp, YYINITDEPTH))
    goto yyexhaustedlab;
  switch (YYSETJMP (yystack.yyexception_buffer))
    {
    case 0: break;
    case 1: goto yyabortlab;
    case 2: goto yyexhaustedlab;
    default: goto yybuglab;
    }
  yyglrShift (&yystack, 0, 0, 0, &yylval, &yylloc);
  yyposn = 0;

  while (YYID (yytrue))
    {
      /* For efficiency, we have two loops, the first of which is
	 specialized to deterministic operation (single stack, no
	 potential ambiguity).  */
      /* Standard mode */
      while (YYID (yytrue))
	{
	  yyRuleNum yyrule;
	  int yyaction;
	  const short int* yyconflicts;

	  yyStateNum yystate = yystack.yytops.yystates[0]->yylrState;
	  YYDPRINTF ((stderr, "Entering state %d\n", yystate));
	  if (yystate == YYFINAL)
	    goto yyacceptlab;
	  if (yyisDefaultedState (yystate))
	    {
	      yyrule = yydefaultAction (yystate);
	      if (yyrule == 0)
		{
		  yystack.yyerror_range[1].yystate.yyloc = yylloc;
		  yyreportSyntaxError (&yystack);
		  goto yyuser_error;
		}
	      YYCHK1 (yyglrReduce (&yystack, 0, yyrule, yytrue));
	    }
	  else
	    {
	      yySymbol yytoken;
	      if (yychar == YYEMPTY)
		{
		  YYDPRINTF ((stderr, "Reading a token: "));
		  yychar = YYLEX;
		}

	      if (yychar <= YYEOF)
		{
		  yychar = yytoken = YYEOF;
		  YYDPRINTF ((stderr, "Now at end of input.\n"));
		}
	      else
		{
		  yytoken = YYTRANSLATE (yychar);
		  YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
		}

	      yygetLRActions (yystate, yytoken, &yyaction, &yyconflicts);
	      if (*yyconflicts != 0)
		break;
	      if (yyisShiftAction (yyaction))
		{
		  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);
		  yychar = YYEMPTY;
		  yyposn += 1;
		  yyglrShift (&yystack, 0, yyaction, yyposn, &yylval, &yylloc);
		  if (0 < yystack.yyerrState)
		    yystack.yyerrState -= 1;
		}
	      else if (yyisErrorAction (yyaction))
		{
		  yystack.yyerror_range[1].yystate.yyloc = yylloc;
		  yyreportSyntaxError (&yystack);
		  goto yyuser_error;
		}
	      else
		YYCHK1 (yyglrReduce (&yystack, 0, -yyaction, yytrue));
	    }
	}

      while (YYID (yytrue))
	{
	  yySymbol yytoken_to_shift;
	  size_t yys;

	  for (yys = 0; yys < yystack.yytops.yysize; yys += 1)
	    yystackp->yytops.yylookaheadNeeds[yys] = yychar != YYEMPTY;

	  /* yyprocessOneStack returns one of three things:

	      - An error flag.  If the caller is yyprocessOneStack, it
		immediately returns as well.  When the caller is finally
		yyparse, it jumps to an error label via YYCHK1.

	      - yyok, but yyprocessOneStack has invoked yymarkStackDeleted
		(&yystack, yys), which sets the top state of yys to NULL.  Thus,
		yyparse's following invocation of yyremoveDeletes will remove
		the stack.

	      - yyok, when ready to shift a token.

	     Except in the first case, yyparse will invoke yyremoveDeletes and
	     then shift the next token onto all remaining stacks.  This
	     synchronization of the shift (that is, after all preceding
	     reductions on all stacks) helps prevent double destructor calls
	     on yylval in the event of memory exhaustion.  */

	  for (yys = 0; yys < yystack.yytops.yysize; yys += 1)
	    YYCHK1 (yyprocessOneStack (&yystack, yys, yyposn));
	  yyremoveDeletes (&yystack);
	  if (yystack.yytops.yysize == 0)
	    {
	      yyundeleteLastStack (&yystack);
	      if (yystack.yytops.yysize == 0)
		yyFail (&yystack, YY_("syntax error"));
	      YYCHK1 (yyresolveStack (&yystack));
	      YYDPRINTF ((stderr, "Returning to deterministic operation.\n"));
	      yystack.yyerror_range[1].yystate.yyloc = yylloc;
	      yyreportSyntaxError (&yystack);
	      goto yyuser_error;
	    }

	  /* If any yyglrShift call fails, it will fail after shifting.  Thus,
	     a copy of yylval will already be on stack 0 in the event of a
	     failure in the following loop.  Thus, yychar is set to YYEMPTY
	     before the loop to make sure the user destructor for yylval isn't
	     called twice.  */
	  yytoken_to_shift = YYTRANSLATE (yychar);
	  yychar = YYEMPTY;
	  yyposn += 1;
	  for (yys = 0; yys < yystack.yytops.yysize; yys += 1)
	    {
	      int yyaction;
	      const short int* yyconflicts;
	      yyStateNum yystate = yystack.yytops.yystates[yys]->yylrState;
	      yygetLRActions (yystate, yytoken_to_shift, &yyaction,
			      &yyconflicts);
	      /* Note that yyconflicts were handled by yyprocessOneStack.  */
	      YYDPRINTF ((stderr, "On stack %lu, ", (unsigned long int) yys));
	      YY_SYMBOL_PRINT ("shifting", yytoken_to_shift, &yylval, &yylloc);
	      yyglrShift (&yystack, yys, yyaction, yyposn,
			  &yylval, &yylloc);
	      YYDPRINTF ((stderr, "Stack %lu now in state #%d\n",
			  (unsigned long int) yys,
			  yystack.yytops.yystates[yys]->yylrState));
	    }

	  if (yystack.yytops.yysize == 1)
	    {
	      YYCHK1 (yyresolveStack (&yystack));
	      YYDPRINTF ((stderr, "Returning to deterministic operation.\n"));
	      yycompressStack (&yystack);
	      break;
	    }
	}
      continue;
    yyuser_error:
      yyrecoverSyntaxError (&yystack);
      yyposn = yystack.yytops.yystates[0]->yyposn;
    }

 yyacceptlab:
  yyresult = 0;
  goto yyreturn;

 yybuglab:
  YYASSERT (yyfalse);
  goto yyabortlab;

 yyabortlab:
  yyresult = 1;
  goto yyreturn;

 yyexhaustedlab:
  yyerror (YY_("memory exhausted"));
  yyresult = 2;
  goto yyreturn;

 yyreturn:
  if (yychar != YYEMPTY)
    yydestruct ("Cleanup: discarding lookahead",
		YYTRANSLATE (yychar),
		&yylval, &yylloc);

  /* If the stack is well-formed, pop the stack until it is empty,
     destroying its entries as we go.  But free the stack regardless
     of whether it is well-formed.  */
  if (yystack.yyitems)
    {
      yyGLRState** yystates = yystack.yytops.yystates;
      if (yystates)
	{
	  size_t yysize = yystack.yytops.yysize;
	  size_t yyk;
	  for (yyk = 0; yyk < yysize; yyk += 1)
	    if (yystates[yyk])
	      {
		while (yystates[yyk])
		  {
		    yyGLRState *yys = yystates[yyk];
		    yystack.yyerror_range[1].yystate.yyloc = yys->yyloc;
		    if (yys->yypred != NULL)
		      yydestroyGLRState ("Cleanup: popping", yys);
		    yystates[yyk] = yys->yypred;
		    yystack.yynextFree -= 1;
		    yystack.yyspaceLeft += 1;
		  }
		break;
	      }
	}
      yyfreeGLRStack (&yystack);
    }

  /* Make sure YYID is used.  */
  return YYID (yyresult);
}

/* DEBUGGING ONLY */
#if YYDEBUG
static void yypstack (yyGLRStack* yystackp, size_t yyk)
  __attribute__ ((__unused__));
static void yypdumpstack (yyGLRStack* yystackp) __attribute__ ((__unused__));

static void
yy_yypstack (yyGLRState* yys)
{
  if (yys->yypred)
    {
      yy_yypstack (yys->yypred);
      YYFPRINTF (stderr, " -> ");
    }
  YYFPRINTF (stderr, "%d@%lu", yys->yylrState,
             (unsigned long int) yys->yyposn);
}

static void
yypstates (yyGLRState* yyst)
{
  if (yyst == NULL)
    YYFPRINTF (stderr, "<null>");
  else
    yy_yypstack (yyst);
  YYFPRINTF (stderr, "\n");
}

static void
yypstack (yyGLRStack* yystackp, size_t yyk)
{
  yypstates (yystackp->yytops.yystates[yyk]);
}

#define YYINDEX(YYX)							     \
    ((YYX) == NULL ? -1 : (yyGLRStackItem*) (YYX) - yystackp->yyitems)


static void
yypdumpstack (yyGLRStack* yystackp)
{
  yyGLRStackItem* yyp;
  size_t yyi;
  for (yyp = yystackp->yyitems; yyp < yystackp->yynextFree; yyp += 1)
    {
      YYFPRINTF (stderr, "%3lu. ",
                 (unsigned long int) (yyp - yystackp->yyitems));
      if (*(yybool *) yyp)
	{
	  YYFPRINTF (stderr, "Res: %d, LR State: %d, posn: %lu, pred: %ld",
		     yyp->yystate.yyresolved, yyp->yystate.yylrState,
		     (unsigned long int) yyp->yystate.yyposn,
		     (long int) YYINDEX (yyp->yystate.yypred));
	  if (! yyp->yystate.yyresolved)
	    YYFPRINTF (stderr, ", firstVal: %ld",
		       (long int) YYINDEX (yyp->yystate
                                             .yysemantics.yyfirstVal));
	}
      else
	{
	  YYFPRINTF (stderr, "Option. rule: %d, state: %ld, next: %ld",
		     yyp->yyoption.yyrule - 1,
		     (long int) YYINDEX (yyp->yyoption.yystate),
		     (long int) YYINDEX (yyp->yyoption.yynext));
	}
      YYFPRINTF (stderr, "\n");
    }
  YYFPRINTF (stderr, "Tops:");
  for (yyi = 0; yyi < yystackp->yytops.yysize; yyi += 1)
    YYFPRINTF (stderr, "%lu: %ld; ", (unsigned long int) yyi,
	       (long int) YYINDEX (yystackp->yytops.yystates[yyi]));
  YYFPRINTF (stderr, "\n");
}
#endif



/* Line 2634 of glr.c  */
#line 1949 "g:\\dox17\\doxygen-1.7.0\\src\\\\..\\src\\verilogparser.y"

//------ ------------------------------------------------------------------------------------------------

 Entry* getCurrVerilogEntry(){return current;}
 Entry* getCurrVerilog(){return currentVerilog; }
 QCString getCurrVerilogParsingClass(){return currVerilogClass; }

 void initVerilogParser(Entry* ee,bool pc){
  identVerilog.resize(0);
  currVerilogInst.resize(0);
  currVerilogClass.resize(0);
  prevDocEntryVerilog.reset();
  currentVerilog=0;
  generateItem=false;
  currentFunctionVerilog=0;
  parseCode=pc;
  briefString.resize(0);
  briefLine=0;
if(pc) return;
  current_rootVerilog=ee;
  lastModule=0;
  current=new Entry;
  VerilogDocGen::initEntry(current);
  current_rootVerilog->name=QCString("XXX"); // dummy name for root
}

 Entry* VerilogDocGen::makeNewEntry(char* name,int sec,int spec,int line,bool add){
 
  Entry *e=current;
 
  if(e->briefLine>0 && e->brief.data())
  {
    briefLine=line;
    briefString=e->brief;
  }

  if(line==briefLine && briefString.data())
  {
   e->brief=briefString;
  }

 if(parseCode) // should not happen!
 assert(0);

if(add)
{ // features like 'include xxx or 'define xxx must not be inserted here
 if(lastModule)
    addSubEntry(lastModule,e); 
  else
    addSubEntry(current_rootVerilog,e); 
}
else
  addSubEntry(current_rootVerilog,e);

if(line){
  	  e->bodyLine=line;
      e->startLine=line;
  }else
   {
     e->bodyLine=getVerilogPrevLine();
     e->startLine=getVerilogPrevLine();
   }
   
  e->section=sec;
  e->spec=spec;
  e->name=name;
  e->name.stripPrefix("\\");// escaped_identifier ??

  current=new Entry;
  VerilogDocGen::initEntry(current);
  
  return e;
 }

void addSubEntry(Entry* root, Entry* e) {
 if(e==NULL || root==NULL) return;
  root->addSubEntry(e);
 } 




//-------------------------------------------------------------------------
  
// extracts module/primitive name

void parseModule(){
 
 QCString mod(getVerilogString());
 VhdlDocGen::deleteAllChars(mod,'\n');
 VhdlDocGen::deleteAllChars(mod,' ');
 VhdlDocGen::deleteAllChars(mod,';');
 VhdlDocGen::deleteAllChars(mod,'(');
 
 QRegExp reg("[^_a-zA-Z0-9$]");

 int ll=mod.find(reg);

 if(ll>-1){
//  char c=mod.at(ll);
  QCString val=mod.remove(ll,1);

 }

//if(mod.len>80)

 if(parseCode) {
 //generateVerilogClassOrGlobalLink(mod.data());
 currVerilogClass=mod;
 return;
 }
  currentVerilog->name=mod;
 }//parseModuleName


// extracts module instances [ module_name name,module_name #(...) name]

void parseModuleInst(QCString& first, QCString& sec) {
 
if(currVerilogType==VerilogDocGen::DEFPARAM || generateItem ) return;



 VhdlDocGen::deleteAllChars(sec,'(');
 VhdlDocGen::deleteAllChars(sec,'\n');
 VhdlDocGen::deleteAllChars(sec,')');
 VhdlDocGen::deleteAllChars(sec,' ');
 VhdlDocGen::deleteAllChars(sec,',');
 VhdlDocGen::deleteAllChars(sec,';');
 QCString temp=sec;
//while(sec.stripPrefix(" "));

if(sec!=first && (sec.contains("#")==0))
{ 
 //QStringList ql=QStringList::split(first.data(),sec,false);
int oo=sec.findRev(first.data());
if(oo>0) 
 sec=sec.left(oo);
}
else
 sec=getLastLetter();

if(temp.contains("#"))
{ 
 int ii=temp.find("#");
 sec=temp.left(ii);
while(sec.stripPrefix(" "));
}


 if(parseCode){
     VhdlDocGen::deleteAllChars(sec,'\t');
   currVerilogInst=sec;
   return;
  }
 else {
  Entry* pTemp=VerilogDocGen::makeNewEntry(sec.data(),Entry::VARIABLE_SEC,VerilogDocGen::COMPONENT,moduleLine);
  pTemp->type=first;
 
 if(sec==first)return;
if(currentVerilog)
 if(!findExtendsComponent(currentVerilog->extends,sec)){	
  	BaseInfo *bb=new BaseInfo(sec,Private,Normal);
    currentVerilog->extends->append(bb);						
   }
  }
}


void parseListOfPorts() {
 
  QCString type;

 QCString mod(getVerilogString());
 
 VhdlDocGen::deleteAllChars(mod,' ');
 VhdlDocGen::deleteAllChars(mod,'\n');
 VhdlDocGen::deleteAllChars(mod,';');
 VhdlDocGen::deleteAllChars(mod,')');
 VhdlDocGen::deleteAllChars(mod,'(');
  QStringList ql=QStringList::split(",",mod,false);
  QCString name=(QCString)ql[0];
if(!parseCode) {
  for(uint j=0;j<ql.count();j++) {
  QCString name=(QCString)ql[j];
   int i=name.find('[');
  if(i > 0){
    type=mod.right(mod.length()-i);
    name=mod.left(i);
  }
  
 name.prepend(VhdlDocGen::getRecordNumber().data());
 Entry* pTemp=VerilogDocGen::makeNewEntry(name.data(),Entry::VARIABLE_SEC,VerilogDocGen::PORT,c_lloc.first_line);
  pTemp->type=type; 
   }
  return;
 }	

 }//parseListOfPorts



void parseReg(Entry* e){

// "reg"|"integer\real\event"|wire"|"tri"|"tri1"|"supply0"|"wand"|"triand"|"tri0"|"supply1"|"wor"|"trior"|"trireg"

static QCString prevType;
static QCString sigType;
static QRegExp qregg("[ \\[]");
QCString regType;
QCString qcs;

int p,l;
     

 if((generateItem || CurrState==VerilogDocGen::STATE_FUNCTION || CurrState==VerilogDocGen::STATE_TASK )) return;

QCString mod(getVerilogString());

int port_type=0;

VhdlDocGen::deleteAllChars(mod,'(');
VhdlDocGen::deleteAllChars(mod,')');
VhdlDocGen::deleteAllChars(mod,';');
VhdlDocGen::deleteAllChars(mod,'\n');
VhdlDocGen::deleteAllChars(mod,',');

if(mod.contains("="))
{
 int i=mod.find("=");
 //qcs=mod.right(mod.length()-i-1);
 VhdlDocGen::deleteAllChars(qcs,' ');
 mod=mod.left(i);
}
  
 mod=mod.simplifyWhiteSpace(); 
  
//while(mod.stripPrefix(" "));
  p=qregg.match(mod,0,&l);

 if(p>0){
  sigType=mod.left(p);
  prevType.resize(0);
  mod.stripPrefix(sigType.data());
  while(mod.stripPrefix(" "));
  if(!mod.stripPrefix("signed ")){
  if(mod.stripPrefix("signed["))
    {mod.prepend("[");sigType.append(" signed ");}
  if(mod.stripPrefix("scalared "))
   sigType.append(" scalared ");
  if(mod.stripPrefix("vectored "))
    sigType.append(" vectored ");
 }
// else
  
}

 
 while(mod.stripPrefix(" "));
 

VhdlDocGen::deleteAllChars(mod,' ');

  int i=mod.find(']');
  int h=mod.find('[');

  if(h==0){
  	prevType+=mod.left(i+1);
  	mod=mod.right(mod.length()-i-1);
  h=mod.find('[');
  }

  if(h > 0){
   if(port_type!=2){ 
	regType=mod.right(mod.length()-h);
    mod=mod.left(h);
   }
   else {
    int ii=mod.find('[');
	if(ii>0){
  	prevType=mod.mid(ii,mod.length());
   	mod=mod.left(ii);
   }
  }
 }

  QStringList ql=QStringList::split(",",mod,false);
 uint len=ql.count() ;
 for(uint j=0;j<len;j++) {
  QCString name=(QCString)ql[j];
  name.prepend(VhdlDocGen::getRecordNumber().data());
 
  Entry* pTemp=VerilogDocGen::makeNewEntry(name.data(),Entry::VARIABLE_SEC,getVerilogPrevLine());
 // pTemp->type=prevType;
 
  if((prevType.isEmpty() && len==1) || (!regType.isEmpty() && len==1))
     pTemp->type=regType;
 else
  pTemp->args=regType;
    
  pTemp->args+=sigType+prevType; 
 // if(!prevType.isEmpty() && !regType.isEmpty())
 // pTemp->args+=prevType; 

 pTemp->args+=qcs;
  pTemp->spec=VerilogDocGen::SIGNAL;//currVerilogType;
  
  regType=prevType;
  if(getVerilogToken()==SEM_TOK)
   { prevType="";sigType="";}
  
  }
} // parsReg


// extracts function/task prototype 

void parseFunction(Entry* curF)
{
  QCString mod(getVerilogString());
  QCString type; 
 
 VhdlDocGen::deleteAllChars(mod,'\n');
 VhdlDocGen::deleteAllChars(mod,';');
  while(mod.stripPrefix(" "));
 
  int i=mod.findRev(']');
  if(i > 0){
    type=mod.left(i+1);
   	mod=mod.right(mod.length()-i-1);
  }
  else {
  QStringList ql=QStringList::split(" ",mod,false);
  if(ql.count()>1) {
    type=(QCString)ql[0];
	mod=(QCString)ql[1];
  }
  }
 
 VhdlDocGen::deleteAllChars(mod,' ');
 VhdlDocGen::deleteAllChars(type,' ');

  curF->name+=mod;
  if(type.stripPrefix("automatic"))
   curF->type+="automatic "+type; 
   else
  curF->type+=type;
}
							   

// extract (local)parameter declaration 

void parseParam(Entry* e)
{
   QCString prevType,qcs;
  QRegExp regg("[ \t]");

  if((CurrState==VerilogDocGen::STATE_FUNCTION || CurrState==VerilogDocGen::STATE_TASK  || generateItem)) return;
  
  QCString mod(getVerilogString());
  VhdlDocGen::deleteAllChars(mod,';');
  VhdlDocGen::deleteAllChars(mod,'\n');
  VhdlDocGen::deleteAllChars(mod,',');

  mod=mod.simplifyWhiteSpace();

 if(mod.at(mod.length()-1)==')') 
  mod.remove(mod.length()-1,1);

  mod.stripPrefix("#");
  while(mod.stripPrefix(" "));
  mod.stripPrefix("(");



if(mod.contains("="))
{
 int i=mod.find("=");
 qcs=mod.right(mod.length()-i-1);
 while(qcs.stripPrefix(" "));
 mod=mod.left(i);
}

 while(mod.stripPrefix(" "));

 int j=mod.find(regg,0);
			 if(j>0){
			 bool bb=false;
			 QCString sem=mod.mid(0,j);
			 if(sem=="integer"){ prevType=sem;bb=true;}
			 else if(sem=="real"){prevType=sem;bb=true;}
			 else if(sem=="realtime"){prevType=sem;bb=true;}
			 else if(sem=="time"){prevType=sem;bb=true;}
			 else if(sem=="signed"){prevType=sem;bb=true;}
			 else if(sem=="wire"){prevType=sem;bb=true;}
			 if(bb)
			 mod.stripPrefix(sem.data());
			 }

 
 while(mod.stripPrefix(" "));
  
  int i=mod.find(']');
  if(i > 0){
    prevType+=" ";
	prevType+=mod.left(i+1);
   	mod=mod.right(mod.length()-i-1);
  }
 

  VhdlDocGen::deleteAllChars(mod,' ');


// each local member must get its unique number, because in Verilog
// two local variables can have the same identifier.
// ( input Q, reg Q)
  mod.prepend(VhdlDocGen::getRecordNumber().data());
 
  Entry* pTemp=VerilogDocGen::makeNewEntry(mod.data(),Entry::VARIABLE_SEC,VerilogDocGen::PARAMETER,getVerilogPrevLine());
  //pTemp->fileName+=getVerilogParsingFile();
  pTemp->type=prevType;
  pTemp->args=qcs;
  
  
}

// extract  input/output ports

void parsePortDir(Entry* e,int port)
{

static QCString prevType;
static QCString type; 

QCString mod(getVerilogString());
 VhdlDocGen::deleteAllChars(mod,'\n');
 VhdlDocGen::deleteAllChars(mod,')');
 VhdlDocGen::deleteAllChars(mod,'(');
 VhdlDocGen::deleteAllChars(mod,';');
 VhdlDocGen::deleteAllChars(mod,',');

 while(mod.stripPrefix(" "));


if(mod.stripPrefix("input"))
 prevType="";
else if(mod.stripPrefix("output"))
  prevType=""; 
else if(mod.stripPrefix("inout"))
  prevType="";
else {
             QRegExp regg("[ \\[]");
  			 int j=mod.find(regg,0);
			 if(j>0){
			 type=mod.mid(0,j);
			 mod.stripPrefix(type.data());
			 }
	 } 


while(mod.stripPrefix(" "));
 
QRegExp regg("[ \t]");
 int j=mod.find(regg,0);
			 if(j>0){
			 bool bb=false;
			 QCString sem=mod.mid(0,j);
			 if(sem=="integer"){ prevType=sem;bb=true;}
			 else if(sem=="real"){prevType=sem;bb=true;}
			 else if(sem=="realtime"){prevType=sem;bb=true;}
			 else if(sem=="time"){prevType=sem;bb=true;}
			 else if(sem=="signed"){prevType=sem;bb=true;}
			 else if(sem=="wire"){prevType=sem;bb=true;}
			 if(bb)
			 mod.stripPrefix(sem.data());
			 }

while(mod.stripPrefix(" "));
  
  int i=mod.findRev(']');
  if(i > 0){
    prevType+=" ";
	prevType+=mod.left(i+1);
   	mod=mod.right(mod.length()-i-1);
  }
  else{ 
  int j=mod.find(regg,0);
   if(j>0){
    QCString sem=mod.mid(0,j);
	if(sem=="reg"){		
     mod=mod.right(mod.length()-j-1);
     prevType+=" reg";
     }
    }
   }
  
  VhdlDocGen::deleteAllChars(mod,' ');
  mod.prepend(VhdlDocGen::getRecordNumber().data());
  if(CurrState==VerilogDocGen::STATE_MODULE){  
  Entry* pTemp=VerilogDocGen::makeNewEntry(mod.data(),Entry::VARIABLE_SEC,0,c_lloc.first_line);
  pTemp->type=prevType;
  pTemp->args=type;
   assert(currVerilogType!=0);
  pTemp->spec=currVerilogType;
//   VerilogDocGen::addSubEntry(currentVerilog,pTemp);
  }
  else
  { 
   if(CurrState==VerilogDocGen::STATE_FUNCTION){
      Argument *arg=new Argument;
      
      switch(currVerilogType) {
      
      case VerilogDocGen::INPUT: arg->type="Input";break;
      case VerilogDocGen::INOUT:arg->type="Inout";break;         
      case VerilogDocGen::OUTPUT:arg->type="Output";break;         
      default:break;
      }                           
        arg->defval=prevType;                         
        arg->name=mod;//(QCString)ql[j];	
	  currentFunctionVerilog->argList->append(arg);
	  VerilogDocGen::adjustMemberName(mod); 
	  currentFunctionVerilog->args+=mod;//(QCString)ql[j]+",";
  } 
 }
 

  if(getVerilogToken()==SEM_TOK)//end of line
  {prevType="";type="";}
}

void parseAlways(bool bBody)
{

if(currVerilogType!=VerilogDocGen::ALWAYS || generateItem) return ;

QRegExp regg1("[ \t]or[ \t]");

QCString mod(getVerilogString());
QCString type; 
QStringList ql;
bool sem=false;

 VhdlDocGen::deleteAllChars(mod,'@');
 VhdlDocGen::deleteAllChars(mod,'\n');
 VhdlDocGen::deleteAllChars(mod,'(');
 VhdlDocGen::deleteAllChars(mod,')');
 VhdlDocGen::deleteAllChars(mod,';'); 

if(mod.contains(","))
  ql=QStringList::split(",",mod,false);
 else
  ql=QStringList::split(regg1,mod,false);
 

 if(!parseCode) {
 currentFunctionVerilog=VerilogDocGen::makeNewEntry(VhdlDocGen::getProcessNumber().data(),Entry::FUNCTION_SEC,VerilogDocGen::ALWAYS);
  currentFunctionVerilog->stat=TRUE;
  currentFunctionVerilog->fileName=getVerilogParsingFile();
  if(!bBody)
  for(uint j=0;j<ql.count();j++) {
  QCString ll=(QCString)ql[j];
  if(ll=="or" || ll=="and" || ll=="xor") continue; 
  if(sem)
	  currentFunctionVerilog->args+=',';
	  Argument *arg=new Argument;
      arg->name=ll.simplifyWhiteSpace();	
	  currentFunctionVerilog->argList->append(arg);
      currentFunctionVerilog->args+=ll; 
      sem = true;
 }
 return;
}


}//parseAlways



 // sets the current parsing module (only for parsing inline_sources)             
 void VerilogDocGen::setCurrVerilogClass(QCString& cl){ currVerilogClass = cl;}
   
 //-------------------------------------------------------------------------------------------  
           
 int MyParserConv::parse(MyParserConv* conv){
  myconv=conv;
  assert(myconv);
  return c_parse();
 } 
        
int c_lex(void){
 return myconv->doLex(); 
}


void c_error(const char * err){
   if(err){// && !parseCode){
//  fprintf(stderr,"\n\nerror  at line [%d]... : in file [%s]\n\n",c_lloc.first_line,getVerilogParsingFile());
  vbufreset();
 // exit(0);
  }
  
   } 
    
int getVerilogToken(){return c_char;}
 //------------------------------------------------------------------------------------------------  

// writes a digit to the source

void writeDigit()
 {
   if(parseCode) {
     writePrevVerilogWords(identVerilog);
	 writeVerilogFont("vhdllogic",identVerilog.data());
	 printVerilogBuffer(true);
	 }
	identVerilog.resize(0);

 }// writeDigit

// prints and links the parsed identifiers  

void parseString(){				
					 				
					if(parseCode ) { 
					 //   printVerilogStringList();
						 identVerilog=identVerilog.stripWhiteSpace();
				   	  writePrevVerilogWords(identVerilog);
						 bool b=false;
					 
					 if(currVerilogType==VerilogDocGen::DEFPARAM){
				       QCString s(getVerilogString());
                       if(s.contains(".")==0)
                           b=generateVerilogMemLink(currVerilogClass,identVerilog,VerilogDocGen::COMPONENT);
				       else if(s.contains("="))
                           b=generateVerilogMemLink(currVerilogClass,identVerilog,-1);
                       else
				         b=generateVerilogMemLink(currVerilogInst,identVerilog,-1);	       
				     }
					 else if(currVerilogType==VerilogDocGen::COMPONENT){
					    QCString tt(getVerilogString());
					    if(tt.contains('('))
					     b=generateVerilogCompMemLink(currVerilogClass,currVerilogInst,identVerilog,true);
				        else if(!b)   
				         b=generateVerilogCompMemLink(currVerilogClass ,currVerilogInst,identVerilog,false);
				        if(!b)   
				         b=generateVerilogCompMemLink(currVerilogClass,currVerilogInst,identVerilog,true);    
					   }
				  
				      else if(currVerilogType==VerilogDocGen::PORT)
                        b=generateVerilogMemLink(currVerilogClass,identVerilog,VerilogDocGen::PORT);
				     else if(currVerilogType==VerilogDocGen::PARAMETER)
                        b=generateVerilogMemLink(currVerilogClass,identVerilog,VerilogDocGen::PARAMETER);
				     else if(currVerilogType==VerilogDocGen::SIGNAL)
                        b=generateVerilogMemLink(currVerilogClass,identVerilog,VerilogDocGen::SIGNAL);
				     else if(currVerilogType==VerilogDocGen::INPUT)
                        b=generateVerilogMemLink(currVerilogClass,identVerilog,VerilogDocGen::INPUT);				       
         		     else if(currVerilogType==VerilogDocGen::OUTPUT)
                        b=generateVerilogMemLink(currVerilogClass,identVerilog,VerilogDocGen::OUTPUT);
				     else if(currVerilogType==VerilogDocGen::INOUT)
                        b=generateVerilogMemLink(currVerilogClass,identVerilog,VerilogDocGen::INOUT);
				   
				     else if(currVerilogType==VerilogDocGen::ALWAYS)
                        b=generateVerilogMemLink(currVerilogClass,identVerilog,VerilogDocGen::ALWAYS);
						
				     if(!b){
					   b =  generateVerilogMemLink(currVerilogClass,identVerilog,-1); 
					   if(!b && getClass(identVerilog.data()))
                       b=generateVerilogClassOrGlobalLink(identVerilog.data());
					  if(!b){
					  const QCString*  col=VerilogDocGen::findKeyWord(identVerilog.data());
					  if(col) 
					  codifyVerilogString(identVerilog.data(),col->data());
					  else					  
					  codifyVerilogString(identVerilog.data(),"vhdlchar");
					   }   
					 }
					   printVerilogBuffer(true);
					  }
				    prevName=identVerilog;
				    identVerilog.resize(0);
				 
}// parseString

// inits the parser

 //---------------------------------------------------------------------------------------------------  


// do not include the same class twice 

bool findExtendsComponent(QList<BaseInfo> *extend,QCString& compName)
{
 for(uint j=0;j<extend->count();j++){
  BaseInfo *bb=extend->at(j);
  if(bb->name==compName)
   return true;
 }
 return false;
}// findExtendsComponent


