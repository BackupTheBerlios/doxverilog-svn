#define yy_create_buffer vhdlScanYY_create_buffer
#define yy_delete_buffer vhdlScanYY_delete_buffer
#define yy_scan_buffer vhdlScanYY_scan_buffer
#define yy_scan_string vhdlScanYY_scan_string
#define yy_scan_bytes vhdlScanYY_scan_bytes
#define yy_flex_debug vhdlScanYY_flex_debug
#define yy_init_buffer vhdlScanYY_init_buffer
#define yy_flush_buffer vhdlScanYY_flush_buffer
#define yy_load_buffer_state vhdlScanYY_load_buffer_state
#define yy_switch_to_buffer vhdlScanYY_switch_to_buffer
#define yyin vhdlScanYYin
#define yyleng vhdlScanYYleng
#define yylex vhdlScanYYlex
#define yyout vhdlScanYYout
#define yyrestart vhdlScanYYrestart
#define yytext vhdlScanYYtext

#line 19 "c:\\Boot\\doxygen-1.8.1.src\\doxygen-1.8.1\\src\\vhdlscanner.cpp"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT

#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 55
#define YY_END_OF_BUFFER 56
static yyconst short int yy_acclist[220] =
    {   0,
       56,   47,   55,    1,   47,   55,   45,   55,   47,   55,
       47,   55,   47,   55,    2,   47,   55,    3,   47,   55,
        4,   47,   55,    5,   47,   55,    7,   47,   55,    8,
       47,   55,    9,   47,   55,   10,   47,   55,   33,   47,
       55,   34,   47,   55,   40,   47,   55,   12,   47,   55,
       13,   47,   55,   16,   47,   55,   18,   47,   55,   17,
       47,   55,   31,   47,   55,   35,   47,   55,   37,   47,
       55,   47,   55,   38,   47,   55,   36,   47,   55,   47,
       55,   39,   47,   55,   39,   47,   55,   39,   47,   55,
       39,   47,   55,   39,   47,   55,   32,   47,   55,   50,

       55,   50,   55,   50,   55,   50,   55,   50,   55,   50,
       55,   55,   55,   53,   55,   55,   55,   55,   55,   55,
       55,   55,   42,   42,    6,   46,   52,   19,   40,   11,
       22,   14,   21,   20,   15,   23,   28,   29,   27,   24,
       39,   44,   44,   39,   39,   39,   46,   53,   46,   52,
       53,   54,   41,   46,   46,   51,   40,   40,   40,   30,
       26,   25,   46,   49,   51,   46,   46,   51,   46,   53,
       46,   51,   46,   51,   40,   40,   40,   40,   43,   49,
       46,   49,   51,   46,   49,   51,   46,   51,   46,   51,
       53,   46,   51,   46,   51,16432,   49,   49,   46,   49,

       51,   53,   46,   51,16432,   46,   51,   53,   46,   51,
       53,   40,   40,   49,   53,   40,   40, 8240, 8240
    } ;

static yyconst short int yy_accept[208] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        4,    7,    9,   11,   13,   15,   18,   21,   24,   27,
       30,   33,   36,   39,   42,   45,   48,   51,   54,   57,
       60,   63,   66,   69,   72,   74,   77,   80,   82,   85,
       88,   91,   94,   97,  100,  102,  104,  106,  108,  110,
      112,  113,  114,  116,  117,  118,  119,  120,  121,  122,
      123,  123,  123,  123,  124,  124,  124,  125,  125,  125,
      125,  126,  127,  128,  129,  129,  129,  130,  130,  130,
      130,  130,  130,  130,  130,  131,  132,  133,  134,  135,
      136,  137,  137,  138,  139,  140,  141,  141,  142,  142,

      143,  144,  145,  145,  146,  146,  146,  147,  147,  147,
      148,  148,  149,  149,  149,  150,  152,  153,  153,  154,
      155,  157,  157,  158,  158,  159,  159,  160,  161,  162,
      163,  163,  163,  163,  166,  166,  167,  169,  171,  171,
      173,  175,  176,  176,  176,  176,  177,  177,  177,  177,
      178,  178,  179,  179,  180,  180,  180,  180,  180,  181,
      184,  187,  187,  189,  192,  194,  194,  196,  197,  197,
      197,  197,  197,  198,  199,  202,  202,  203,  205,  206,
      209,  212,  212,  212,  212,  212,  213,  213,  213,  213,
      213,  213,  214,  215,  215,  216,  216,  216,  216,  217,

      217,  218,  218,  218,  219,  220,  220
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    7,    8,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   21,   22,   23,
       24,   25,   26,   27,   34,   35,   34,   36,   37,   34,
       38,   38,   38,   38,   38,   38,   38,   38,   39,   38,
       38,   38,   40,   38,   41,   38,   38,   42,   38,   38,
       28,   29,   30,   31,   32,   33,   34,   35,   34,   36,

       37,   34,   38,   38,   38,   38,   38,   38,   38,   38,
       39,   38,   38,   38,   40,   38,   41,   38,   38,   42,
       38,   38,   43,   44,   43,    8,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[45] =
    {   0,
        1,    2,    3,    1,    2,    4,    2,    2,    4,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    5,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    5,    2,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    6,    2
    } ;

static yyconst short int yy_base[235] =
    {   0,
        0,    0,   43,   46,   50,   54,   72,   76,  496,  666,
       79,   95,   98,  110,  144,  666,  153,  666,  666,  481,
      666,  666,  477,  666,   37,  189,  463,  666,   80,  460,
       60,   94,  666,  666,  203,  666,  666,  212,   74,  101,
        0,  119,    0,  666,  666,  120,  467,  469,  138,  464,
      466,  160,  465,   94,  464,  666,  195,  458,  459,  461,
      198,  456,  249,  466,    0,  283,  462,    0,  440,  439,
      666,  444,  666,  666,  136,  427,    0,  183,  426,  120,
      121,  119,   96,  169,  666,  666,  666,  666,  666,  666,
      666,  421,  420,  666,  401,  666,  297,    0,    0,  306,

        0,  151,  202,  390,  236,  240,    0,  261,  404,  415,
      404,  403,  265,  151,  290,  401,  666,  387,  666,    0,
      346,  342,  274,  362,  349,  355,  203,  666,  666,  666,
      394,  423,  353,  314,  161,   52,  347,  338,    0,  327,
        0,  292,  278,    0,  367,  331,  308,  371,    0,  290,
      375,  276,  290,  666,    0,  399,    0,  403,  266,  304,
        0,  350,   56,   74,  129,  300,  298,   70,  242,  454,
      472,  282,  297,    0,  277,  202,  302,  351,  371,  352,
      247,  255,  264,  210,  194,  339,    0,  428,    0,  432,
      193,  352,  203,  410,  413,  439,  219,  164,  422,  139,

      450,   94,  162,  666,   95,  666,  509,  515,  521,  526,
      531,  536,  541,  546,   87,  552,  558,  564,  570,  576,
      582,  588,  593,  599,  605,  611,  617,  623,  629,  635,
      641,  647,  653,  659
    } ;

static yyconst short int yy_def[235] =
    {   0,
      206,    1,  207,  207,  208,  208,  209,  209,  206,  206,
      206,  206,  206,  210,  211,  206,  212,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  213,  206,  206,  214,  215,  215,
       40,   40,   42,  206,  206,  206,  206,  206,  206,  206,
      216,  216,  206,  216,  216,  206,  206,  206,  206,  206,
      206,  206,  210,  206,   63,  211,  206,   66,  206,  206,
      206,  217,  206,  206,  206,  206,   26,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  213,   97,   97,  214,

      100,   40,  215,  103,  206,  206,   40,  206,  206,  217,
      216,  206,  216,  216,  218,  206,  206,  206,  206,  217,
      219,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  220,  216,  218,  221,  217,  222,  223,
      224,  206,  206,  122,  206,  206,  206,  206,  124,  206,
      206,  206,  206,  206,  131,  206,  132,  206,  225,  226,
      227,  228,  229,  223,  230,  231,  223,  206,  206,  206,
      206,  206,  232,  233,  226,  234,  231,  229,  216,  223,
      224,  231,  206,  206,  206,  206,  170,  206,  171,  206,
      206,  206,  232,  234,  231,  216,  216,  206,  206,  206,

      206,  206,  216,  206,  216,    0,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206
    } ;

static yyconst short int yy_nxt[711] =
    {   0,
       10,   11,   12,   13,   10,   14,   10,   10,   15,   16,
       17,   18,   19,   20,   21,   22,   23,   24,   25,   26,
       27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
       37,   10,   38,   39,   40,   41,   39,   39,   40,   42,
       43,   40,   10,   44,   46,   46,   46,   49,   46,   46,
       73,   52,   52,   52,  111,   52,   52,   52,  179,   47,
       74,   48,   50,   53,   48,  138,   54,   53,   55,  180,
       54,  183,   55,   57,   57,   57,  168,   57,   57,   57,
       61,   61,   61,   90,   91,   58,  184,  180,   59,   58,
       60,  104,   59,  102,   60,   62,   61,   61,   61,   61,

       61,   61,   86,   87,   88,  103,  105,  112,  112,  106,
      115,   62,   92,  201,   62,   64,   93,   94,   95,   96,
      102,   61,   61,   61,  206,  105,  105,  206,  106,  106,
       81,  111,  103,  126,   81,  126,   62,   81,  127,  108,
       61,   61,  181,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   67,  107,  109,  122,  206,  107,  199,  206,
      107,  113,  113,  113,  112,  162,  205,  135,  204,  122,
      122,  122,  122,  112,  112,  112,  114,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   75,   61,   61,   61,   61,

       61,   61,  124,   81,  179,  168,   76,   81,   77,   78,
       81,   62,  192,  186,   62,  195,  124,  124,  124,  124,
       79,  102,  152,   80,   81,   82,  198,   80,   83,   84,
       80,   98,  112,  206,  153,  203,   99,   99,   99,   99,
       99,   99,   99,   99,   99,  101,  101,  101,  101,  101,
      101,  101,  101,  101,   64,  131,  185,  168,  185,  132,
      181,  186,  108,   61,   61,  183,  113,  113,  113,  131,
      131,  131,  131,  132,  132,  132,  132,  109,  112,  168,
      184,  114,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   67,  111,  146,  137,  152,  191,  170,  191,  168,

      168,  192,  168,  138,  168,  147,  168,  153,  174,  152,
       82,  170,  170,  170,  170,  195,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   98,  172,  146,  169,  168,
       99,   99,   99,   99,   99,   99,   99,   99,   99,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  142,  111,
      146,  138,  111,  179,  168,   75,  161,  159,  199,  143,
      164,  144,  147,  177,  180,  180,   76,   82,  125,   78,
      200,  201,  196,  145,  127,  144,  144,  144,  144,  148,
       79,  149,  150,  202,  112,   82,  144,  197,  141,  165,
      171,  139,  111,  151,  149,  149,  149,  149,  149,  154,

      144,  144,  144,  144,  171,  171,  171,  171,  149,  149,
      149,  149,  179,  155,  112,  168,  112,  112,  155,  134,
      133,  103,  157,  195,  130,  156,  195,  155,  155,  155,
      155,  154,  155,  155,  155,  155,  157,  157,  157,  157,
      196,  199,  157,  129,  128,  125,  123,  187,  121,  119,
      119,  189,  112,  200,  158,  197,  157,  157,  157,  157,
      142,  187,  187,  187,  187,  189,  189,  189,  189,  201,
       66,   63,  118,  187,   73,   72,  117,  116,  112,  112,
      110,  202,   73,   72,   89,  188,   85,  187,  187,  187,
      187,  189,  150,   72,   71,  206,  206,  206,  206,  206,

      206,  206,  206,  190,  206,  189,  189,  189,  189,   45,
       45,   45,   45,   45,   45,   51,   51,   51,   51,   51,
       51,   56,   56,   56,   56,   56,   56,   63,  206,   63,
       63,   63,   66,  206,   66,   66,   66,   69,  206,   69,
       69,   69,   97,  206,  206,   97,   97,  100,  206,  206,
      100,  100,  111,  111,  111,  111,  111,  111,  120,  120,
      206,  120,  120,  120,  136,  136,  136,  136,  136,  136,
      140,  140,  206,  140,  140,  140,  160,  160,  206,  160,
      160,  160,  163,  163,  163,  163,  163,  163,  166,  166,
      206,  166,  166,  167,  167,  167,  167,  167,  167,  141,

      141,  206,  141,  141,  141,  173,  173,  206,  173,  173,
      173,  175,  175,  175,  175,  175,  175,  161,  161,  206,
      161,  161,  161,  176,  176,  176,  176,  176,  176,  178,
      178,  178,  178,  178,  178,  165,  165,  165,  165,  165,
      165,  182,  182,  182,  182,  182,  182,  193,  193,  193,
      193,  193,  193,  174,  174,  206,  174,  174,  174,  194,
      194,  194,  194,  194,  194,    9,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,

      206,  206,  206,  206,  206,  206,  206,  206,  206,  206
    } ;

static yyconst short int yy_chk[711] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    3,    3,    3,    4,    4,    4,
       25,    5,    5,    5,  136,    6,    6,    6,  163,    3,
       25,    3,    4,    5,    4,  136,    5,    6,    5,  163,
        6,  168,    6,    7,    7,    7,  164,    8,    8,    8,
       11,   11,   11,   31,   31,    7,  168,  164,    7,    8,
        7,  215,    8,   39,    8,   11,   12,   12,   12,   13,

       13,   13,   29,   29,   29,   39,   40,   54,  205,   40,
       54,   12,   32,  202,   13,   14,   32,   32,   32,   32,
       40,   46,   46,   46,   42,   80,   81,   42,   80,   81,
       83,  165,   40,   82,   83,   82,   46,   83,   82,   49,
       49,   49,  165,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   15,   42,   49,   75,  102,   42,  200,  102,
       42,   52,   52,   52,  114,  135,  203,  114,  198,   75,
       75,   75,   75,   52,  135,  203,   52,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   26,   57,   57,   57,   61,

       61,   61,   78,   84,  176,  193,   26,   84,   26,   26,
       84,   57,  191,  185,   61,  176,   78,   78,   78,   78,
       26,  103,  127,   26,   26,   26,  184,   26,   26,   26,
       26,   35,  197,  103,  127,  197,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   63,  105,  169,  182,  169,  106,
      181,  169,  108,  108,  108,  183,  113,  113,  113,  105,
      105,  105,  105,  106,  106,  106,  106,  108,  113,  175,
      183,  113,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   66,  115,  123,  115,  152,  172,  143,  172,  173,

      167,  172,  166,  115,  177,  123,  160,  152,  159,  153,
      123,  143,  143,  143,  143,  177,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   97,  150,  147,  142,  140,
       97,   97,   97,   97,   97,   97,   97,   97,   97,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  122,  137,
      146,  138,  162,  178,  180,  125,  134,  133,  186,  122,
      137,  122,  146,  162,  178,  180,  125,  146,  125,  125,
      186,  192,  179,  122,  126,  122,  122,  122,  122,  124,
      125,  124,  124,  192,  179,  125,  145,  179,  121,  137,
      148,  118,  162,  124,  151,  124,  124,  124,  124,  131,

      145,  145,  145,  145,  148,  148,  148,  148,  151,  151,
      151,  151,  194,  131,  116,  195,  112,  111,  156,  110,
      109,  104,  158,  194,   95,  131,  195,  131,  131,  131,
      131,  132,  156,  156,  156,  156,  158,  158,  158,  158,
      196,  199,  132,   93,   92,   79,   76,  188,   72,   70,
       69,  190,  196,  199,  132,  196,  132,  132,  132,  132,
      170,  188,  188,  188,  188,  190,  190,  190,  190,  201,
       67,   64,   62,  170,   60,   59,   58,   55,   53,   51,
       50,  201,   48,   47,   30,  170,   27,  170,  170,  170,
      170,  171,  171,   23,   20,    9,    0,    0,    0,    0,

        0,    0,    0,  171,    0,  171,  171,  171,  171,  207,
      207,  207,  207,  207,  207,  208,  208,  208,  208,  208,
      208,  209,  209,  209,  209,  209,  209,  210,    0,  210,
      210,  210,  211,    0,  211,  211,  211,  212,    0,  212,
      212,  212,  213,    0,    0,  213,  213,  214,    0,    0,
      214,  214,  216,  216,  216,  216,  216,  216,  217,  217,
        0,  217,  217,  217,  218,  218,  218,  218,  218,  218,
      219,  219,    0,  219,  219,  219,  220,  220,    0,  220,
      220,  220,  221,  221,  221,  221,  221,  221,  222,  222,
        0,  222,  222,  223,  223,  223,  223,  223,  223,  224,

      224,    0,  224,  224,  224,  225,  225,    0,  225,  225,
      225,  226,  226,  226,  226,  226,  226,  227,  227,    0,
      227,  227,  227,  228,  228,  228,  228,  228,  228,  229,
      229,  229,  229,  229,  229,  230,  230,  230,  230,  230,
      230,  231,  231,  231,  231,  231,  231,  232,  232,  232,
      232,  232,  232,  233,  233,    0,  233,  233,  233,  234,
      234,  234,  234,  234,  234,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,

      206,  206,  206,  206,  206,  206,  206,  206,  206,  206
    } ;

static yy_state_type yy_state_buf[YY_BUF_SIZE + 2], *yy_state_ptr;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
yy_lp = yy_full_lp; /* restore orig. accepting pos. */ \
yy_state_ptr = yy_full_state; /* restore orig. state */ \
yy_current_state = *yy_state_ptr; /* restore curr. state */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "..\\src\\vhdlscanner.l"
#define INITIAL 0
/************** VHDL scanner in LEX format **********
 *
 * Version 0.2 Wed Aug 11, 1993
 *
 * This scanner is derived from a scanner of the ALLIANCE CAD toolset,
 * release 1.1. That toolset was written from:
 *   MASI/CAO-VLSI CAD Team  
 *   Laboratoire MASI/CAO-VLSI
 *   Tour 55-65, 2eme etage, Porte 13
 *   Universite Pierre et Marie Curie (PARIS VI)
 *   4, place Jussieu 75252 PARIS Cedex 05, FRANCE
 * The ALLIANCE CAD Toolset can be obtained from ftp site : ftp-masi.ibp.fr    
 *
 * This scanner is avail at: ftp.cs.utwente.nl in pub/src/VHDL/Grammar
 * A corresponding Yacc grammar is available at the same site
 *
 * author of this derived scanner version:
 * Thomas Dettmer
 * Dortmund University
 * Dept. of Computer Scienc, LS1
 * PB 500 500
 * D-44221 Dortmund (Germany)
 * Phone: +49-231-755-6464
 * e-mail: dettmer@ls1.informatik.uni-dortmund.de
 *
 *
 ****************************************************************
 * 
 * This file is intended not to be used for commercial purposes
 * without permission of the University of Dortmund
 *   
 * NOTE THAT THERE IS NO WARRANTY FOR CORRECTNES, COMPLETENESS, SUPPORT
 * OR ANYTHING ELSE.
 *******************************************************/
/******************************************************************************
 * modified for doxygen by M. Kreis
 * extended to VHDL 93/2002/2008 
 ******************************************************************************/
#line 40 "..\\src\\vhdlscanner.l"

#ifndef YYSTYPE
	typedef int YYSTYPE;
#endif

#include <ctype.h>
#include <search.h>

#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <string.h>
#include <ctype.h>
#include "commentscan.h"
#include "vhdlparser.h"
#include "vhdlscanner.h"

#include "doxygen.h"
#include "searchindex.h"
#include <ctype.h>
#include "scanner.h"
#include "vhdldocgen.h"
#include "util.h"
#include "bufstr.h"
#include "message.h"
#include "vhdlcode.h"
#include <qmap.h>
#include "entry.h"

static MyParserVhdl *pconv;

static bool          g_lexInit = FALSE;
static ParserInterface *g_thisParser;
static struct s_contVhdl* yycont=NULL;
static Entry* current_root;
static Entry   gBlock;

static int yyLineNr =1;
//static int yyPrevLine=1;
//static int yyEndLine=1;
static int   g_lastCommentContext;
static int              inputPosition;
//static int defineLineContinue=0;
static int startComment;
//static int iSize=0;
static QCString inputVhdlString;
static QFile            inputFile;
static QCString         yyFileName;
static QList<QCString> qlist;

static QCString lastLetter;
//static int totLines=0;

//static bool multLineComment=FALSE;
static bool doxComment=FALSE; // doxygen comment ? 
static QCString strComment;
static int iDocLine=-1;
static int* lineIndex=NULL;
static int num_chars;
static  int prevToken;
static int iCodeLen;

//static const char *  g_inputString;       //!< the    code fragment as text
//static int           g_inputLines=0;      //!<number of line in the code fragment
//static bool          g_needsTermination;
static	QMap<QCString, int> keyMap;
static QList<Entry>  lineEntry;
static bool  checkMultiComment(QCString& qcs,int line);
static void handleCommentBlock(const QCString &doc,bool brief);
static void mapLibPackage(const Entry* ce);
 static QList<Entry>* getEntryAtLine(const Entry* ce,int line);
static bool addLibUseClause(const QCString &type);
static Entry* oldEntry;
static bool varr=FALSE;
static QCString varName;

static struct 
{
  QCString doc;
  bool brief;
  bool pending;
  int iDocLine;
} str_doc;

#define YY_NEVER_INTERACTIVE 1
#define YY_USER_ACTION num_chars += vhdlScanYYleng;

#define MAX_KEYWORD_LEN 20

typedef struct 
{
  char nom[MAX_KEYWORD_LEN];
  int kval;
} el_mc;

static el_mc tab_mc []=
{
    { "abs",                t_ABS                },
    { "access",             t_ACCESS             },
    { "after",              t_AFTER              },
    { "alias",              t_ALIAS              },
    { "all",                t_ALL                },
    { "and",                t_AND                },
    { "architecture",       t_ARCHITECTURE       },
    { "array",              t_ARRAY              },
    { "assert",             t_ASSERT             },
    { "assume",             t_ASSUME             },
    { "assume_guarantee",   t_ASSUME_GUARANTEE   },
    { "attribute",          t_ATTRIBUTE          },

    { "begin",              t_BEGIN              },
    { "block",              t_BLOCK              },
    { "body",               t_BODY               },
    { "buffer",             t_BUFFER             },
    { "bus",                t_BUS                },

    { "case",               t_CASE               },
    { "component",          t_COMPONENT          },
    { "configuration",      t_CONFIGURATION      },
    { "constant",           t_CONSTANT           },
    { "context",            t_CONTEXT            },
    { "cover",              t_COVER              },

    { "default",            t_DEFAULT            },
    { "disconnect",         t_DISCONNECT         },
    { "downto",             t_DOWNTO             },

    { "else",               t_ELSE               },
    { "elsif",              t_ELSIF              },
    { "end",                t_END                },
    { "entity",             t_ENTITY             },
    { "exit",               t_EXIT               },

    { "fairness",           t_FAIRNESS           },
    { "file",               t_FILE               },
    { "for",                t_FOR                },
    { "force",              t_FORCE              },
    { "function",           t_FUNCTION           },

    { "generate",           t_GENERATE           },
    { "generic",            t_GENERIC            },
    { "group",              t_GROUP              },
    { "guarded",            t_GUARDED            },

    { "if",                 t_IF                 },
    { "impure",             t_IMPURE             },
    { "in",                 t_IN                 },
    { "inertial",           t_INERTIAL           },
    { "inout",              t_INOUT              },
    { "is",                 t_IS                 },
  
    { "label",              t_LABEL              },
    { "library",            t_LIBRARY            },
    { "linkage",            t_LINKAGE            },
    { "literal",            t_LITERAL            },
    { "loop",               t_LOOP               },

    { "map",                t_MAP                },
    { "mod",                t_MOD                },

    { "nand",               t_NAND               },
    { "new",                t_NEW                },
    { "next",               t_NEXT               },
    { "nor",                t_NOR                },
    { "not",                t_NOT                },
    { "null",               t_NULL               },

    { "of",                 t_OF                 },
    { "on",                 t_ON                 },
    { "open",               t_OPEN               },
    { "or",                 t_OR                 },
    { "others",             t_OTHERS             },
    { "out",                t_OUT                },

    { "package",            t_PACKAGE            },
    { "parameter",          t_PARAMETER          },
    { "port",               t_PORT               },
    { "postponed",          t_POSTPONED          },
    { "procedure",          t_PROCEDURE          },
    { "process",            t_PROCESS            },
    { "property",           t_PROPERTY           },
    { "protected",          t_PROTECTED          },
    { "pure",               t_PURE               },
  
    { "range",              t_RANGE              },
    { "record",             t_RECORD             },
    { "register",           t_REGISTER           },
    { "reject",             t_REJECT             },
    { "release",            t_RELEASE            },
    { "restrict",           t_RESTRICT           },
    { "restrict_guarantee", t_RESTRICT_GUARANTEE },
    { "rem",                t_REM                },
    { "report",             t_REPORT             },
    { "rol",                t_ROL                },
    { "ror",                t_ROR                },
    { "return",             t_RETURN             },

    { "select",             t_SELECT             },
    { "sequence",           t_SEQUENCE           },
    { "severity",           t_SEVERITY           },
    { "signal",             t_SIGNAL             },
    { "shared",             t_SHARED             },
    { "sla",                t_SLA                },
    { "sll",                t_SLL                },
    { "sra",                t_SRA                },
    { "srl",                t_SRL                },
    { "strong",             t_STRONG             },
    { "subtype",            t_SUBTYPE            },

    { "then",               t_THEN               },
    { "to",                 t_TO                 },
    { "transport",          t_TRANSPORT          },
    { "type",               t_TYPE               },

    { "unaffected",         t_UNAFFECTED         },
    { "units",              t_UNITS              },
    { "until",              t_UNTIL              },
    { "use",                t_USE                },

    { "variable",           t_VARIABLE           },
    { "vmode",              t_VMODE              },
    { "vprop",              t_VPROP              },
    { "vunit",              t_VUNIT              },

    { "wait",               t_WAIT               },
    { "when",               t_WHEN               },
    { "while",              t_WHILE              },
    { "with",               t_WITH               },

    { "xor",                t_XOR                },
    { "xnor",               t_XNOR               },
    { "zz",                 -1                   } // list end
};

   
static int find_keyword(char *s)
{
  QCString word(s);
  // keyword ?
  if (word.length() >  MAX_KEYWORD_LEN) 
	return -1;

  word=word.lower();
  QMap<QCString, int>::Iterator it = keyMap.find(word);
  if (it.key())
	return it.data();

  return -1;
}

// update current line
static void lineCount()
{
  for (const char* c=vhdlScanYYtext ; *c ; ++c )
  {
    yyLineNr += (*c == '\n') ;
  }
}


static void startCodeBlock(int index){
  int ll=strComment.length();
  iCodeLen=inputVhdlString.findRev(strComment.data())+ll;
  // fprintf(stderr,"\n startin code..%d %d %d\n",iCodeLen,num_chars,ll);
  //assert(false);
  gBlock.reset();
  int len=strComment.length();
  QCString name=strComment.right(len-index);// 
  name=VhdlDocGen::getIndexWord(name.data(),1);
  if (!name)
    gBlock.name="misc"+ VhdlDocGen::getRecordNumber(); 
  else
    gBlock.name=name;
  strComment=strComment.left(index);
  gBlock.startLine=yyLineNr+1;
  gBlock.bodyLine=yyLineNr+1;
  VhdlDocGen::prepareComment(strComment);
  gBlock.brief+=strComment;
}
static void makeInlineDoc(int endCode)
{
  int len=endCode-iCodeLen;
  QCString par=inputVhdlString.mid(iCodeLen,len);
  gBlock.doc=par;
  gBlock.inbodyDocs=par;
  gBlock.section=Entry::VARIABLE_SEC;
  gBlock.spec=VhdlDocGen::MISCELLANEOUS;
  gBlock.fileName = yyFileName;
  gBlock.endBodyLine=yyLineNr-1;
  gBlock.lang=SrcLangExt_VHDL;
  Entry *temp=new Entry(gBlock);

  Entry* compound=getVhdlCompound();

  if (compound)
  {
    compound->addSubEntry(temp);
  }
  else
  {
    temp->type="misc"; // global code like library ieee...
    current_root->addSubEntry(temp);
  }
  strComment.resize(0);
  gBlock.reset();


}// makeInlineDoc

static bool isConstraintFile(const QCString &fileName,const QCString &ext)
{
  return fileName.right(ext.length())==ext;
}

//static void resetScanner(const char* s,MyParserVhdl* parse);

#undef  YY_INPUT
#define	YY_INPUT(buf,result,max_size) result=vhdlScanYYread(buf,max_size);


static int vhdlScanYYread(char *buf,int max_size)
{
  int c=0;
  while ( c < max_size && inputVhdlString.at(inputPosition) )
  {
	*buf = inputVhdlString.at(inputPosition++) ;
	c++; buf++;
  }
  return c;
}

#define Comment 1

#define Vhdl2008Comment 2

#define EndVhdl2008Comment 3

#line 1031 "c:\\Boot\\doxygen-1.8.1.src\\doxygen-1.8.1\\src\\vhdlscanner.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		yy_current_buffer->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 407 "..\\src\\vhdlscanner.l"


#line 1188 "c:\\Boot\\doxygen-1.8.1.src\\doxygen-1.8.1\\src\\vhdlscanner.cpp"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_current_state += YY_AT_BOL();
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 207 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 666 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     yy_looking_for_trail_begin )
					{
					if ( yy_act == yy_looking_for_trail_begin )
						{
						yy_looking_for_trail_begin = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					yy_looking_for_trail_begin = yy_act & ~YY_TRAILING_MASK;
					yy_looking_for_trail_begin |= YY_TRAILING_HEAD_MASK;
					yy_full_match = yy_cp;
					yy_full_state = yy_state_ptr;
					yy_full_lp = yy_lp;
					}
				else
					{
					yy_full_match = yy_cp;
					yy_full_state = yy_state_ptr;
					yy_full_lp = yy_lp;
					break;
					}
				++yy_lp;
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 409 "..\\src\\vhdlscanner.l"
{ /* nothing */ }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 410 "..\\src\\vhdlscanner.l"
{ return(t_Ampersand); }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 411 "..\\src\\vhdlscanner.l"
{ return(t_Apostrophe); }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 412 "..\\src\\vhdlscanner.l"
{ return(t_LeftParen); }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 413 "..\\src\\vhdlscanner.l"
{ return(t_RightParen); }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 414 "..\\src\\vhdlscanner.l"
{ return(t_DoubleStar); }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 415 "..\\src\\vhdlscanner.l"
{ return(t_Star); }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 416 "..\\src\\vhdlscanner.l"
{ return(t_Plus); }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 417 "..\\src\\vhdlscanner.l"
{ return(t_Comma); }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 418 "..\\src\\vhdlscanner.l"
{ return(t_Minus); }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 419 "..\\src\\vhdlscanner.l"
{ return(t_VarAsgn); }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 420 "..\\src\\vhdlscanner.l"
{ return(t_Colon); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 421 "..\\src\\vhdlscanner.l"
{ return(t_Semicolon); }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 422 "..\\src\\vhdlscanner.l"
{ return(t_LESym); }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 423 "..\\src\\vhdlscanner.l"
{ return(t_GESym); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 424 "..\\src\\vhdlscanner.l"
{ return(t_LTSym); }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 425 "..\\src\\vhdlscanner.l"
{ return(t_GTSym); }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 426 "..\\src\\vhdlscanner.l"
{ return(t_EQSym); }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 427 "..\\src\\vhdlscanner.l"
{ return(t_NESym); }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 428 "..\\src\\vhdlscanner.l"
{ return(t_Arrow); }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 429 "..\\src\\vhdlscanner.l"
{ return(t_Box); }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 430 "..\\src\\vhdlscanner.l"
{ return(t_SLSL); }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 431 "..\\src\\vhdlscanner.l"
{ return(t_SRSR); }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 432 "..\\src\\vhdlscanner.l"
{ return(t_QQ); }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 433 "..\\src\\vhdlscanner.l"
{ return(t_QGT); }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 434 "..\\src\\vhdlscanner.l"
{ return(t_QLT); }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 435 "..\\src\\vhdlscanner.l"
{ return(t_QG); }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 436 "..\\src\\vhdlscanner.l"
{ return(t_QL); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 437 "..\\src\\vhdlscanner.l"
{ return(t_QEQU); }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 438 "..\\src\\vhdlscanner.l"
{ return(t_QNEQU); }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 439 "..\\src\\vhdlscanner.l"
{ return(t_Q); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 440 "..\\src\\vhdlscanner.l"
{ return(t_Bar); }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 441 "..\\src\\vhdlscanner.l"
{ return(t_Dot); }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 442 "..\\src\\vhdlscanner.l"
{ return(t_Slash); }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 443 "..\\src\\vhdlscanner.l"
{ return(t_At); }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 444 "..\\src\\vhdlscanner.l"
{ return(t_Neg); }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 445 "..\\src\\vhdlscanner.l"
{ return(t_LEFTBR); }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 446 "..\\src\\vhdlscanner.l"
{ return(t_RIGHTBR); }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 449 "..\\src\\vhdlscanner.l"
{
          int itoken=find_keyword(vhdlScanYYtext);
        
          //	fprintf(stderr,"\n <<<< search tok:  %s %d %d>>>\n",vhdlScanYYtext,itoken,yyLineNr);
        
          // tokens in vhdlparser.hpp 258..412
	  if (itoken>200  && itoken<500 && prevToken!=t_END)
	  {
	    //  	printf("\n <<<< insert tok:  %s %d %d>>>\n",vhdlScanYYtext,itoken,yyLineNr);
	    lineIndex[itoken]=yyLineNr;
	  }
	 
	 // global members
	 if (( itoken==t_ARCHITECTURE )  || 
             ( itoken==t_ENTITY)         || 
             ( itoken==t_PACKAGE )       || 
             ( itoken==t_LIBRARY )       ||  
             ( itoken==t_USE )           ||  
             ( itoken==t_CONFIGURATION ) ||  
             ( itoken==t_CONTEXT ) )
         {
	   lineIndex[itoken]=yyLineNr;
         }
	 
	  prevToken=itoken;
        
          yycont->qstr=vhdlScanYYtext;
          yycont->yyLineNr=yyLineNr;
          if (itoken== -1)  
          {
            yycont->iLine=yyLineNr;
            return ( t_LETTER );
          }
          else 
          {
            return ( itoken );
          }
        }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 488 "..\\src\\vhdlscanner.l"
{
          yycont->qstr=vhdlScanYYtext;
          return ( t_ABSTRLIST );
        }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 493 "..\\src\\vhdlscanner.l"
{
          QCString q(vhdlScanYYtext);	       
          yycont->qstr=vhdlScanYYtext; 
        
          if (q=="'('") // std_logic'('1') ?
          {
            char c=yy_hold_char;
            if (isalpha(c) || isdigit(c))
            {
              unput('\'');
              unput('(');
              return(t_Apostrophe);
            }
            else
	    {
              return ( t_CHARLIST );
	    }
          }
          return ( t_CHARLIST );
        }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 514 "..\\src\\vhdlscanner.l"
{
          yycont->qstr=vhdlScanYYtext;
          yycont->iLine=yyLineNr;
	  return ( t_STRING );
        } 
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 520 "..\\src\\vhdlscanner.l"
{
	  yycont->qstr=vhdlScanYYtext;
	  yycont->iLine=yyLineNr;
	  return ( t_DIGIT );
        }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 526 "..\\src\\vhdlscanner.l"
{
	  yycont->qstr=vhdlScanYYtext;
	  yycont->iLine=yyLineNr;
	  return(t_ToolDir);
        }	
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 532 "..\\src\\vhdlscanner.l"
{
	  yyLineNr++;
          yycont->yyLineNr=yyLineNr;
        }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 537 "..\\src\\vhdlscanner.l"
{
          /* comment */
	  QCString qcs(vhdlScanYYtext);
	  //  vhdl comment ?
	  if (qcs.stripPrefix("--!"))
	  {
	    REJECT;
	  }
        }               
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 546 "..\\src\\vhdlscanner.l"
{ /* unknown characters */ }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 549 "..\\src\\vhdlscanner.l"
{ // multi line comment
  if (iDocLine==-1) iDocLine=yyLineNr;
  QCString qc(vhdlScanYYtext);
  int len=qc.contains('\n')+yyLineNr-1;
  if (YY_START!=Comment) // Start of the comment block
  {
    startComment=yyLineNr;
    g_lastCommentContext=YY_START;
  }
  
   if(!checkMultiComment(qc,len))
  {
    strComment+=vhdlScanYYtext;
  }
  lineCount();
  BEGIN(Comment);
}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 567 "..\\src\\vhdlscanner.l"
{
  if (iDocLine==-1) iDocLine=yyLineNr;
  strComment+=vhdlScanYYtext;
  int index=strComment.find("\\code");
  if (index>0)
  {
    startCodeBlock(index);
    doxComment=TRUE;
  }
  lineCount();
  BEGIN(Comment);
}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 580 "..\\src\\vhdlscanner.l"
{
          // found end of comment block
          
          int index =strComment.find("\\code");
          if (index>0)
          {
            startCodeBlock(index);
          }

          VhdlDocGen::prepareComment(strComment);


          if (index==-1 && !doxComment) 
          {
            handleCommentBlock(strComment,FALSE);
          }
          strComment.resize(0);;
          unput(*vhdlScanYYtext);
          doxComment=FALSE;
          BEGIN(g_lastCommentContext);
        }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 602 "..\\src\\vhdlscanner.l"
{ // one line comment
          if (iDocLine==-1) iDocLine=yyLineNr;
          QCString qcs(vhdlScanYYtext);

	  bool isEndCode=qcs.contains("\\endcode");

	  int index = qcs.find("\\code");
	  if (isEndCode)
	  {
	    int end=inputVhdlString.find(qcs.data(),iCodeLen);
	    makeInlineDoc(end);
	  }
	  else if (index > 0 ) 
	  {
	    // assert(false);
	    strComment=qcs;
	    startCodeBlock(index);
	    strComment.resize(0);
	  }

	  //printf("--> handleCommentBlock line %d\n",yyLineNr);
	  if (!isEndCode && index==-1)
	  {
	    int j=qcs.find("--!");
	    qcs=qcs.right(qcs.length()-3-j);

        if(!checkMultiComment(qcs,yyLineNr))
	    {
	      handleCommentBlock(qcs,TRUE);
	    }
	  }//endcode
        }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 635 "..\\src\\vhdlscanner.l"
{
	  strComment+=vhdlScanYYtext;
	  if (yy_hold_char=='!') // found  comment starting with "/*!"
  	  {
	    doxComment=TRUE;
	  }
	  BEGIN(Vhdl2008Comment); 
        }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 644 "..\\src\\vhdlscanner.l"
{
    	  QCString tt(vhdlScanYYtext);
	  int len=tt.length();
	  yyLineNr+=tt.contains('\n');

	  // delete * from comments 
	  // /*! 
	  // *   see vim !
	  // */

	  if (yytext[len-1]=='*' && tt.contains('\n'))
	  {
	    QCString ss=tt;
	    VhdlDocGen::deleteAllChars(ss,' ');
	    VhdlDocGen::deleteAllChars(ss,'\t');
	    if (ss.data()  && ss.at(ss.length()-2)=='\n')
	    {
	      tt=tt.left(len-1);
	      len--;
	    }
	  }

	  //	   fprintf(stderr,"\n << %s  >>",tt.data());
	  strComment+=tt;
	  char c=yy_hold_char;
	  if (c =='/')
	  {
	    unput('*');
	    BEGIN(EndVhdl2008Comment);
	  }
	  else 
	  {
	    BEGIN(Vhdl2008Comment);
	  }
        }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 680 "..\\src\\vhdlscanner.l"
{	 
          if (doxComment)
          {  
            strComment.stripPrefix("/*!");
            strComment= strComment.left(  strComment.length()-1);
            handleCommentBlock( strComment,TRUE);
          }
          doxComment=FALSE;
          strComment.resize(0);
          BEGIN(INITIAL);
        }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 693 "..\\src\\vhdlscanner.l"
ECHO;
	YY_BREAK
#line 1782 "c:\\Boot\\doxygen-1.8.1.src\\doxygen-1.8.1\\src\\vhdlscanner.cpp"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(Comment):
			case YY_STATE_EOF(Vhdl2008Comment):
			case YY_STATE_EOF(EndVhdl2008Comment):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_current_state += YY_AT_BOL();
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 207 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 207 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 206);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	yy_current_buffer->yy_at_bol = (c == '\n');

	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 693 "..\\src\\vhdlscanner.l"


static void parserInit()
{
  num_chars=0;
  lineIndex=(int*)malloc(500*sizeof(int));

  if (!g_lexInit) 
  {
    VhdlDocGen::init();
    el_mc oop;
    int p=0;
    while ((oop=tab_mc[p++]).kval!=-1)
    {
      QCString q(&oop.nom[0]);
      keyMap.insert(q,oop.kval);
    }
  }
}

void vhdlscanFreeScanner()
{
#if defined(YY_FLEX_SUBMINOR_VERSION)
  if (g_lexInit)
  {
    vhdlScanYYlex_destroy();
  }
#endif
}

void VHDLLanguageScanner::resetCodeParserState()
{
}

bool VHDLLanguageScanner::needsPreprocessing(const QCString & /*extension*/)
{ 
  return TRUE; 
}

void VHDLLanguageScanner::parsePrototype(const char *text)
{ 
  varName=text;
  varr=TRUE;
}

// do parsing
int MyParserVhdl::doLex()
{
  int token=vhdlScanYYlex();
  //fprintf(stderr,"\ntoken: %d at line: %d",token,yyLineNr);
  return token;
}

void VHDLLanguageScanner::parseInput(const char *fileName,const char *fileBuf,Entry *root)
{
  yyFileName=QCString(fileName);

  bool xilinx_ucf=isConstraintFile(yyFileName,".ucf");
  bool altera_qsf=isConstraintFile(yyFileName,".qsf");

  // support XILINX(ucf) and ALTERA (qsf) file

  if (xilinx_ucf) 
  { 
    VhdlDocGen::parseUCF(fileBuf,root,yyFileName,FALSE);  
    return; 
  }
  if (altera_qsf) 
  { 
    VhdlDocGen::parseUCF(fileBuf,root,yyFileName,TRUE); 
    return; 
  }

  ::parserInit();
  yycont=getVhdlCont();
  yycont->root=root;
  yycont->fileName=fileName;
  initVhdlParser();
  QCString pPuffer(" ");
  pPuffer+=fileBuf;

  inputFile.setName(fileName);
  if (g_lexInit)
  {
    vhdlScanYYrestart( vhdlScanYYin );
  }
  g_lexInit=TRUE;
  g_thisParser=this;
  inputPosition=0;
  inputVhdlString=fileBuf;
  yyLineNr=1;
  current_root=root;
  pconv=new MyParserVhdl();
  groupEnterFile(fileName,yyLineNr);
  pconv->parse(pconv);
  //    resetScanner(NULL,pconv);
  delete pconv;	  	  
  Entry* curr=getCurrentVhdlEntry(); // delete last current
  delete curr;
  curr=0;
  free(lineIndex);
  inputFile.close();
  mapLibPackage(root);
}

void VHDLLanguageScanner::parseCode(CodeOutputInterface &codeOutIntf,
    const char *scopeName,
    const QCString &input,
    bool isExampleBlock,
    const char *exampleName,
    FileDef *fileDef,
    int startLine,
    int endLine,
    bool inlineFragment,
    MemberDef *memberDef,
    bool showLineNumbers
    )
{
  ::parseVhdlCode(codeOutIntf,scopeName,input,isExampleBlock,exampleName,
                  fileDef,startLine,endLine,inlineFragment,memberDef,
                  showLineNumbers);
}

/*
 * adds the library|use statements to the next class (entity|package|architecture|package body
 * library ieee
 * entity xxx
 * .....
 * library
 * package
 * enity zzz
 * .....
 * and so on..
 */
static void mapLibPackage(const Entry* ce)
{
  Entry *lastComp=0;
  while (TRUE)
  {
    bool found = FALSE;
    Entry *rt=0;
    //const QList<Entry> *epp=ce->children();
    EntryListIterator eli(*ce->children());
    EntryListIterator eli1=eli;
    for (;(rt=eli.current()),eli1=eli;++eli)
    {
      if (rt->spec==VhdlDocGen::LIBRARY || rt->spec==VhdlDocGen::USE)
        // top level library or use statement
      {
        Entry *temp=0;
        if(!addLibUseClause(rt->name))
        {
          rt->spec=-1;
          rt->section=0;
          //  continue;
        }

        for (;(temp=eli1.current());++eli1) // find next entity
        {
          if (temp->spec==VhdlDocGen::ENTITY || 
              temp->spec==VhdlDocGen::PACKAGE || 
              temp->spec==VhdlDocGen::ARCHITECTURE || 
              temp->spec==VhdlDocGen::PACKAGE_BODY)
          {
            Entry *ee=new Entry(*rt); //append a copy to entries sublist
            temp->addSubEntry(ee);
            found=TRUE;
            rt->spec=-1; //nullify entry
            rt->section=0;
            lastComp=temp;
            break;
          }
        }//for
        if (lastComp && rt->spec!=-1)
        {
          Entry *ee=new Entry(*rt); //append a copy to entries sublist
          lastComp->addSubEntry(ee);
          found=TRUE;
          rt->spec=-1; //nullify entry
          rt->section=0;
        }
      }//if
    }//for
    if (!found) // nothing left to do
    {
      return; 
    }
  }//while
}//MapLib

static bool addLibUseClause(const QCString &type)
{
  static bool show=Config_getBool("SHOW_INCLUDE_FILES");
  static bool showIEEESTD=Config_getBool("FORCE_LOCAL_INCLUDES");

  if (!show)  // all libraries and included packages will not  be shown
  {
    return FALSE;
  }

  if (!showIEEESTD) // all standard packages and libraries will not be shown
  {  
    if (type.lower().stripPrefix("ieee")) return FALSE;
    if (type.lower().stripPrefix("std")) return FALSE;
  }  
  return TRUE;
}

static void handleCommentBlock(const QCString &doc,bool brief)
{
  int position=0;

  // empty comment  --!
  if (doc.isEmpty()) return;

  bool needsEntry=FALSE;
  Protection protection=Public;
  int lineNr = iDocLine;

  Entry* current=getCurrentVhdlEntry();

  if (oldEntry==current)
  {
    //printf("\n find pending message  < %s > at line: %d \n ",doc.data(),iDocLine);
    str_doc.doc=doc;
    str_doc.iDocLine=iDocLine;
    str_doc.brief=brief;
    str_doc.pending=TRUE;
    return;
  }

  oldEntry=current;

  if (brief) 
    current->briefLine = iDocLine; 
  else 
    current->docLine = iDocLine;
  
//  printf("parseCommentBlock file<%s>\n [%s]\n",yyFileName.data(),doc.data());
  while (parseCommentBlock(
	g_thisParser,
	current,
	doc,        // text
	yyFileName, // file
	lineNr,     // line of block start
	brief, 
	0,
	FALSE,
	protection,
        position,
        needsEntry
        )
     ) 
  {
 //printf("parseCommentBlock position=%d [%s]\n",position,doc.data()+position);
    if (needsEntry) newVhdlEntry();
  }
  if (needsEntry)
  {
    if(varr)
    {
      varr=FALSE;
      current->name=varName;
      current->section=Entry::VARIABLEDOC_SEC;
      varName="";
      strComment.resize(0);
    }
   
    newVhdlEntry();
  }
  iDocLine=-1;
  strComment.resize(0);
}

// returns the vhdl parsed types at line xxx

QList<Entry>* getEntryAtLine(const Entry* ce,int line)
{
  EntryListIterator eli(*ce->children());
  Entry *found=0;
  Entry *rt;
  for (;(rt=eli.current());++eli)
  {
    if (rt->bodyLine==line)
    {
		lineEntry.insert(0,rt);
    } // if
   
    getEntryAtLine(rt,line);
  }
return &lineEntry;
}


// token index in vhdlparser.hpp 258..416
int getParsedLine(int object)
{
  //assert(object>254 && object <416);
  return lineIndex [object];
}

void isVhdlDocPending()
{
  if (!str_doc.pending)
    return;
  str_doc.pending=FALSE;
  oldEntry=0; // prevents endless recursion
  iDocLine=str_doc.iDocLine;
  handleCommentBlock(str_doc.doc,str_doc.brief);
  iDocLine=-1;
}

static bool  checkMultiComment(QCString& qcs,int line)
{
  QList<Entry> *pTemp=getEntryAtLine(current_root,line);

 if (pTemp->isEmpty())  return false;
  
    int ii=pTemp->count();
   qcs.stripPrefix("--!");
    while(!pTemp->isEmpty()){
    
    Entry *e=(Entry*)pTemp->first();
    e->briefLine=line;
    e->brief+=qcs;
    iDocLine=-1;
    pTemp->removeFirst();
    ii=pTemp->count();
    }
     return true; 
 }
 
 